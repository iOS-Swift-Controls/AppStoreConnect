// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate

@available(*, deprecated, message: "Deprecated")
public struct IdfaDeclarationResponse: Codable {
    /// IdfaDeclaration
    ///
    /// - warning: Deprecated.
    public var data: IdfaDeclaration
    public var included: [AppStoreVersion]?
    public var links: DocumentLinks

    public init(data: IdfaDeclaration, included: [AppStoreVersion]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppPreviewSetAppPreviewsLinkagesResponse: Codable {
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [Datum]) {
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct CiBranchPatterns: Codable {
    public var patterns: [Pattern]?
    public var isAllMatch: Bool?

    public struct Pattern: Codable {
        public var pattern: String?
        public var isPrefix: Bool?

        public init(pattern: String? = nil, isPrefix: Bool? = nil) {
            self.pattern = pattern
            self.isPrefix = isPrefix
        }
    }

    public init(patterns: [Pattern]? = nil, isAllMatch: Bool? = nil) {
        self.patterns = patterns
        self.isAllMatch = isAllMatch
    }
}

public struct AppEventScreenshot: Codable {
    public var relationships: Relationships?
    public var id: String
    public var links: ResourceLinks
    public var attributes: Attributes?
    public var type: `Type`

    public struct Relationships: Codable {
        public var appEventLocalization: AppEventLocalization?

        public struct AppEventLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEventLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appEventLocalization: AppEventLocalization? = nil) {
            self.appEventLocalization = appEventLocalization
        }
    }

    public struct Attributes: Codable {
        public var fileName: String?
        public var fileSize: Int?
        public var assetToken: String?
        public var appEventAssetType: AppEventAssetType?
        public var imageAsset: ImageAsset?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?

        public init(fileName: String? = nil, fileSize: Int? = nil, assetToken: String? = nil, appEventAssetType: AppEventAssetType? = nil, imageAsset: ImageAsset? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil) {
            self.fileName = fileName
            self.fileSize = fileSize
            self.assetToken = assetToken
            self.appEventAssetType = appEventAssetType
            self.imageAsset = imageAsset
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appEventScreenshots
    }

    public init(relationships: Relationships? = nil, id: String, links: ResourceLinks, attributes: Attributes? = nil, type: `Type`) {
        self.relationships = relationships
        self.id = id
        self.links = links
        self.attributes = attributes
        self.type = type
    }
}

public struct BuildResponse: Codable {
    public var included: [IncludedItem]?
    public var links: DocumentLinks
    /// Build
    public var data: Build

    public enum IncludedItem: Codable {
        case prereleaseVersion(PrereleaseVersion)
        case betaTester(BetaTester)
        case betaBuildLocalization(BetaBuildLocalization)
        case appEncryptionDeclaration(AppEncryptionDeclaration)
        case betaAppReviewSubmission(BetaAppReviewSubmission)
        case app(App)
        case buildBetaDetail(BuildBetaDetail)
        case appStoreVersion(AppStoreVersion)
        case buildIcon(BuildIcon)
        case buildBundle(BuildBundle)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else if let value = try? container.decode(BetaBuildLocalization.self) {
                self = .betaBuildLocalization(value)
            } else if let value = try? container.decode(AppEncryptionDeclaration.self) {
                self = .appEncryptionDeclaration(value)
            } else if let value = try? container.decode(BetaAppReviewSubmission.self) {
                self = .betaAppReviewSubmission(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BuildBetaDetail.self) {
                self = .buildBetaDetail(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(BuildIcon.self) {
                self = .buildIcon(value)
            } else if let value = try? container.decode(BuildBundle.self) {
                self = .buildBundle(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            case .betaBuildLocalization(let value): try container.encode(value)
            case .appEncryptionDeclaration(let value): try container.encode(value)
            case .betaAppReviewSubmission(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            case .buildBetaDetail(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .buildIcon(let value): try container.encode(value)
            case .buildBundle(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: DocumentLinks, data: Build) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct AppInfoLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var privacyChoicesURL: String?
            public var privacyPolicyText: String?
            public var privacyPolicyURL: String?
            public var subtitle: String?
            public var name: String?

            public init(privacyChoicesURL: String? = nil, privacyPolicyText: String? = nil, privacyPolicyURL: String? = nil, subtitle: String? = nil, name: String? = nil) {
                self.privacyChoicesURL = privacyChoicesURL
                self.privacyPolicyText = privacyPolicyText
                self.privacyPolicyURL = privacyPolicyURL
                self.subtitle = subtitle
                self.name = name
            }

            private enum CodingKeys: String, CodingKey {
                case privacyChoicesURL = "privacyChoicesUrl"
                case privacyPolicyText
                case privacyPolicyURL = "privacyPolicyUrl"
                case subtitle
                case name
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appInfoLocalizations
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ScmPullRequestsResponse: Codable {
    public var data: [ScmPullRequest]
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var included: [ScmRepository]?

    public init(data: [ScmPullRequest], meta: PagingInformation? = nil, links: PagedDocumentLinks, included: [ScmRepository]? = nil) {
        self.data = data
        self.meta = meta
        self.links = links
        self.included = included
    }
}

public struct EndUserLicenseAgreementCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var attributes: Attributes
        public var type: `Type`

        public struct Relationships: Codable {
            public var territories: Territories
            public var app: App

            public struct Territories: Codable {
                public var data: [Datum]

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case territories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(territories: Territories, app: App) {
                self.territories = territories
                self.app = app
            }
        }

        public struct Attributes: Codable {
            public var agreementText: String

            public init(agreementText: String) {
                self.agreementText = agreementText
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case endUserLicenseAgreements
        }

        public init(relationships: Relationships, attributes: Attributes, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreviewSet: Codable {
    public var id: String
    public var relationships: Relationships?
    public var links: ResourceLinks
    public var attributes: Attributes?
    public var type: `Type`

    public struct Relationships: Codable {
        public var appStoreVersionLocalization: AppStoreVersionLocalization?
        public var appCustomProductPageLocalization: AppCustomProductPageLocalization?
        public var appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization?
        public var appPreviews: AppPreviews?

        public struct AppStoreVersionLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppCustomProductPageLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersionExperimentTreatmentLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperimentTreatmentLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppPreviews: Codable {
            public var meta: PagingInformation?
            public var links: Links?
            public var data: [Datum]?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviews
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(meta: PagingInformation? = nil, links: Links? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.links = links
                self.data = data
            }
        }

        public init(appStoreVersionLocalization: AppStoreVersionLocalization? = nil, appCustomProductPageLocalization: AppCustomProductPageLocalization? = nil, appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization? = nil, appPreviews: AppPreviews? = nil) {
            self.appStoreVersionLocalization = appStoreVersionLocalization
            self.appCustomProductPageLocalization = appCustomProductPageLocalization
            self.appStoreVersionExperimentTreatmentLocalization = appStoreVersionExperimentTreatmentLocalization
            self.appPreviews = appPreviews
        }
    }

    public struct Attributes: Codable {
        public var previewType: PreviewType?

        public init(previewType: PreviewType? = nil) {
            self.previewType = previewType
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appPreviewSets
    }

    public init(id: String, relationships: Relationships? = nil, links: ResourceLinks, attributes: Attributes? = nil, type: `Type`) {
        self.id = id
        self.relationships = relationships
        self.links = links
        self.attributes = attributes
        self.type = type
    }
}

public struct BuildBundle: Codable {
    public var attributes: Attributes?
    public var id: String
    public var relationships: Relationships?
    public var type: `Type`
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var hasPrerenderedIcon: Bool?
        public var supportedArchitectures: [String]?
        public var bundleID: String?
        public var isIosBuildMacAppStoreCompatible: Bool?
        public var sdkBuild: String?
        public var entitlements: [String: [String: String]]?
        public var isIncludesSymbols: Bool?
        public var platformBuild: String?
        public var deviceProtocols: [String]?
        public var dSYMURL: URL?
        public var hasOnDemandResources: Bool?
        public var bundleType: BundleType?
        public var usesLocationServices: Bool?
        public var locales: [String]?
        public var hasSirikit: Bool?
        public var requiredCapabilities: [String]?
        public var fileName: String?

        public enum BundleType: String, Codable, CaseIterable {
            case app = "APP"
            case appClip = "APP_CLIP"
        }

        public init(hasPrerenderedIcon: Bool? = nil, supportedArchitectures: [String]? = nil, bundleID: String? = nil, isIosBuildMacAppStoreCompatible: Bool? = nil, sdkBuild: String? = nil, entitlements: [String: [String: String]]? = nil, isIncludesSymbols: Bool? = nil, platformBuild: String? = nil, deviceProtocols: [String]? = nil, dSYMURL: URL? = nil, hasOnDemandResources: Bool? = nil, bundleType: BundleType? = nil, usesLocationServices: Bool? = nil, locales: [String]? = nil, hasSirikit: Bool? = nil, requiredCapabilities: [String]? = nil, fileName: String? = nil) {
            self.hasPrerenderedIcon = hasPrerenderedIcon
            self.supportedArchitectures = supportedArchitectures
            self.bundleID = bundleID
            self.isIosBuildMacAppStoreCompatible = isIosBuildMacAppStoreCompatible
            self.sdkBuild = sdkBuild
            self.entitlements = entitlements
            self.isIncludesSymbols = isIncludesSymbols
            self.platformBuild = platformBuild
            self.deviceProtocols = deviceProtocols
            self.dSYMURL = dSYMURL
            self.hasOnDemandResources = hasOnDemandResources
            self.bundleType = bundleType
            self.usesLocationServices = usesLocationServices
            self.locales = locales
            self.hasSirikit = hasSirikit
            self.requiredCapabilities = requiredCapabilities
            self.fileName = fileName
        }

        private enum CodingKeys: String, CodingKey {
            case hasPrerenderedIcon
            case supportedArchitectures
            case bundleID = "bundleId"
            case isIosBuildMacAppStoreCompatible
            case sdkBuild
            case entitlements
            case isIncludesSymbols = "includesSymbols"
            case platformBuild
            case deviceProtocols
            case dSYMURL = "dSYMUrl"
            case hasOnDemandResources
            case bundleType
            case usesLocationServices
            case locales
            case hasSirikit
            case requiredCapabilities
            case fileName
        }
    }

    public struct Relationships: Codable {
        public var appClipDomainCacheStatus: AppClipDomainCacheStatus?
        public var appClipDomainDebugStatus: AppClipDomainDebugStatus?
        public var betaAppClipInvocations: BetaAppClipInvocations?
        public var buildBundleFileSizes: BuildBundleFileSizes?

        public struct AppClipDomainCacheStatus: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDomainStatuses
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppClipDomainDebugStatus: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDomainStatuses
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BetaAppClipInvocations: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppClipInvocations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public struct BuildBundleFileSizes: Codable {
            public var meta: PagingInformation?
            public var data: [Datum]?
            public var links: Links?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case buildBundleFileSizes
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil, links: Links? = nil) {
                self.meta = meta
                self.data = data
                self.links = links
            }
        }

        public init(appClipDomainCacheStatus: AppClipDomainCacheStatus? = nil, appClipDomainDebugStatus: AppClipDomainDebugStatus? = nil, betaAppClipInvocations: BetaAppClipInvocations? = nil, buildBundleFileSizes: BuildBundleFileSizes? = nil) {
            self.appClipDomainCacheStatus = appClipDomainCacheStatus
            self.appClipDomainDebugStatus = appClipDomainDebugStatus
            self.betaAppClipInvocations = betaAppClipInvocations
            self.buildBundleFileSizes = buildBundleFileSizes
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case buildBundles
    }

    public init(attributes: Attributes? = nil, id: String, relationships: Relationships? = nil, type: `Type`, links: ResourceLinks) {
        self.attributes = attributes
        self.id = id
        self.relationships = relationships
        self.type = type
        self.links = links
    }
}

public struct BetaAppClipInvocationLocalization: Codable {
    public var attributes: Attributes?
    public var type: `Type`
    public var links: ResourceLinks
    public var id: String

    public struct Attributes: Codable {
        public var locale: String?
        public var title: String?

        public init(locale: String? = nil, title: String? = nil) {
            self.locale = locale
            self.title = title
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppClipInvocationLocalizations
    }

    public init(attributes: Attributes? = nil, type: `Type`, links: ResourceLinks, id: String) {
        self.attributes = attributes
        self.type = type
        self.links = links
        self.id = id
    }
}

public struct BetaAppClipInvocationLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppClipInvocationLocalizations
        }

        public struct Attributes: Codable {
            public var title: String?

            public init(title: String? = nil) {
                self.title = title
            }
        }

        public init(id: String, type: `Type`, attributes: Attributes? = nil) {
            self.id = id
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppScreenshotResponse: Codable {
    public var included: [AppScreenshotSet]?
    /// AppScreenshot
    public var data: AppScreenshot
    public var links: DocumentLinks

    public init(included: [AppScreenshotSet]? = nil, data: AppScreenshot, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct ReviewSubmissionItem: Codable {
    public var relationships: Relationships?
    public var id: String
    public var attributes: Attributes?
    public var type: `Type`
    public var links: ResourceLinks

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?
        public var appCustomProductPageVersion: AppCustomProductPageVersion?
        public var appEvent: AppEvent?
        public var appStoreVersionExperiment: AppStoreVersionExperiment?

        public struct AppStoreVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppCustomProductPageVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppEvent: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appEvents
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersionExperiment: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperiments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil, appCustomProductPageVersion: AppCustomProductPageVersion? = nil, appEvent: AppEvent? = nil, appStoreVersionExperiment: AppStoreVersionExperiment? = nil) {
            self.appStoreVersion = appStoreVersion
            self.appCustomProductPageVersion = appCustomProductPageVersion
            self.appEvent = appEvent
            self.appStoreVersionExperiment = appStoreVersionExperiment
        }
    }

    public struct Attributes: Codable {
        public var state: State?

        public enum State: String, Codable, CaseIterable {
            case readyForReview = "READY_FOR_REVIEW"
            case accepted = "ACCEPTED"
            case approved = "APPROVED"
            case rejected = "REJECTED"
            case removed = "REMOVED"
        }

        public init(state: State? = nil) {
            self.state = state
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case reviewSubmissionItems
    }

    public init(relationships: Relationships? = nil, id: String, attributes: Attributes? = nil, type: `Type`, links: ResourceLinks) {
        self.relationships = relationships
        self.id = id
        self.attributes = attributes
        self.type = type
        self.links = links
    }
}

public struct AppCustomProductPageLocalizationsResponse: Codable {
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?
    public var data: [AppCustomProductPageLocalization]

    public enum IncludedItem: Codable {
        case appCustomProductPageVersion(AppCustomProductPageVersion)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCustomProductPageVersion(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil, data: [AppCustomProductPageLocalization]) {
        self.included = included
        self.links = links
        self.meta = meta
        self.data = data
    }
}

public struct UserInvitationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`
        public var relationships: Relationships?

        public struct Attributes: Codable {
            public var firstName: String
            public var email: String
            public var roles: [UserRole]
            public var isAllAppsVisible: Bool?
            public var isProvisioningAllowed: Bool?
            public var lastName: String

            public init(firstName: String, email: String, roles: [UserRole], isAllAppsVisible: Bool? = nil, isProvisioningAllowed: Bool? = nil, lastName: String) {
                self.firstName = firstName
                self.email = email
                self.roles = roles
                self.isAllAppsVisible = isAllAppsVisible
                self.isProvisioningAllowed = isProvisioningAllowed
                self.lastName = lastName
            }

            private enum CodingKeys: String, CodingKey {
                case firstName
                case email
                case roles
                case isAllAppsVisible = "allAppsVisible"
                case isProvisioningAllowed = "provisioningAllowed"
                case lastName
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case userInvitations
        }

        public struct Relationships: Codable {
            public var visibleApps: VisibleApps?

            public struct VisibleApps: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(visibleApps: VisibleApps? = nil) {
                self.visibleApps = visibleApps
            }
        }

        public init(attributes: Attributes, type: `Type`, relationships: Relationships? = nil) {
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildBetaNotificationResponse: Codable {
    public var links: DocumentLinks
    /// BuildBetaNotification
    public var data: BuildBetaNotification

    public init(links: DocumentLinks, data: BuildBetaNotification) {
        self.links = links
        self.data = data
    }
}

public struct BuildBetaNotification: Codable {
    public var links: ResourceLinks
    public var id: String
    public var type: `Type`

    public enum `Type`: String, Codable, CaseIterable {
        case buildBetaNotifications
    }

    public init(links: ResourceLinks, id: String, type: `Type`) {
        self.links = links
        self.id = id
        self.type = type
    }
}

public struct CiMacOsVersion: Codable {
    public var links: ResourceLinks
    public var type: `Type`
    public var relationships: Relationships?
    public var attributes: Attributes?
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case ciMacOsVersions
    }

    public struct Relationships: Codable {
        public var xcodeVersions: XcodeVersions?

        public struct XcodeVersions: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case ciXcodeVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public init(xcodeVersions: XcodeVersions? = nil) {
            self.xcodeVersions = xcodeVersions
        }
    }

    public struct Attributes: Codable {
        public var name: String?
        public var version: String?

        public init(name: String? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }
    }

    public init(links: ResourceLinks, type: `Type`, relationships: Relationships? = nil, attributes: Attributes? = nil, id: String) {
        self.links = links
        self.type = type
        self.relationships = relationships
        self.attributes = attributes
        self.id = id
    }
}

public struct BetaLicenseAgreementUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaLicenseAgreements
        }

        public struct Attributes: Codable {
            public var agreementText: String?

            public init(agreementText: String? = nil) {
                self.agreementText = agreementText
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, id: String) {
            self.type = type
            self.attributes = attributes
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiPullRequestStartCondition: Codable {
    public var isAutoCancel: Bool?
    public var filesAndFoldersRule: CiFilesAndFoldersRule?
    public var source: CiBranchPatterns?
    public var destination: CiBranchPatterns?

    public init(isAutoCancel: Bool? = nil, filesAndFoldersRule: CiFilesAndFoldersRule? = nil, source: CiBranchPatterns? = nil, destination: CiBranchPatterns? = nil) {
        self.isAutoCancel = isAutoCancel
        self.filesAndFoldersRule = filesAndFoldersRule
        self.source = source
        self.destination = destination
    }

    private enum CodingKeys: String, CodingKey {
        case isAutoCancel = "autoCancel"
        case filesAndFoldersRule
        case source
        case destination
    }
}

public struct AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersions
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaTesterResponse: Codable {
    public var links: DocumentLinks
    public var included: [IncludedItem]?
    /// BetaTester
    public var data: BetaTester

    public enum IncludedItem: Codable {
        case app(App)
        case betaGroup(BetaGroup)
        case build(Build)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, included: [IncludedItem]? = nil, data: BetaTester) {
        self.links = links
        self.included = included
        self.data = data
    }
}

public struct AppClipAdvancedExperienceImageCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String

            public init(fileSize: Int, fileName: String) {
                self.fileSize = fileSize
                self.fileName = fileName
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAdvancedExperienceImages
        }

        public init(attributes: Attributes, type: `Type`) {
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public enum AppStoreAgeRating: String, Codable, CaseIterable {
    case fourPlus = "FOUR_PLUS"
    case ninePlus = "NINE_PLUS"
    case twelvePlus = "TWELVE_PLUS"
    case seventeenPlus = "SEVENTEEN_PLUS"
}

public struct AppEventScreenshotsResponse: Codable {
    public var links: PagedDocumentLinks
    public var included: [AppEventLocalization]?
    public var meta: PagingInformation?
    public var data: [AppEventScreenshot]

    public init(links: PagedDocumentLinks, included: [AppEventLocalization]? = nil, meta: PagingInformation? = nil, data: [AppEventScreenshot]) {
        self.links = links
        self.included = included
        self.meta = meta
        self.data = data
    }
}

public struct AppEventLocalizationsResponse: Codable {
    public var included: [IncludedItem]?
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [AppEventLocalization]

    public enum IncludedItem: Codable {
        case appEvent(AppEvent)
        case appEventScreenshot(AppEventScreenshot)
        case appEventVideoClip(AppEventVideoClip)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else if let value = try? container.decode(AppEventScreenshot.self) {
                self = .appEventScreenshot(value)
            } else if let value = try? container.decode(AppEventVideoClip.self) {
                self = .appEventVideoClip(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appEvent(let value): try container.encode(value)
            case .appEventScreenshot(let value): try container.encode(value)
            case .appEventVideoClip(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [AppEventLocalization]) {
        self.included = included
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct AppClipAdvancedExperienceImage: Codable {
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var imageAsset: ImageAsset?
        public var fileName: String?
        public var assetDeliveryState: AppMediaAssetState?
        public var uploadOperations: [UploadOperation]?
        public var sourceFileChecksum: String?
        public var fileSize: Int?

        public init(imageAsset: ImageAsset? = nil, fileName: String? = nil, assetDeliveryState: AppMediaAssetState? = nil, uploadOperations: [UploadOperation]? = nil, sourceFileChecksum: String? = nil, fileSize: Int? = nil) {
            self.imageAsset = imageAsset
            self.fileName = fileName
            self.assetDeliveryState = assetDeliveryState
            self.uploadOperations = uploadOperations
            self.sourceFileChecksum = sourceFileChecksum
            self.fileSize = fileSize
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appClipAdvancedExperienceImages
    }

    public init(attributes: Attributes? = nil, id: String, type: `Type`, links: ResourceLinks) {
        self.attributes = attributes
        self.id = id
        self.type = type
        self.links = links
    }
}

public struct BetaAppReviewDetailsResponse: Codable {
    public var included: [App]?
    public var data: [BetaAppReviewDetail]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(included: [App]? = nil, data: [BetaAppReviewDetail], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.included = included
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct CiStartConditionFileMatcher: Codable {
    public var directory: String?
    public var fileName: String?
    public var fileExtension: String?

    public init(directory: String? = nil, fileName: String? = nil, fileExtension: String? = nil) {
        self.directory = directory
        self.fileName = fileName
        self.fileExtension = fileExtension
    }
}

public struct CiWorkflowUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var type: `Type`
        public var relationships: Relationships?
        public var id: String

        public struct Attributes: Codable {
            public var tagStartCondition: CiTagStartCondition?
            public var pullRequestStartCondition: CiPullRequestStartCondition?
            public var branchStartCondition: CiBranchStartCondition?
            public var name: String?
            public var scheduledStartCondition: CiScheduledStartCondition?
            public var isClean: Bool?
            public var description: String?
            public var isLockedForEditing: Bool?
            public var actions: [CiAction]?
            public var containerFilePath: String?
            public var isEnabled: Bool?

            public init(tagStartCondition: CiTagStartCondition? = nil, pullRequestStartCondition: CiPullRequestStartCondition? = nil, branchStartCondition: CiBranchStartCondition? = nil, name: String? = nil, scheduledStartCondition: CiScheduledStartCondition? = nil, isClean: Bool? = nil, description: String? = nil, isLockedForEditing: Bool? = nil, actions: [CiAction]? = nil, containerFilePath: String? = nil, isEnabled: Bool? = nil) {
                self.tagStartCondition = tagStartCondition
                self.pullRequestStartCondition = pullRequestStartCondition
                self.branchStartCondition = branchStartCondition
                self.name = name
                self.scheduledStartCondition = scheduledStartCondition
                self.isClean = isClean
                self.description = description
                self.isLockedForEditing = isLockedForEditing
                self.actions = actions
                self.containerFilePath = containerFilePath
                self.isEnabled = isEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case tagStartCondition
                case pullRequestStartCondition
                case branchStartCondition
                case name
                case scheduledStartCondition
                case isClean = "clean"
                case description
                case isLockedForEditing
                case actions
                case containerFilePath
                case isEnabled
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case ciWorkflows
        }

        public struct Relationships: Codable {
            public var xcodeVersion: XcodeVersion?
            public var macOsVersion: MacOsVersion?

            public struct XcodeVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciXcodeVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct MacOsVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciMacOsVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(xcodeVersion: XcodeVersion? = nil, macOsVersion: MacOsVersion? = nil) {
                self.xcodeVersion = xcodeVersion
                self.macOsVersion = macOsVersion
            }
        }

        public init(attributes: Attributes? = nil, type: `Type`, relationships: Relationships? = nil, id: String) {
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPricePoint: Codable {
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`
    public var relationships: Relationships?
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var proceeds: String?
        public var customerPrice: String?

        public init(proceeds: String? = nil, customerPrice: String? = nil) {
            self.proceeds = proceeds
            self.customerPrice = customerPrice
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appPricePoints
    }

    public struct Relationships: Codable {
        public var priceTier: PriceTier?
        public var territory: Territory?

        public struct PriceTier: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPriceTiers
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Territory: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case territories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(priceTier: PriceTier? = nil, territory: Territory? = nil) {
            self.priceTier = priceTier
            self.territory = territory
        }
    }

    public init(attributes: Attributes? = nil, id: String, type: `Type`, relationships: Relationships? = nil, links: ResourceLinks) {
        self.attributes = attributes
        self.id = id
        self.type = type
        self.relationships = relationships
        self.links = links
    }
}

public struct ScmProvidersResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [ScmProvider]
    public var meta: PagingInformation?

    public init(links: PagedDocumentLinks, data: [ScmProvider], meta: PagingInformation? = nil) {
        self.links = links
        self.data = data
        self.meta = meta
    }
}

public struct AgeRatingDeclarationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case ageRatingDeclarations
        }

        public struct Attributes: Codable {
            public var sexualContentGraphicAndNudity: SexualContentGraphicAndNudity?
            public var sexualContentOrNudity: SexualContentOrNudity?
            public var medicalOrTreatmentInformation: MedicalOrTreatmentInformation?
            public var matureOrSuggestiveThemes: MatureOrSuggestiveThemes?
            public var kidsAgeBand: KidsAgeBand?
            public var violenceRealistic: ViolenceRealistic?
            public var gamblingSimulated: GamblingSimulated?
            public var violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic?
            public var violenceCartoonOrFantasy: ViolenceCartoonOrFantasy?
            public var contests: Contests?
            public var isGambling: Bool?
            /// - warning: Deprecated.
            public var isGamblingAndContests: Bool?
            public var isSeventeenPlus: Bool?
            public var horrorOrFearThemes: HorrorOrFearThemes?
            public var isUnrestrictedWebAccess: Bool?
            public var profanityOrCrudeHumor: ProfanityOrCrudeHumor?
            public var alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences?

            public enum SexualContentGraphicAndNudity: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum SexualContentOrNudity: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum MedicalOrTreatmentInformation: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum MatureOrSuggestiveThemes: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ViolenceRealistic: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum GamblingSimulated: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ViolenceRealisticProlongedGraphicOrSadistic: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ViolenceCartoonOrFantasy: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum Contests: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum HorrorOrFearThemes: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ProfanityOrCrudeHumor: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum AlcoholTobaccoOrDrugUseOrReferences: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public init(sexualContentGraphicAndNudity: SexualContentGraphicAndNudity? = nil, sexualContentOrNudity: SexualContentOrNudity? = nil, medicalOrTreatmentInformation: MedicalOrTreatmentInformation? = nil, matureOrSuggestiveThemes: MatureOrSuggestiveThemes? = nil, kidsAgeBand: KidsAgeBand? = nil, violenceRealistic: ViolenceRealistic? = nil, gamblingSimulated: GamblingSimulated? = nil, violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic? = nil, violenceCartoonOrFantasy: ViolenceCartoonOrFantasy? = nil, contests: Contests? = nil, isGambling: Bool? = nil, isGamblingAndContests: Bool? = nil, isSeventeenPlus: Bool? = nil, horrorOrFearThemes: HorrorOrFearThemes? = nil, isUnrestrictedWebAccess: Bool? = nil, profanityOrCrudeHumor: ProfanityOrCrudeHumor? = nil, alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences? = nil) {
                self.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity
                self.sexualContentOrNudity = sexualContentOrNudity
                self.medicalOrTreatmentInformation = medicalOrTreatmentInformation
                self.matureOrSuggestiveThemes = matureOrSuggestiveThemes
                self.kidsAgeBand = kidsAgeBand
                self.violenceRealistic = violenceRealistic
                self.gamblingSimulated = gamblingSimulated
                self.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic
                self.violenceCartoonOrFantasy = violenceCartoonOrFantasy
                self.contests = contests
                self.isGambling = isGambling
                self.isGamblingAndContests = isGamblingAndContests
                self.isSeventeenPlus = isSeventeenPlus
                self.horrorOrFearThemes = horrorOrFearThemes
                self.isUnrestrictedWebAccess = isUnrestrictedWebAccess
                self.profanityOrCrudeHumor = profanityOrCrudeHumor
                self.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences
            }

            private enum CodingKeys: String, CodingKey {
                case sexualContentGraphicAndNudity
                case sexualContentOrNudity
                case medicalOrTreatmentInformation
                case matureOrSuggestiveThemes
                case kidsAgeBand
                case violenceRealistic
                case gamblingSimulated
                case violenceRealisticProlongedGraphicOrSadistic
                case violenceCartoonOrFantasy
                case contests
                case isGambling = "gambling"
                case isGamblingAndContests = "gamblingAndContests"
                case isSeventeenPlus = "seventeenPlus"
                case horrorOrFearThemes
                case isUnrestrictedWebAccess = "unrestrictedWebAccess"
                case profanityOrCrudeHumor
                case alcoholTobaccoOrDrugUseOrReferences
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, id: String) {
            self.type = type
            self.attributes = attributes
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaTesterInvitation: Codable {
    public var links: ResourceLinks
    public var id: String
    public var type: `Type`

    public enum `Type`: String, Codable, CaseIterable {
        case betaTesterInvitations
    }

    public init(links: ResourceLinks, id: String, type: `Type`) {
        self.links = links
        self.id = id
        self.type = type
    }
}

public struct BetaTesterBuildsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppCustomProductPageVersionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var appCustomProductPage: AppCustomProductPage
            public var appCustomProductPageLocalizations: AppCustomProductPageLocalizations?

            public struct AppCustomProductPage: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPages
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct AppCustomProductPageLocalizations: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(appCustomProductPage: AppCustomProductPage, appCustomProductPageLocalizations: AppCustomProductPageLocalizations? = nil) {
                self.appCustomProductPage = appCustomProductPage
                self.appCustomProductPageLocalizations = appCustomProductPageLocalizations
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appCustomProductPageVersions
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiBuildRun: Codable {
    public var type: `Type`
    public var links: ResourceLinks
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case ciBuildRuns
    }

    public struct Attributes: Codable {
        public var cancelReason: CancelReason?
        public var executionProgress: CiExecutionProgress?
        public var destinationCommit: DestinationCommit?
        public var finishedDate: Date?
        public var issueCounts: CiIssueCounts?
        public var createdDate: Date?
        public var isPullRequestBuild: Bool?
        public var number: Int?
        public var startedDate: Date?
        public var completionStatus: CiCompletionStatus?
        public var sourceCommit: SourceCommit?
        public var startReason: StartReason?

        public enum CancelReason: String, Codable, CaseIterable {
            case automaticallyByNewerBuild = "AUTOMATICALLY_BY_NEWER_BUILD"
            case manuallyByUser = "MANUALLY_BY_USER"
        }

        public struct DestinationCommit: Codable {
            public var author: CiGitUser?
            public var committer: CiGitUser?
            public var message: String?
            public var webURL: URL?
            public var commitSha: String?

            public init(author: CiGitUser? = nil, committer: CiGitUser? = nil, message: String? = nil, webURL: URL? = nil, commitSha: String? = nil) {
                self.author = author
                self.committer = committer
                self.message = message
                self.webURL = webURL
                self.commitSha = commitSha
            }

            private enum CodingKeys: String, CodingKey {
                case author
                case committer
                case message
                case webURL = "webUrl"
                case commitSha
            }
        }

        public struct SourceCommit: Codable {
            public var message: String?
            public var commitSha: String?
            public var author: CiGitUser?
            public var webURL: URL?
            public var committer: CiGitUser?

            public init(message: String? = nil, commitSha: String? = nil, author: CiGitUser? = nil, webURL: URL? = nil, committer: CiGitUser? = nil) {
                self.message = message
                self.commitSha = commitSha
                self.author = author
                self.webURL = webURL
                self.committer = committer
            }

            private enum CodingKeys: String, CodingKey {
                case message
                case commitSha
                case author
                case webURL = "webUrl"
                case committer
            }
        }

        public enum StartReason: String, Codable, CaseIterable {
            case gitRefChange = "GIT_REF_CHANGE"
            case manual = "MANUAL"
            case manualRebuild = "MANUAL_REBUILD"
            case pullRequestOpen = "PULL_REQUEST_OPEN"
            case pullRequestUpdate = "PULL_REQUEST_UPDATE"
            case schedule = "SCHEDULE"
        }

        public init(cancelReason: CancelReason? = nil, executionProgress: CiExecutionProgress? = nil, destinationCommit: DestinationCommit? = nil, finishedDate: Date? = nil, issueCounts: CiIssueCounts? = nil, createdDate: Date? = nil, isPullRequestBuild: Bool? = nil, number: Int? = nil, startedDate: Date? = nil, completionStatus: CiCompletionStatus? = nil, sourceCommit: SourceCommit? = nil, startReason: StartReason? = nil) {
            self.cancelReason = cancelReason
            self.executionProgress = executionProgress
            self.destinationCommit = destinationCommit
            self.finishedDate = finishedDate
            self.issueCounts = issueCounts
            self.createdDate = createdDate
            self.isPullRequestBuild = isPullRequestBuild
            self.number = number
            self.startedDate = startedDate
            self.completionStatus = completionStatus
            self.sourceCommit = sourceCommit
            self.startReason = startReason
        }
    }

    public struct Relationships: Codable {
        public var sourceBranchOrTag: SourceBranchOrTag?
        public var workflow: Workflow?
        public var builds: Builds?
        public var destinationBranch: DestinationBranch?
        public var product: Product?
        public var pullRequest: PullRequest?

        public struct SourceBranchOrTag: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmGitReferences
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Workflow: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case ciWorkflows
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Builds: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public struct DestinationBranch: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case scmGitReferences
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Product: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciProducts
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct PullRequest: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmPullRequests
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(sourceBranchOrTag: SourceBranchOrTag? = nil, workflow: Workflow? = nil, builds: Builds? = nil, destinationBranch: DestinationBranch? = nil, product: Product? = nil, pullRequest: PullRequest? = nil) {
            self.sourceBranchOrTag = sourceBranchOrTag
            self.workflow = workflow
            self.builds = builds
            self.destinationBranch = destinationBranch
            self.product = product
            self.pullRequest = pullRequest
        }
    }

    public init(type: `Type`, links: ResourceLinks, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
        self.type = type
        self.links = links
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
    }
}

public struct AppStoreVersionLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`
        public var relationships: Relationships

        public struct Attributes: Codable {
            public var locale: String
            public var marketingURL: URL?
            public var keywords: String?
            public var supportURL: URL?
            public var promotionalText: String?
            public var whatsNew: String?
            public var description: String?

            public init(locale: String, marketingURL: URL? = nil, keywords: String? = nil, supportURL: URL? = nil, promotionalText: String? = nil, whatsNew: String? = nil, description: String? = nil) {
                self.locale = locale
                self.marketingURL = marketingURL
                self.keywords = keywords
                self.supportURL = supportURL
                self.promotionalText = promotionalText
                self.whatsNew = whatsNew
                self.description = description
            }

            private enum CodingKeys: String, CodingKey {
                case locale
                case marketingURL = "marketingUrl"
                case keywords
                case supportURL = "supportUrl"
                case promotionalText
                case whatsNew
                case description
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionLocalizations
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public init(attributes: Attributes, type: `Type`, relationships: Relationships) {
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEventLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appEventLocalizations
        }

        public struct Attributes: Codable {
            public var name: String?
            public var longDescription: String?
            public var shortDescription: String?

            public init(name: String? = nil, longDescription: String? = nil, shortDescription: String? = nil) {
                self.name = name
                self.longDescription = longDescription
                self.shortDescription = shortDescription
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreviewCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public struct Attributes: Codable {
            public var mimeType: String?
            public var previewFrameTimeCode: String?
            public var fileName: String
            public var fileSize: Int

            public init(mimeType: String? = nil, previewFrameTimeCode: String? = nil, fileName: String, fileSize: Int) {
                self.mimeType = mimeType
                self.previewFrameTimeCode = previewFrameTimeCode
                self.fileName = fileName
                self.fileSize = fileSize
            }
        }

        public struct Relationships: Codable {
            public var appPreviewSet: AppPreviewSet

            public struct AppPreviewSet: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appPreviewSets
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appPreviewSet: AppPreviewSet) {
                self.appPreviewSet = appPreviewSet
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppClipInvocationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppClipInvocations
        }

        public struct Attributes: Codable {
            public var url: URL?

            public init(url: URL? = nil) {
                self.url = url
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, id: String) {
            self.type = type
            self.attributes = attributes
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppCustomProductPagesResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [AppCustomProductPage]
    public var included: [IncludedItem]?
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case appCustomProductPageVersion(AppCustomProductPageVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appCustomProductPageVersion(let value): try container.encode(value)
            }
        }
    }

    public init(links: PagedDocumentLinks, data: [AppCustomProductPage], included: [IncludedItem]? = nil, meta: PagingInformation? = nil) {
        self.links = links
        self.data = data
        self.included = included
        self.meta = meta
    }
}

public struct AppEventLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`
        public var attributes: Attributes

        public struct Relationships: Codable {
            public var appEvent: AppEvent

            public struct AppEvent: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEvents
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appEvent: AppEvent) {
                self.appEvent = appEvent
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appEventLocalizations
        }

        public struct Attributes: Codable {
            public var name: String?
            public var shortDescription: String?
            public var longDescription: String?
            public var locale: String

            public init(name: String? = nil, shortDescription: String? = nil, longDescription: String? = nil, locale: String) {
                self.name = name
                self.shortDescription = shortDescription
                self.longDescription = longDescription
                self.locale = locale
            }
        }

        public init(relationships: Relationships, type: `Type`, attributes: Attributes) {
            self.relationships = relationships
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiXcodeVersionsResponse: Codable {
    public var included: [CiMacOsVersion]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?
    public var data: [CiXcodeVersion]

    public init(included: [CiMacOsVersion]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil, data: [CiXcodeVersion]) {
        self.included = included
        self.links = links
        self.meta = meta
        self.data = data
    }
}

public enum CiExecutionProgress: String, Codable, CaseIterable {
    case pending = "PENDING"
    case running = "RUNNING"
    case complete = "COMPLETE"
}

public struct AppScreenshotCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`
        public var attributes: Attributes

        public struct Relationships: Codable {
            public var appScreenshotSet: AppScreenshotSet

            public struct AppScreenshotSet: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appScreenshotSets
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appScreenshotSet: AppScreenshotSet) {
                self.appScreenshotSet = appScreenshotSet
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public struct Attributes: Codable {
            public var fileName: String
            public var fileSize: Int

            public init(fileName: String, fileSize: Int) {
                self.fileName = fileName
                self.fileSize = fileSize
            }
        }

        public init(relationships: Relationships, type: `Type`, attributes: Attributes) {
            self.relationships = relationships
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreReviewAttachmentCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewAttachments
        }

        public struct Attributes: Codable {
            public var fileName: String
            public var fileSize: Int

            public init(fileName: String, fileSize: Int) {
                self.fileName = fileName
                self.fileSize = fileSize
            }
        }

        public struct Relationships: Codable {
            public var appStoreReviewDetail: AppStoreReviewDetail

            public struct AppStoreReviewDetail: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreReviewDetails
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreReviewDetail: AppStoreReviewDetail) {
                self.appStoreReviewDetail = appStoreReviewDetail
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEncryptionDeclaration: Codable {
    public var relationships: Relationships?
    public var attributes: Attributes?
    public var links: ResourceLinks
    public var type: `Type`
    public var id: String

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public struct Attributes: Codable {
        public var documentURL: String?
        public var usesEncryption: Bool?
        public var containsThirdPartyCryptography: Bool?
        public var containsProprietaryCryptography: Bool?
        public var isExempt: Bool?
        public var codeValue: String?
        public var appEncryptionDeclarationState: AppEncryptionDeclarationState?
        public var uploadedDate: Date?
        public var isAvailableOnFrenchStore: Bool?
        public var platform: Platform?
        public var documentName: String?
        public var documentType: String?

        public init(documentURL: String? = nil, usesEncryption: Bool? = nil, containsThirdPartyCryptography: Bool? = nil, containsProprietaryCryptography: Bool? = nil, isExempt: Bool? = nil, codeValue: String? = nil, appEncryptionDeclarationState: AppEncryptionDeclarationState? = nil, uploadedDate: Date? = nil, isAvailableOnFrenchStore: Bool? = nil, platform: Platform? = nil, documentName: String? = nil, documentType: String? = nil) {
            self.documentURL = documentURL
            self.usesEncryption = usesEncryption
            self.containsThirdPartyCryptography = containsThirdPartyCryptography
            self.containsProprietaryCryptography = containsProprietaryCryptography
            self.isExempt = isExempt
            self.codeValue = codeValue
            self.appEncryptionDeclarationState = appEncryptionDeclarationState
            self.uploadedDate = uploadedDate
            self.isAvailableOnFrenchStore = isAvailableOnFrenchStore
            self.platform = platform
            self.documentName = documentName
            self.documentType = documentType
        }

        private enum CodingKeys: String, CodingKey {
            case documentURL = "documentUrl"
            case usesEncryption
            case containsThirdPartyCryptography
            case containsProprietaryCryptography
            case isExempt = "exempt"
            case codeValue
            case appEncryptionDeclarationState
            case uploadedDate
            case isAvailableOnFrenchStore = "availableOnFrenchStore"
            case platform
            case documentName
            case documentType
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appEncryptionDeclarations
    }

    public init(relationships: Relationships? = nil, attributes: Attributes? = nil, links: ResourceLinks, type: `Type`, id: String) {
        self.relationships = relationships
        self.attributes = attributes
        self.links = links
        self.type = type
        self.id = id
    }
}

public struct BetaAppClipInvocation: Codable {
    public var type: `Type`
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppClipInvocations
    }

    public struct Attributes: Codable {
        public var url: URL?

        public init(url: URL? = nil) {
            self.url = url
        }
    }

    public struct Relationships: Codable {
        public var betaAppClipInvocationLocalizations: BetaAppClipInvocationLocalizations?

        public struct BetaAppClipInvocationLocalizations: Codable {
            public var data: [Datum]?
            public var meta: PagingInformation?
            public var links: Links?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppClipInvocationLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, meta: PagingInformation? = nil, links: Links? = nil) {
                self.data = data
                self.meta = meta
                self.links = links
            }
        }

        public init(betaAppClipInvocationLocalizations: BetaAppClipInvocationLocalizations? = nil) {
            self.betaAppClipInvocationLocalizations = betaAppClipInvocationLocalizations
        }
    }

    public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks, id: String) {
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
        self.id = id
    }
}

public struct CiTestResultsResponse: Codable {
    public var meta: PagingInformation?
    public var data: [CiTestResult]
    public var links: PagedDocumentLinks

    public init(meta: PagingInformation? = nil, data: [CiTestResult], links: PagedDocumentLinks) {
        self.meta = meta
        self.data = data
        self.links = links
    }
}

public struct AppEventResponse: Codable {
    public var included: [AppEventLocalization]?
    public var links: DocumentLinks
    /// AppEvent
    public var data: AppEvent

    public init(included: [AppEventLocalization]? = nil, links: DocumentLinks, data: AppEvent) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct ScmRepositoriesResponse: Codable {
    public var included: [IncludedItem]?
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [ScmRepository]

    public enum IncludedItem: Codable {
        case scmProvider(ScmProvider)
        case scmGitReference(ScmGitReference)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(ScmProvider.self) {
                self = .scmProvider(value)
            } else if let value = try? container.decode(ScmGitReference.self) {
                self = .scmGitReference(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .scmProvider(let value): try container.encode(value)
            case .scmGitReference(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [ScmRepository]) {
        self.included = included
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct AppCustomProductPageVersionInlineCreate: Codable {
    public var id: String?
    public var type: `Type`
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case appCustomProductPageVersions
    }

    public struct Relationships: Codable {
        public var appCustomProductPage: AppCustomProductPage?
        public var appCustomProductPageLocalizations: AppCustomProductPageLocalizations?

        public struct AppCustomProductPage: Codable {
            public var data: Data?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPages
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public struct AppCustomProductPageLocalizations: Codable {
            public var data: [Datum]?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: [Datum]? = nil) {
                self.data = data
            }
        }

        public init(appCustomProductPage: AppCustomProductPage? = nil, appCustomProductPageLocalizations: AppCustomProductPageLocalizations? = nil) {
            self.appCustomProductPage = appCustomProductPage
            self.appCustomProductPageLocalizations = appCustomProductPageLocalizations
        }
    }

    public init(id: String? = nil, type: `Type`, relationships: Relationships? = nil) {
        self.id = id
        self.type = type
        self.relationships = relationships
    }
}

public struct BetaTesterCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public struct Attributes: Codable {
            public var email: String
            public var firstName: String?
            public var lastName: String?

            public init(email: String, firstName: String? = nil, lastName: String? = nil) {
                self.email = email
                self.firstName = firstName
                self.lastName = lastName
            }
        }

        public struct Relationships: Codable {
            public var builds: Builds?
            public var betaGroups: BetaGroups?

            public struct Builds: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct BetaGroups: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaGroups
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(builds: Builds? = nil, betaGroups: BetaGroups? = nil) {
                self.builds = builds
                self.betaGroups = betaGroups
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships? = nil) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDomainStatusResponse: Codable {
    /// AppClipDomainStatus
    public var data: AppClipDomainStatus
    public var links: DocumentLinks

    public init(data: AppClipDomainStatus, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BetaAppClipInvocationLocalizationResponse: Codable {
    public var links: DocumentLinks
    /// BetaAppClipInvocationLocalization
    public var data: BetaAppClipInvocationLocalization

    public init(links: DocumentLinks, data: BetaAppClipInvocationLocalization) {
        self.links = links
        self.data = data
    }
}

public struct BundleIDCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDs = "bundleIds"
        }

        public struct Attributes: Codable {
            public var name: String
            public var seedID: String?
            public var platform: BundleIDPlatform
            public var identifier: String

            public init(name: String, seedID: String? = nil, platform: BundleIDPlatform, identifier: String) {
                self.name = name
                self.seedID = seedID
                self.platform = platform
                self.identifier = identifier
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case seedID = "seedId"
                case platform
                case identifier
            }
        }

        public init(type: `Type`, attributes: Attributes) {
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEvent: Codable {
    public var links: ResourceLinks
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case appEvents
    }

    public struct Attributes: Codable {
        public var primaryLocale: String?
        public var purpose: Purpose?
        public var referenceName: String?
        public var archivedTerritorySchedules: [ArchivedTerritorySchedule]?
        public var purchaseRequirement: PurchaseRequirement?
        public var deepLink: URL?
        public var territorySchedules: [TerritorySchedule]?
        public var priority: Priority?
        public var badge: Badge?
        public var eventState: EventState?

        public enum Purpose: String, Codable, CaseIterable {
            case appropriateForAllUsers = "APPROPRIATE_FOR_ALL_USERS"
            case attractNewUsers = "ATTRACT_NEW_USERS"
            case keepActiveUsersInformed = "KEEP_ACTIVE_USERS_INFORMED"
            case bringBackLapsedUsers = "BRING_BACK_LAPSED_USERS"
        }

        public struct ArchivedTerritorySchedule: Codable {
            public var publishStart: Date?
            public var territories: [String]?
            public var eventEnd: Date?
            public var eventStart: Date?

            public init(publishStart: Date? = nil, territories: [String]? = nil, eventEnd: Date? = nil, eventStart: Date? = nil) {
                self.publishStart = publishStart
                self.territories = territories
                self.eventEnd = eventEnd
                self.eventStart = eventStart
            }
        }

        public enum PurchaseRequirement: String, Codable, CaseIterable {
            case noCostAssociated = "NO_COST_ASSOCIATED"
            case inAppPurchase = "IN_APP_PURCHASE"
            case subscription = "SUBSCRIPTION"
            case inAppPurchaseAndSubscription = "IN_APP_PURCHASE_AND_SUBSCRIPTION"
            case inAppPurchaseOrSubscription = "IN_APP_PURCHASE_OR_SUBSCRIPTION"
        }

        public struct TerritorySchedule: Codable {
            public var publishStart: Date?
            public var territories: [String]?
            public var eventEnd: Date?
            public var eventStart: Date?

            public init(publishStart: Date? = nil, territories: [String]? = nil, eventEnd: Date? = nil, eventStart: Date? = nil) {
                self.publishStart = publishStart
                self.territories = territories
                self.eventEnd = eventEnd
                self.eventStart = eventStart
            }
        }

        public enum Priority: String, Codable, CaseIterable {
            case high = "HIGH"
            case normal = "NORMAL"
        }

        public enum Badge: String, Codable, CaseIterable {
            case liveEvent = "LIVE_EVENT"
            case premiere = "PREMIERE"
            case challenge = "CHALLENGE"
            case competition = "COMPETITION"
            case newSeason = "NEW_SEASON"
            case majorUpdate = "MAJOR_UPDATE"
            case specialEvent = "SPECIAL_EVENT"
        }

        public enum EventState: String, Codable, CaseIterable {
            case draft = "DRAFT"
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case rejected = "REJECTED"
            case accepted = "ACCEPTED"
            case approved = "APPROVED"
            case published = "PUBLISHED"
            case past = "PAST"
            case archived = "ARCHIVED"
        }

        public init(primaryLocale: String? = nil, purpose: Purpose? = nil, referenceName: String? = nil, archivedTerritorySchedules: [ArchivedTerritorySchedule]? = nil, purchaseRequirement: PurchaseRequirement? = nil, deepLink: URL? = nil, territorySchedules: [TerritorySchedule]? = nil, priority: Priority? = nil, badge: Badge? = nil, eventState: EventState? = nil) {
            self.primaryLocale = primaryLocale
            self.purpose = purpose
            self.referenceName = referenceName
            self.archivedTerritorySchedules = archivedTerritorySchedules
            self.purchaseRequirement = purchaseRequirement
            self.deepLink = deepLink
            self.territorySchedules = territorySchedules
            self.priority = priority
            self.badge = badge
            self.eventState = eventState
        }
    }

    public struct Relationships: Codable {
        public var localizations: Localizations?

        public struct Localizations: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appEventLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(localizations: Localizations? = nil) {
            self.localizations = localizations
        }
    }

    public init(links: ResourceLinks, type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
        self.links = links
        self.type = type
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
    }
}

public struct ScmGitReferencesResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [ScmGitReference]
    public var included: [ScmRepository]?
    public var meta: PagingInformation?

    public init(links: PagedDocumentLinks, data: [ScmGitReference], included: [ScmRepository]? = nil, meta: PagingInformation? = nil) {
        self.links = links
        self.data = data
        self.included = included
        self.meta = meta
    }
}

public struct BetaTesterInvitationResponse: Codable {
    /// BetaTesterInvitation
    public var data: BetaTesterInvitation
    public var links: DocumentLinks

    public init(data: BetaTesterInvitation, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BetaAppReviewDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var type: `Type`
        public var id: String

        public struct Attributes: Codable {
            public var contactEmail: String?
            public var contactFirstName: String?
            public var isDemoAccountRequired: Bool?
            public var demoAccountName: String?
            public var contactLastName: String?
            public var demoAccountPassword: String?
            public var notes: String?
            public var contactPhone: String?

            public init(contactEmail: String? = nil, contactFirstName: String? = nil, isDemoAccountRequired: Bool? = nil, demoAccountName: String? = nil, contactLastName: String? = nil, demoAccountPassword: String? = nil, notes: String? = nil, contactPhone: String? = nil) {
                self.contactEmail = contactEmail
                self.contactFirstName = contactFirstName
                self.isDemoAccountRequired = isDemoAccountRequired
                self.demoAccountName = demoAccountName
                self.contactLastName = contactLastName
                self.demoAccountPassword = demoAccountPassword
                self.notes = notes
                self.contactPhone = contactPhone
            }

            private enum CodingKeys: String, CodingKey {
                case contactEmail
                case contactFirstName
                case isDemoAccountRequired = "demoAccountRequired"
                case demoAccountName
                case contactLastName
                case demoAccountPassword
                case notes
                case contactPhone
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppReviewDetails
        }

        public init(attributes: Attributes? = nil, type: `Type`, id: String) {
            self.attributes = attributes
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var type: `Type`
        public var id: String

        public struct Attributes: Codable {
            public var marketingURL: URL?
            public var keywords: String?
            public var promotionalText: String?
            public var description: String?
            public var whatsNew: String?
            public var supportURL: URL?

            public init(marketingURL: URL? = nil, keywords: String? = nil, promotionalText: String? = nil, description: String? = nil, whatsNew: String? = nil, supportURL: URL? = nil) {
                self.marketingURL = marketingURL
                self.keywords = keywords
                self.promotionalText = promotionalText
                self.description = description
                self.whatsNew = whatsNew
                self.supportURL = supportURL
            }

            private enum CodingKeys: String, CodingKey {
                case marketingURL = "marketingUrl"
                case keywords
                case promotionalText
                case description
                case whatsNew
                case supportURL = "supportUrl"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionLocalizations
        }

        public init(attributes: Attributes? = nil, type: `Type`, id: String) {
            self.attributes = attributes
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public enum IconAssetType: String, Codable, CaseIterable {
    case appStore = "APP_STORE"
    case messagesAppStore = "MESSAGES_APP_STORE"
    case watchAppStore = "WATCH_APP_STORE"
    case tvOsHomeScreen = "TV_OS_HOME_SCREEN"
    case tvOsTopShelf = "TV_OS_TOP_SHELF"
    case alternateExperiment = "ALTERNATE_EXPERIMENT"
}

public struct InAppPurchaseResponse: Codable {
    public var included: [App]?
    public var links: DocumentLinks
    /// InAppPurchase
    public var data: InAppPurchase

    public init(included: [App]? = nil, links: DocumentLinks, data: InAppPurchase) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public enum CiCompletionStatus: String, Codable, CaseIterable {
    case succeeded = "SUCCEEDED"
    case failed = "FAILED"
    case errored = "ERRORED"
    case canceled = "CANCELED"
    case skipped = "SKIPPED"
}

public struct BuildIndividualTestersLinkagesResponse: Codable {
    public var meta: PagingInformation?
    public var data: [Datum]
    public var links: PagedDocumentLinks

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(meta: PagingInformation? = nil, data: [Datum], links: PagedDocumentLinks) {
        self.meta = meta
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`
        public var attributes: Attributes

        public struct Relationships: Codable {
            public var app: App
            public var appStoreVersionLocalizations: AppStoreVersionLocalizations?
            public var build: Build?

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct AppStoreVersionLocalizations: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionLocalizations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct Build: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(app: App, appStoreVersionLocalizations: AppStoreVersionLocalizations? = nil, build: Build? = nil) {
                self.app = app
                self.appStoreVersionLocalizations = appStoreVersionLocalizations
                self.build = build
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersions
        }

        public struct Attributes: Codable {
            public var earliestReleaseDate: Date?
            /// - warning: Deprecated.
            public var usesIdfa: Bool?
            public var copyright: String?
            public var versionString: String
            public var releaseType: ReleaseType?
            public var platform: Platform

            public enum ReleaseType: String, Codable, CaseIterable {
                case manual = "MANUAL"
                case afterApproval = "AFTER_APPROVAL"
                case scheduled = "SCHEDULED"
            }

            public init(earliestReleaseDate: Date? = nil, usesIdfa: Bool? = nil, copyright: String? = nil, versionString: String, releaseType: ReleaseType? = nil, platform: Platform) {
                self.earliestReleaseDate = earliestReleaseDate
                self.usesIdfa = usesIdfa
                self.copyright = copyright
                self.versionString = versionString
                self.releaseType = releaseType
                self.platform = platform
            }
        }

        public init(relationships: Relationships, type: `Type`, attributes: Attributes) {
            self.relationships = relationships
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipAdvancedExperienceResponse: Codable {
    /// AppClipAdvancedExperience
    public var data: AppClipAdvancedExperience
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appClip(AppClip)
        case appClipAdvancedExperienceImage(AppClipAdvancedExperienceImage)
        case appClipAdvancedExperienceLocalization(AppClipAdvancedExperienceLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(AppClipAdvancedExperienceImage.self) {
                self = .appClipAdvancedExperienceImage(value)
            } else if let value = try? container.decode(AppClipAdvancedExperienceLocalization.self) {
                self = .appClipAdvancedExperienceLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClip(let value): try container.encode(value)
            case .appClipAdvancedExperienceImage(let value): try container.encode(value)
            case .appClipAdvancedExperienceLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppClipAdvancedExperience, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct CiTestResultResponse: Codable {
    public var links: DocumentLinks
    /// CiTestResult
    public var data: CiTestResult

    public init(links: DocumentLinks, data: CiTestResult) {
        self.links = links
        self.data = data
    }
}

public struct PerfPowerMetric: Codable {
    public var type: `Type`
    public var links: ResourceLinks
    public var attributes: Attributes?
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case perfPowerMetrics
    }

    public struct Attributes: Codable {
        public var platform: Platform?
        public var metricType: MetricType?
        public var deviceType: String?

        public enum Platform: String, Codable, CaseIterable {
            case ios = "IOS"
        }

        public enum MetricType: String, Codable, CaseIterable {
            case disk = "DISK"
            case hang = "HANG"
            case battery = "BATTERY"
            case launch = "LAUNCH"
            case memory = "MEMORY"
            case animation = "ANIMATION"
            case termination = "TERMINATION"
        }

        public init(platform: Platform? = nil, metricType: MetricType? = nil, deviceType: String? = nil) {
            self.platform = platform
            self.metricType = metricType
            self.deviceType = deviceType
        }
    }

    public init(type: `Type`, links: ResourceLinks, attributes: Attributes? = nil, id: String) {
        self.type = type
        self.links = links
        self.attributes = attributes
        self.id = id
    }
}

public struct AppStoreVersionExperimentTreatmentLocalizationsResponse: Codable {
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?
    public var data: [AppStoreVersionExperimentTreatmentLocalization]

    public enum IncludedItem: Codable {
        case appStoreVersionExperimentTreatment(AppStoreVersionExperimentTreatment)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionExperimentTreatment.self) {
                self = .appStoreVersionExperimentTreatment(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionExperimentTreatment(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil, data: [AppStoreVersionExperimentTreatmentLocalization]) {
        self.included = included
        self.links = links
        self.meta = meta
        self.data = data
    }
}

public struct ScmProviderResponse: Codable {
    /// ScmProvider
    public var data: ScmProvider
    public var links: DocumentLinks

    public init(data: ScmProvider, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BetaBuildLocalizationResponse: Codable {
    public var included: [Build]?
    /// BetaBuildLocalization
    public var data: BetaBuildLocalization
    public var links: DocumentLinks

    public init(included: [Build]? = nil, data: BetaBuildLocalization, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct AppInfoLocalizationsResponse: Codable {
    public var data: [AppInfoLocalization]
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var included: [AppInfo]?

    public init(data: [AppInfoLocalization], meta: PagingInformation? = nil, links: PagedDocumentLinks, included: [AppInfo]? = nil) {
        self.data = data
        self.meta = meta
        self.links = links
        self.included = included
    }
}

public struct AppClipResponse: Codable {
    /// AppClip
    public var data: AppClip
    public var links: DocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case app(App)
        case appClipDefaultExperience(AppClipDefaultExperience)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appClipDefaultExperience(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppClip, links: DocumentLinks, included: [IncludedItem]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct BetaGroupUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public struct Attributes: Codable {
            public var publicLinkLimit: Int?
            public var name: String?
            public var isFeedbackEnabled: Bool?
            public var isPublicLinkLimitEnabled: Bool?
            public var isIosBuildsAvailableForAppleSiliconMac: Bool?
            public var isPublicLinkEnabled: Bool?

            public init(publicLinkLimit: Int? = nil, name: String? = nil, isFeedbackEnabled: Bool? = nil, isPublicLinkLimitEnabled: Bool? = nil, isIosBuildsAvailableForAppleSiliconMac: Bool? = nil, isPublicLinkEnabled: Bool? = nil) {
                self.publicLinkLimit = publicLinkLimit
                self.name = name
                self.isFeedbackEnabled = isFeedbackEnabled
                self.isPublicLinkLimitEnabled = isPublicLinkLimitEnabled
                self.isIosBuildsAvailableForAppleSiliconMac = isIosBuildsAvailableForAppleSiliconMac
                self.isPublicLinkEnabled = isPublicLinkEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case publicLinkLimit
                case name
                case isFeedbackEnabled = "feedbackEnabled"
                case isPublicLinkLimitEnabled = "publicLinkLimitEnabled"
                case isIosBuildsAvailableForAppleSiliconMac = "iosBuildsAvailableForAppleSiliconMac"
                case isPublicLinkEnabled = "publicLinkEnabled"
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, id: String) {
            self.type = type
            self.attributes = attributes
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct FileLocation: Codable {
    public var lineNumber: Int?
    public var path: String?

    public init(lineNumber: Int? = nil, path: String? = nil) {
        self.lineNumber = lineNumber
        self.path = path
    }
}

public struct CiBuildRunResponse: Codable {
    /// CiBuildRun
    public var data: CiBuildRun
    public var links: DocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case build(Build)
        case ciWorkflow(CiWorkflow)
        case ciProduct(CiProduct)
        case scmGitReference(ScmGitReference)
        case scmPullRequest(ScmPullRequest)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(CiWorkflow.self) {
                self = .ciWorkflow(value)
            } else if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(ScmGitReference.self) {
                self = .scmGitReference(value)
            } else if let value = try? container.decode(ScmPullRequest.self) {
                self = .scmPullRequest(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .build(let value): try container.encode(value)
            case .ciWorkflow(let value): try container.encode(value)
            case .ciProduct(let value): try container.encode(value)
            case .scmGitReference(let value): try container.encode(value)
            case .scmPullRequest(let value): try container.encode(value)
            }
        }
    }

    public init(data: CiBuildRun, links: DocumentLinks, included: [IncludedItem]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppStoreVersionExperimentResponse: Codable {
    /// AppStoreVersionExperiment
    public var data: AppStoreVersionExperiment
    public var links: DocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appStoreVersionExperimentTreatment(AppStoreVersionExperimentTreatment)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatment.self) {
                self = .appStoreVersionExperimentTreatment(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatment(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppStoreVersionExperiment, links: DocumentLinks, included: [IncludedItem]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppClipDefaultExperienceLocalization: Codable {
    public var relationships: Relationships?
    public var type: `Type`
    public var links: ResourceLinks
    public var id: String
    public var attributes: Attributes?

    public struct Relationships: Codable {
        public var appClipHeaderImage: AppClipHeaderImage?
        public var appClipDefaultExperience: AppClipDefaultExperience?

        public struct AppClipHeaderImage: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipHeaderImages
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppClipDefaultExperience: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperiences
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appClipHeaderImage: AppClipHeaderImage? = nil, appClipDefaultExperience: AppClipDefaultExperience? = nil) {
            self.appClipHeaderImage = appClipHeaderImage
            self.appClipDefaultExperience = appClipDefaultExperience
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appClipDefaultExperienceLocalizations
    }

    public struct Attributes: Codable {
        public var locale: String?
        public var subtitle: String?

        public init(locale: String? = nil, subtitle: String? = nil) {
            self.locale = locale
            self.subtitle = subtitle
        }
    }

    public init(relationships: Relationships? = nil, type: `Type`, links: ResourceLinks, id: String, attributes: Attributes? = nil) {
        self.relationships = relationships
        self.type = type
        self.links = links
        self.id = id
        self.attributes = attributes
    }
}

@available(*, deprecated, message: "Deprecated")
public struct IdfaDeclarationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var isAttributesAppInstallationToPreviousAd: Bool?
            public var isAttributesActionWithPreviousAd: Bool?
            public var isHonorsLimitedAdTracking: Bool?
            public var isServesAds: Bool?

            public init(isAttributesAppInstallationToPreviousAd: Bool? = nil, isAttributesActionWithPreviousAd: Bool? = nil, isHonorsLimitedAdTracking: Bool? = nil, isServesAds: Bool? = nil) {
                self.isAttributesAppInstallationToPreviousAd = isAttributesAppInstallationToPreviousAd
                self.isAttributesActionWithPreviousAd = isAttributesActionWithPreviousAd
                self.isHonorsLimitedAdTracking = isHonorsLimitedAdTracking
                self.isServesAds = isServesAds
            }

            private enum CodingKeys: String, CodingKey {
                case isAttributesAppInstallationToPreviousAd = "attributesAppInstallationToPreviousAd"
                case isAttributesActionWithPreviousAd = "attributesActionWithPreviousAd"
                case isHonorsLimitedAdTracking = "honorsLimitedAdTracking"
                case isServesAds = "servesAds"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case idfaDeclarations
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct RoutingAppCoverageResponse: Codable {
    public var included: [AppStoreVersion]?
    /// RoutingAppCoverage
    public var data: RoutingAppCoverage
    public var links: DocumentLinks

    public init(included: [AppStoreVersion]? = nil, data: RoutingAppCoverage, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct PreReleaseVersionsResponse: Codable {
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var data: [PrereleaseVersion]
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case build(Build)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .build(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: PagedDocumentLinks, data: [PrereleaseVersion], meta: PagingInformation? = nil) {
        self.included = included
        self.links = links
        self.data = data
        self.meta = meta
    }
}

public struct CiGitUser: Codable {
    public var displayName: String?
    public var avatarURL: URL?

    public init(displayName: String? = nil, avatarURL: URL? = nil) {
        self.displayName = displayName
        self.avatarURL = avatarURL
    }

    private enum CodingKeys: String, CodingKey {
        case displayName
        case avatarURL = "avatarUrl"
    }
}

public struct AppClipDefaultExperienceLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var attributes: Attributes?
        public var type: `Type`

        public struct Attributes: Codable {
            public var subtitle: String?

            public init(subtitle: String? = nil) {
                self.subtitle = subtitle
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperienceLocalizations
        }

        public init(id: String, attributes: Attributes? = nil, type: `Type`) {
            self.id = id
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct Profile: Codable {
    public var links: ResourceLinks
    public var attributes: Attributes?
    public var id: String
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var expirationDate: Date?
        public var profileContent: String?
        public var profileType: ProfileType?
        public var name: String?
        public var createdDate: Date?
        public var platform: BundleIDPlatform?
        public var profileState: ProfileState?
        public var uuid: String?

        public enum ProfileType: String, Codable, CaseIterable {
            case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
            case iosAppStore = "IOS_APP_STORE"
            case iosAppAdhoc = "IOS_APP_ADHOC"
            case iosAppInhouse = "IOS_APP_INHOUSE"
            case macAppDevelopment = "MAC_APP_DEVELOPMENT"
            case macAppStore = "MAC_APP_STORE"
            case macAppDirect = "MAC_APP_DIRECT"
            case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
            case tvosAppStore = "TVOS_APP_STORE"
            case tvosAppAdhoc = "TVOS_APP_ADHOC"
            case tvosAppInhouse = "TVOS_APP_INHOUSE"
            case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
            case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
            case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
        }

        public enum ProfileState: String, Codable, CaseIterable {
            case active = "ACTIVE"
            case invalid = "INVALID"
        }

        public init(expirationDate: Date? = nil, profileContent: String? = nil, profileType: ProfileType? = nil, name: String? = nil, createdDate: Date? = nil, platform: BundleIDPlatform? = nil, profileState: ProfileState? = nil, uuid: String? = nil) {
            self.expirationDate = expirationDate
            self.profileContent = profileContent
            self.profileType = profileType
            self.name = name
            self.createdDate = createdDate
            self.platform = platform
            self.profileState = profileState
            self.uuid = uuid
        }
    }

    public struct Relationships: Codable {
        public var devices: Devices?
        public var certificates: Certificates?
        public var bundleID: BundleID?

        public struct Devices: Codable {
            public var data: [Datum]?
            public var meta: PagingInformation?
            public var links: Links?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case devices
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, meta: PagingInformation? = nil, links: Links? = nil) {
                self.data = data
                self.meta = meta
                self.links = links
            }
        }

        public struct Certificates: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case certificates
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BundleID: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case bundleIDs = "bundleIds"
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(devices: Devices? = nil, certificates: Certificates? = nil, bundleID: BundleID? = nil) {
            self.devices = devices
            self.certificates = certificates
            self.bundleID = bundleID
        }

        private enum CodingKeys: String, CodingKey {
            case devices
            case certificates
            case bundleID = "bundleId"
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case profiles
    }

    public init(links: ResourceLinks, attributes: Attributes? = nil, id: String, relationships: Relationships? = nil, type: `Type`) {
        self.links = links
        self.attributes = attributes
        self.id = id
        self.relationships = relationships
        self.type = type
    }
}

public struct BetaAppClipInvocationLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var attributes: Attributes
        public var type: `Type`

        public struct Relationships: Codable {
            public var betaAppClipInvocation: BetaAppClipInvocation

            public struct BetaAppClipInvocation: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaAppClipInvocations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(betaAppClipInvocation: BetaAppClipInvocation) {
                self.betaAppClipInvocation = betaAppClipInvocation
            }
        }

        public struct Attributes: Codable {
            public var locale: String
            public var title: String

            public init(locale: String, title: String) {
                self.locale = locale
                self.title = title
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppClipInvocationLocalizations
        }

        public init(relationships: Relationships, attributes: Attributes, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildBetaNotificationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var build: Build

            public struct Build: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(build: Build) {
                self.build = build
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case buildBetaNotifications
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPriceInlineCreate: Codable {
    public var id: String?
    public var type: `Type`

    public enum `Type`: String, Codable, CaseIterable {
        case appPrices
    }

    public init(id: String? = nil, type: `Type`) {
        self.id = id
        self.type = type
    }
}

public struct BetaGroupBuildsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaAppClipInvocationResponse: Codable {
    /// BetaAppClipInvocation
    public var data: BetaAppClipInvocation
    public var included: [BetaAppClipInvocationLocalization]?
    public var links: DocumentLinks

    public init(data: BetaAppClipInvocation, included: [BetaAppClipInvocationLocalization]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public enum AppStoreVersionState: String, Codable, CaseIterable {
    case accepted = "ACCEPTED"
    case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
    case developerRejected = "DEVELOPER_REJECTED"
    case inReview = "IN_REVIEW"
    case invalidBinary = "INVALID_BINARY"
    case metadataRejected = "METADATA_REJECTED"
    case pendingAppleRelease = "PENDING_APPLE_RELEASE"
    case pendingContract = "PENDING_CONTRACT"
    case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
    case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
    case preorderReadyForSale = "PREORDER_READY_FOR_SALE"
    case processingForAppStore = "PROCESSING_FOR_APP_STORE"
    case readyForReview = "READY_FOR_REVIEW"
    case readyForSale = "READY_FOR_SALE"
    case rejected = "REJECTED"
    case removedFromSale = "REMOVED_FROM_SALE"
    case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
    case waitingForReview = "WAITING_FOR_REVIEW"
    case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
}

public struct AppPreOrder: Codable {
    public var type: `Type`
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var id: String
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appPreOrders
    }

    public struct Attributes: Codable {
        public var preOrderAvailableDate: NaiveDate?
        public var appReleaseDate: NaiveDate?

        public init(preOrderAvailableDate: NaiveDate? = nil, appReleaseDate: NaiveDate? = nil) {
            self.preOrderAvailableDate = preOrderAvailableDate
            self.appReleaseDate = appReleaseDate
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships? = nil, id: String, links: ResourceLinks) {
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.id = id
        self.links = links
    }
}

public struct BetaAppLocalizationsResponse: Codable {
    public var meta: PagingInformation?
    public var data: [BetaAppLocalization]
    public var links: PagedDocumentLinks
    public var included: [App]?

    public init(meta: PagingInformation? = nil, data: [BetaAppLocalization], links: PagedDocumentLinks, included: [App]? = nil) {
        self.meta = meta
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppStoreVersionUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var relationships: Relationships?
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersions
        }

        public struct Relationships: Codable {
            public var build: Build?
            public var appClipDefaultExperience: AppClipDefaultExperience?

            public struct Build: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppClipDefaultExperience: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipDefaultExperiences
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(build: Build? = nil, appClipDefaultExperience: AppClipDefaultExperience? = nil) {
                self.build = build
                self.appClipDefaultExperience = appClipDefaultExperience
            }
        }

        public struct Attributes: Codable {
            public var versionString: String?
            public var isDownloadable: Bool?
            /// - warning: Deprecated.
            public var usesIdfa: Bool?
            public var earliestReleaseDate: Date?
            public var copyright: String?
            public var releaseType: ReleaseType?

            public enum ReleaseType: String, Codable, CaseIterable {
                case manual = "MANUAL"
                case afterApproval = "AFTER_APPROVAL"
                case scheduled = "SCHEDULED"
            }

            public init(versionString: String? = nil, isDownloadable: Bool? = nil, usesIdfa: Bool? = nil, earliestReleaseDate: Date? = nil, copyright: String? = nil, releaseType: ReleaseType? = nil) {
                self.versionString = versionString
                self.isDownloadable = isDownloadable
                self.usesIdfa = usesIdfa
                self.earliestReleaseDate = earliestReleaseDate
                self.copyright = copyright
                self.releaseType = releaseType
            }

            private enum CodingKeys: String, CodingKey {
                case versionString
                case isDownloadable = "downloadable"
                case usesIdfa
                case earliestReleaseDate
                case copyright
                case releaseType
            }
        }

        public init(type: `Type`, id: String, relationships: Relationships? = nil, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.relationships = relationships
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppScreenshotSetsResponse: Codable {
    public var included: [IncludedItem]?
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [AppScreenshotSet]

    public enum IncludedItem: Codable {
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)
        case appScreenshot(AppScreenshot)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else if let value = try? container.decode(AppScreenshot.self) {
                self = .appScreenshot(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            case .appScreenshot(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [AppScreenshotSet]) {
        self.included = included
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct BuildAppEncryptionDeclarationLinkageRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appEncryptionDeclarations
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppCustomProductPage: Codable {
    public var relationships: Relationships?
    public var id: String
    public var type: `Type`
    public var links: ResourceLinks
    public var attributes: Attributes?

    public struct Relationships: Codable {
        public var appCustomProductPageVersions: AppCustomProductPageVersions?
        public var app: App?

        public struct AppCustomProductPageVersions: Codable {
            public var data: [Datum]?
            public var meta: PagingInformation?
            public var links: Links?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, meta: PagingInformation? = nil, links: Links? = nil) {
                self.data = data
                self.meta = meta
                self.links = links
            }
        }

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appCustomProductPageVersions: AppCustomProductPageVersions? = nil, app: App? = nil) {
            self.appCustomProductPageVersions = appCustomProductPageVersions
            self.app = app
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appCustomProductPages
    }

    public struct Attributes: Codable {
        public var url: URL?
        public var name: String?
        public var isVisible: Bool?

        public init(url: URL? = nil, name: String? = nil, isVisible: Bool? = nil) {
            self.url = url
            self.name = name
            self.isVisible = isVisible
        }

        private enum CodingKeys: String, CodingKey {
            case url
            case name
            case isVisible = "visible"
        }
    }

    public init(relationships: Relationships? = nil, id: String, type: `Type`, links: ResourceLinks, attributes: Attributes? = nil) {
        self.relationships = relationships
        self.id = id
        self.type = type
        self.links = links
        self.attributes = attributes
    }
}

public struct AppStoreVersionReleaseRequestCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionReleaseRequests
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiIssue: Codable {
    public var type: `Type`
    public var links: ResourceLinks
    public var id: String
    public var attributes: Attributes?

    public enum `Type`: String, Codable, CaseIterable {
        case ciIssues
    }

    public struct Attributes: Codable {
        public var issueType: IssueType?
        public var message: String?
        public var category: String?
        public var fileSource: FileLocation?

        public enum IssueType: String, Codable, CaseIterable {
            case analyzerWarning = "ANALYZER_WARNING"
            case error = "ERROR"
            case testFailure = "TEST_FAILURE"
            case warning = "WARNING"
        }

        public init(issueType: IssueType? = nil, message: String? = nil, category: String? = nil, fileSource: FileLocation? = nil) {
            self.issueType = issueType
            self.message = message
            self.category = category
            self.fileSource = fileSource
        }
    }

    public init(type: `Type`, links: ResourceLinks, id: String, attributes: Attributes? = nil) {
        self.type = type
        self.links = links
        self.id = id
        self.attributes = attributes
    }
}

public enum BundleIDPlatform: String, Codable, CaseIterable {
    case ios = "IOS"
    case macOs = "MAC_OS"
}

public struct RoutingAppCoverageUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var type: `Type`
        public var id: String

        public struct Attributes: Codable {
            public var isUploaded: Bool?
            public var sourceFileChecksum: String?

            public init(isUploaded: Bool? = nil, sourceFileChecksum: String? = nil) {
                self.isUploaded = isUploaded
                self.sourceFileChecksum = sourceFileChecksum
            }

            private enum CodingKeys: String, CodingKey {
                case isUploaded = "uploaded"
                case sourceFileChecksum
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case routingAppCoverages
        }

        public init(attributes: Attributes? = nil, type: `Type`, id: String) {
            self.attributes = attributes
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiArtifactsResponse: Codable {
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [CiArtifact]

    public init(meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [CiArtifact]) {
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct User: Codable {
    public var type: `Type`
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case users
    }

    public struct Attributes: Codable {
        public var lastName: String?
        public var firstName: String?
        public var isAllAppsVisible: Bool?
        public var roles: [UserRole]?
        public var username: String?
        public var isProvisioningAllowed: Bool?

        public init(lastName: String? = nil, firstName: String? = nil, isAllAppsVisible: Bool? = nil, roles: [UserRole]? = nil, username: String? = nil, isProvisioningAllowed: Bool? = nil) {
            self.lastName = lastName
            self.firstName = firstName
            self.isAllAppsVisible = isAllAppsVisible
            self.roles = roles
            self.username = username
            self.isProvisioningAllowed = isProvisioningAllowed
        }

        private enum CodingKeys: String, CodingKey {
            case lastName
            case firstName
            case isAllAppsVisible = "allAppsVisible"
            case roles
            case username
            case isProvisioningAllowed = "provisioningAllowed"
        }
    }

    public struct Relationships: Codable {
        public var visibleApps: VisibleApps?

        public struct VisibleApps: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(visibleApps: VisibleApps? = nil) {
            self.visibleApps = visibleApps
        }
    }

    public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks, id: String) {
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
        self.id = id
    }
}

public enum AppEventAssetType: String, Codable, CaseIterable {
    case eventCard = "EVENT_CARD"
    case eventDetailsPage = "EVENT_DETAILS_PAGE"
}

@available(*, deprecated, message: "Deprecated")
public struct AppStoreVersionSubmissionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionSubmissions
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEventScreenshotCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var attributes: Attributes
        public var type: `Type`

        public struct Relationships: Codable {
            public var appEventLocalization: AppEventLocalization

            public struct AppEventLocalization: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEventLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appEventLocalization: AppEventLocalization) {
                self.appEventLocalization = appEventLocalization
            }
        }

        public struct Attributes: Codable {
            public var appEventAssetType: AppEventAssetType
            public var fileSize: Int
            public var fileName: String

            public init(appEventAssetType: AppEventAssetType, fileSize: Int, fileName: String) {
                self.appEventAssetType = appEventAssetType
                self.fileSize = fileSize
                self.fileName = fileName
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appEventScreenshots
        }

        public init(relationships: Relationships, attributes: Attributes, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionExperimentTreatmentLocalizationResponse: Codable {
    public var included: [IncludedItem]?
    /// AppStoreVersionExperimentTreatmentLocalization
    public var data: AppStoreVersionExperimentTreatmentLocalization
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appStoreVersionExperimentTreatment(AppStoreVersionExperimentTreatment)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionExperimentTreatment.self) {
                self = .appStoreVersionExperimentTreatment(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionExperimentTreatment(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, data: AppStoreVersionExperimentTreatmentLocalization, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct ImageAsset: Codable {
    public var width: Int?
    public var templateURL: String?
    public var height: Int?

    public init(width: Int? = nil, templateURL: String? = nil, height: Int? = nil) {
        self.width = width
        self.templateURL = templateURL
        self.height = height
    }

    private enum CodingKeys: String, CodingKey {
        case width
        case templateURL = "templateUrl"
        case height
    }
}

public struct BetaTesterInvitationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var betaTester: BetaTester
            public var app: App

            public struct BetaTester: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaTesters
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(betaTester: BetaTester, app: App) {
                self.betaTester = betaTester
                self.app = app
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesterInvitations
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppScreenshotSetCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships?
        public var attributes: Attributes
        public var type: `Type`

        public struct Relationships: Codable {
            public var appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization?
            public var appStoreVersionLocalization: AppStoreVersionLocalization?
            public var appCustomProductPageLocalization: AppCustomProductPageLocalization?

            public struct AppStoreVersionExperimentTreatmentLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperimentTreatmentLocalizations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppStoreVersionLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionLocalizations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppCustomProductPageLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization? = nil, appStoreVersionLocalization: AppStoreVersionLocalization? = nil, appCustomProductPageLocalization: AppCustomProductPageLocalization? = nil) {
                self.appStoreVersionExperimentTreatmentLocalization = appStoreVersionExperimentTreatmentLocalization
                self.appStoreVersionLocalization = appStoreVersionLocalization
                self.appCustomProductPageLocalization = appCustomProductPageLocalization
            }
        }

        public struct Attributes: Codable {
            public var screenshotDisplayType: ScreenshotDisplayType

            public init(screenshotDisplayType: ScreenshotDisplayType) {
                self.screenshotDisplayType = screenshotDisplayType
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshotSets
        }

        public init(relationships: Relationships? = nil, attributes: Attributes, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPricePointsResponse: Codable {
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?
    public var included: [IncludedItem]?
    public var data: [AppPricePoint]

    public enum IncludedItem: Codable {
        case appPriceTier(AppPriceTier)
        case territory(Territory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppPriceTier.self) {
                self = .appPriceTier(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appPriceTier(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            }
        }
    }

    public init(links: PagedDocumentLinks, meta: PagingInformation? = nil, included: [IncludedItem]? = nil, data: [AppPricePoint]) {
        self.links = links
        self.meta = meta
        self.included = included
        self.data = data
    }
}

public struct GameCenterEnabledVersionCompatibleVersionsLinkagesResponse: Codable {
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case gameCenterEnabledVersions
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [Datum]) {
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct RoutingAppCoverage: Codable {
    public var relationships: Relationships?
    public var type: `Type`
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreVersion = appStoreVersion
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case routingAppCoverages
    }

    public struct Attributes: Codable {
        public var sourceFileChecksum: String?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?
        public var fileSize: Int?
        public var fileName: String?

        public init(sourceFileChecksum: String? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil, fileSize: Int? = nil, fileName: String? = nil) {
            self.sourceFileChecksum = sourceFileChecksum
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
            self.fileSize = fileSize
            self.fileName = fileName
        }
    }

    public init(relationships: Relationships? = nil, type: `Type`, attributes: Attributes? = nil, id: String, links: ResourceLinks) {
        self.relationships = relationships
        self.type = type
        self.attributes = attributes
        self.id = id
        self.links = links
    }
}

public struct BetaLicenseAgreementsResponse: Codable {
    public var included: [App]?
    public var data: [BetaLicenseAgreement]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(included: [App]? = nil, data: [BetaLicenseAgreement], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.included = included
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreVersionExperimentTreatmentCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var attributes: Attributes
        public var type: `Type`

        public struct Relationships: Codable {
            public var appStoreVersionExperiment: AppStoreVersionExperiment

            public struct AppStoreVersionExperiment: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperiments
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersionExperiment: AppStoreVersionExperiment) {
                self.appStoreVersionExperiment = appStoreVersionExperiment
            }
        }

        public struct Attributes: Codable {
            public var appIconName: String?
            public var name: String

            public init(appIconName: String? = nil, name: String) {
                self.appIconName = appIconName
                self.name = name
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionExperimentTreatments
        }

        public init(relationships: Relationships, attributes: Attributes, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct DiagnosticSignature: Codable {
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks
    public var attributes: Attributes?

    public enum `Type`: String, Codable, CaseIterable {
        case diagnosticSignatures
    }

    public struct Attributes: Codable {
        public var diagnosticType: DiagnosticType?
        public var weight: Double?
        public var signature: String?

        public enum DiagnosticType: String, Codable, CaseIterable {
            case diskWrites = "DISK_WRITES"
        }

        public init(diagnosticType: DiagnosticType? = nil, weight: Double? = nil, signature: String? = nil) {
            self.diagnosticType = diagnosticType
            self.weight = weight
            self.signature = signature
        }
    }

    public init(type: `Type`, id: String, links: ResourceLinks, attributes: Attributes? = nil) {
        self.type = type
        self.id = id
        self.links = links
        self.attributes = attributes
    }
}

public struct AppClipDefaultExperienceLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var attributes: Attributes
        public var type: `Type`

        public struct Relationships: Codable {
            public var appClipDefaultExperience: AppClipDefaultExperience

            public struct AppClipDefaultExperience: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipDefaultExperiences
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appClipDefaultExperience: AppClipDefaultExperience) {
                self.appClipDefaultExperience = appClipDefaultExperience
            }
        }

        public struct Attributes: Codable {
            public var subtitle: String?
            public var locale: String

            public init(subtitle: String? = nil, locale: String) {
                self.subtitle = subtitle
                self.locale = locale
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperienceLocalizations
        }

        public init(relationships: Relationships, attributes: Attributes, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

@available(*, deprecated, message: "Deprecated")
public struct IdfaDeclaration: Codable {
    public var attributes: Attributes?
    public var links: ResourceLinks
    public var id: String
    public var type: `Type`
    public var relationships: Relationships?

    public struct Attributes: Codable {
        public var isHonorsLimitedAdTracking: Bool?
        public var isAttributesActionWithPreviousAd: Bool?
        public var isAttributesAppInstallationToPreviousAd: Bool?
        public var isServesAds: Bool?

        public init(isHonorsLimitedAdTracking: Bool? = nil, isAttributesActionWithPreviousAd: Bool? = nil, isAttributesAppInstallationToPreviousAd: Bool? = nil, isServesAds: Bool? = nil) {
            self.isHonorsLimitedAdTracking = isHonorsLimitedAdTracking
            self.isAttributesActionWithPreviousAd = isAttributesActionWithPreviousAd
            self.isAttributesAppInstallationToPreviousAd = isAttributesAppInstallationToPreviousAd
            self.isServesAds = isServesAds
        }

        private enum CodingKeys: String, CodingKey {
            case isHonorsLimitedAdTracking = "honorsLimitedAdTracking"
            case isAttributesActionWithPreviousAd = "attributesActionWithPreviousAd"
            case isAttributesAppInstallationToPreviousAd = "attributesAppInstallationToPreviousAd"
            case isServesAds = "servesAds"
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case idfaDeclarations
    }

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreVersion = appStoreVersion
        }
    }

    public init(attributes: Attributes? = nil, links: ResourceLinks, id: String, type: `Type`, relationships: Relationships? = nil) {
        self.attributes = attributes
        self.links = links
        self.id = id
        self.type = type
        self.relationships = relationships
    }
}

public struct ReviewSubmissionItemsResponse: Codable {
    public var included: [IncludedItem]?
    public var data: [ReviewSubmissionItem]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appCustomProductPageVersion(AppCustomProductPageVersion)
        case appStoreVersionExperiment(AppStoreVersionExperiment)
        case appEvent(AppEvent)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appCustomProductPageVersion(let value): try container.encode(value)
            case .appStoreVersionExperiment(let value): try container.encode(value)
            case .appEvent(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, data: [ReviewSubmissionItem], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.included = included
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct CertificateResponse: Codable {
    /// Certificate
    public var data: Certificate
    public var links: DocumentLinks

    public init(data: Certificate, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BetaGroupBetaTestersLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppStoreVersionAppClipDefaultExperienceLinkageRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperiences
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct DiagnosticSignaturesResponse: Codable {
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [DiagnosticSignature]

    public init(meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [DiagnosticSignature]) {
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct BetaTestersResponse: Codable {
    public var included: [IncludedItem]?
    public var data: [BetaTester]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case betaGroup(BetaGroup)
        case build(Build)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, data: [BetaTester], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.included = included
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreVersionsResponse: Codable {
    public var meta: PagingInformation?
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var data: [AppStoreVersion]

    public enum IncludedItem: Codable {
        case app(App)
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case build(Build)
        case appStoreVersionPhasedRelease(AppStoreVersionPhasedRelease)
        case routingAppCoverage(RoutingAppCoverage)
        case appStoreReviewDetail(AppStoreReviewDetail)
        case appStoreVersionSubmission(AppStoreVersionSubmission)
        case idfaDeclaration(IdfaDeclaration)
        case appClipDefaultExperience(AppClipDefaultExperience)
        case appStoreVersionExperiment(AppStoreVersionExperiment)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AgeRatingDeclaration.self) {
                self = .ageRatingDeclaration(value)
            } else if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(AppStoreVersionPhasedRelease.self) {
                self = .appStoreVersionPhasedRelease(value)
            } else if let value = try? container.decode(RoutingAppCoverage.self) {
                self = .routingAppCoverage(value)
            } else if let value = try? container.decode(AppStoreReviewDetail.self) {
                self = .appStoreReviewDetail(value)
            } else if let value = try? container.decode(AppStoreVersionSubmission.self) {
                self = .appStoreVersionSubmission(value)
            } else if let value = try? container.decode(IdfaDeclaration.self) {
                self = .idfaDeclaration(value)
            } else if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .ageRatingDeclaration(let value): try container.encode(value)
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .appStoreVersionPhasedRelease(let value): try container.encode(value)
            case .routingAppCoverage(let value): try container.encode(value)
            case .appStoreReviewDetail(let value): try container.encode(value)
            case .appStoreVersionSubmission(let value): try container.encode(value)
            case .idfaDeclaration(let value): try container.encode(value)
            case .appClipDefaultExperience(let value): try container.encode(value)
            case .appStoreVersionExperiment(let value): try container.encode(value)
            }
        }
    }

    public init(meta: PagingInformation? = nil, included: [IncludedItem]? = nil, links: PagedDocumentLinks, data: [AppStoreVersion]) {
        self.meta = meta
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct EndUserLicenseAgreementResponse: Codable {
    /// EndUserLicenseAgreement
    public var data: EndUserLicenseAgreement
    public var links: DocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case app(App)
        case territory(Territory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            }
        }
    }

    public init(data: EndUserLicenseAgreement, links: DocumentLinks, included: [IncludedItem]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppStoreReviewDetailResponse: Codable {
    public var links: DocumentLinks
    public var included: [IncludedItem]?
    /// AppStoreReviewDetail
    public var data: AppStoreReviewDetail

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appStoreReviewAttachment(AppStoreReviewAttachment)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppStoreReviewAttachment.self) {
                self = .appStoreReviewAttachment(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appStoreReviewAttachment(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, included: [IncludedItem]? = nil, data: AppStoreReviewDetail) {
        self.links = links
        self.included = included
        self.data = data
    }
}

public struct AppEncryptionDeclarationBuildsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct CiBuildRunCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships?
        public var attributes: Attributes?
        public var type: `Type`

        public struct Relationships: Codable {
            public var pullRequest: PullRequest?
            public var workflow: Workflow?
            public var buildRun: BuildRun?
            public var sourceBranchOrTag: SourceBranchOrTag?

            public struct PullRequest: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case scmPullRequests
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct Workflow: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciWorkflows
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct BuildRun: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciBuildRuns
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SourceBranchOrTag: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case scmGitReferences
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(pullRequest: PullRequest? = nil, workflow: Workflow? = nil, buildRun: BuildRun? = nil, sourceBranchOrTag: SourceBranchOrTag? = nil) {
                self.pullRequest = pullRequest
                self.workflow = workflow
                self.buildRun = buildRun
                self.sourceBranchOrTag = sourceBranchOrTag
            }
        }

        public struct Attributes: Codable {
            public var isClean: Bool?

            public init(isClean: Bool? = nil) {
                self.isClean = isClean
            }

            private enum CodingKeys: String, CodingKey {
                case isClean = "clean"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case ciBuildRuns
        }

        public init(relationships: Relationships? = nil, attributes: Attributes? = nil, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppCustomProductPageLocalizationResponse: Codable {
    public var included: [IncludedItem]?
    /// AppCustomProductPageLocalization
    public var data: AppCustomProductPageLocalization
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appCustomProductPageVersion(AppCustomProductPageVersion)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCustomProductPageVersion(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, data: AppCustomProductPageLocalization, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct ScmRepositoryResponse: Codable {
    public var included: [IncludedItem]?
    public var links: DocumentLinks
    /// ScmRepository
    public var data: ScmRepository

    public enum IncludedItem: Codable {
        case scmProvider(ScmProvider)
        case scmGitReference(ScmGitReference)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(ScmProvider.self) {
                self = .scmProvider(value)
            } else if let value = try? container.decode(ScmGitReference.self) {
                self = .scmGitReference(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .scmProvider(let value): try container.encode(value)
            case .scmGitReference(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: DocumentLinks, data: ScmRepository) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct AppInfoUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships?
        public var type: `Type`
        public var id: String

        public struct Relationships: Codable {
            public var primaryCategory: PrimaryCategory?
            public var secondarySubcategoryOne: SecondarySubcategoryOne?
            public var secondarySubcategoryTwo: SecondarySubcategoryTwo?
            public var primarySubcategoryTwo: PrimarySubcategoryTwo?
            public var secondaryCategory: SecondaryCategory?
            public var primarySubcategoryOne: PrimarySubcategoryOne?

            public struct PrimaryCategory: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SecondarySubcategoryOne: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SecondarySubcategoryTwo: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct PrimarySubcategoryTwo: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SecondaryCategory: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct PrimarySubcategoryOne: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(primaryCategory: PrimaryCategory? = nil, secondarySubcategoryOne: SecondarySubcategoryOne? = nil, secondarySubcategoryTwo: SecondarySubcategoryTwo? = nil, primarySubcategoryTwo: PrimarySubcategoryTwo? = nil, secondaryCategory: SecondaryCategory? = nil, primarySubcategoryOne: PrimarySubcategoryOne? = nil) {
                self.primaryCategory = primaryCategory
                self.secondarySubcategoryOne = secondarySubcategoryOne
                self.secondarySubcategoryTwo = secondarySubcategoryTwo
                self.primarySubcategoryTwo = primarySubcategoryTwo
                self.secondaryCategory = secondaryCategory
                self.primarySubcategoryOne = primarySubcategoryOne
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appInfos
        }

        public init(relationships: Relationships? = nil, type: `Type`, id: String) {
            self.relationships = relationships
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiIssuesResponse: Codable {
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?
    public var data: [CiIssue]

    public init(links: PagedDocumentLinks, meta: PagingInformation? = nil, data: [CiIssue]) {
        self.links = links
        self.meta = meta
        self.data = data
    }
}

public struct AppClip: Codable {
    public var type: `Type`
    public var id: String
    public var relationships: Relationships?
    public var links: ResourceLinks
    public var attributes: Attributes?

    public enum `Type`: String, Codable, CaseIterable {
        case appClips
    }

    public struct Relationships: Codable {
        public var app: App?
        public var appClipDefaultExperiences: AppClipDefaultExperiences?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppClipDefaultExperiences: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperiences
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(app: App? = nil, appClipDefaultExperiences: AppClipDefaultExperiences? = nil) {
            self.app = app
            self.appClipDefaultExperiences = appClipDefaultExperiences
        }
    }

    public struct Attributes: Codable {
        public var bundleID: String?

        public init(bundleID: String? = nil) {
            self.bundleID = bundleID
        }

        private enum CodingKeys: String, CodingKey {
            case bundleID = "bundleId"
        }
    }

    public init(type: `Type`, id: String, relationships: Relationships? = nil, links: ResourceLinks, attributes: Attributes? = nil) {
        self.type = type
        self.id = id
        self.relationships = relationships
        self.links = links
        self.attributes = attributes
    }
}

public struct GameCenterEnabledVersionCompatibleVersionsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case gameCenterEnabledVersions
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct ReviewSubmissionResponse: Codable {
    public var links: DocumentLinks
    public var included: [IncludedItem]?
    /// ReviewSubmission
    public var data: ReviewSubmission

    public enum IncludedItem: Codable {
        case app(App)
        case reviewSubmissionItem(ReviewSubmissionItem)
        case appStoreVersion(AppStoreVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(ReviewSubmissionItem.self) {
                self = .reviewSubmissionItem(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .reviewSubmissionItem(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, included: [IncludedItem]? = nil, data: ReviewSubmission) {
        self.links = links
        self.included = included
        self.data = data
    }
}

public struct BetaLicenseAgreementResponse: Codable {
    public var links: DocumentLinks
    public var included: [App]?
    /// BetaLicenseAgreement
    public var data: BetaLicenseAgreement

    public init(links: DocumentLinks, included: [App]? = nil, data: BetaLicenseAgreement) {
        self.links = links
        self.included = included
        self.data = data
    }
}

public struct AppPreviewSetAppPreviewsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppClipAdvancedExperience: Codable {
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var id: String
    public var type: `Type`
    public var attributes: Attributes?

    public struct Relationships: Codable {
        public var localizations: Localizations?
        public var appClip: AppClip?
        public var headerImage: HeaderImage?

        public struct Localizations: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipAdvancedExperienceLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AppClip: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appClips
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct HeaderImage: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipAdvancedExperienceImages
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(localizations: Localizations? = nil, appClip: AppClip? = nil, headerImage: HeaderImage? = nil) {
            self.localizations = localizations
            self.appClip = appClip
            self.headerImage = headerImage
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appClipAdvancedExperiences
    }

    public struct Attributes: Codable {
        public var businessCategory: BusinessCategory?
        public var place: Place?
        public var version: Int?
        public var link: URL?
        public var placeStatus: PlaceStatus?
        public var isPoweredBy: Bool?
        public var action: AppClipAction?
        public var status: Status?
        public var defaultLanguage: AppClipAdvancedExperienceLanguage?

        public enum BusinessCategory: String, Codable, CaseIterable {
            case automotive = "AUTOMOTIVE"
            case beauty = "BEAUTY"
            case bikes = "BIKES"
            case books = "BOOKS"
            case casino = "CASINO"
            case education = "EDUCATION"
            case educationJapan = "EDUCATION_JAPAN"
            case entertainment = "ENTERTAINMENT"
            case evCharger = "EV_CHARGER"
            case financialUsd = "FINANCIAL_USD"
            case financialCny = "FINANCIAL_CNY"
            case financialGbp = "FINANCIAL_GBP"
            case financialJpy = "FINANCIAL_JPY"
            case financialEur = "FINANCIAL_EUR"
            case fitness = "FITNESS"
            case foodAndDrink = "FOOD_AND_DRINK"
            case gas = "GAS"
            case grocery = "GROCERY"
            case healthAndMedical = "HEALTH_AND_MEDICAL"
            case hotelAndTravel = "HOTEL_AND_TRAVEL"
            case music = "MUSIC"
            case parking = "PARKING"
            case petServices = "PET_SERVICES"
            case professionalServices = "PROFESSIONAL_SERVICES"
            case shopping = "SHOPPING"
            case ticketing = "TICKETING"
            case transit = "TRANSIT"
        }

        public struct Place: Codable {
            public var categories: [String]?
            public var names: [String]?
            public var mapAction: MapAction?
            public var homePage: String?
            public var relationship: Relationship?
            public var displayPoint: DisplayPoint?
            public var mainAddress: MainAddress?
            public var phoneNumber: PhoneNumber?
            public var placeID: String?

            public enum MapAction: String, Codable, CaseIterable {
                case buyTickets = "BUY_TICKETS"
                case viewAvailability = "VIEW_AVAILABILITY"
                case viewPricing = "VIEW_PRICING"
                case hotelBookRoom = "HOTEL_BOOK_ROOM"
                case parkingReserveParking = "PARKING_RESERVE_PARKING"
                case restaurantJoinWaitlist = "RESTAURANT_JOIN_WAITLIST"
                case restaurantOrderDelivery = "RESTAURANT_ORDER_DELIVERY"
                case restaurantOrderFood = "RESTAURANT_ORDER_FOOD"
                case restaurantOrderTakeout = "RESTAURANT_ORDER_TAKEOUT"
                case restaurantReservation = "RESTAURANT_RESERVATION"
                case scheduleAppointment = "SCHEDULE_APPOINTMENT"
                case restaurantViewMenu = "RESTAURANT_VIEW_MENU"
                case theaterNowPlaying = "THEATER_NOW_PLAYING"
            }

            public enum Relationship: String, Codable, CaseIterable {
                case owner = "OWNER"
                case authorized = "AUTHORIZED"
                case other = "OTHER"
            }

            public struct DisplayPoint: Codable {
                public var source: Source?
                public var coordinates: Coordinates?

                public enum Source: String, Codable, CaseIterable {
                    case calculated = "CALCULATED"
                    case manuallyPlaced = "MANUALLY_PLACED"
                }

                public struct Coordinates: Codable {
                    public var longitude: Double?
                    public var latitude: Double?

                    public init(longitude: Double? = nil, latitude: Double? = nil) {
                        self.longitude = longitude
                        self.latitude = latitude
                    }
                }

                public init(source: Source? = nil, coordinates: Coordinates? = nil) {
                    self.source = source
                    self.coordinates = coordinates
                }
            }

            public struct MainAddress: Codable {
                public var structuredAddress: StructuredAddress?
                public var fullAddress: String?

                public struct StructuredAddress: Codable {
                    public var floor: String?
                    public var streetAddress: [String]?
                    public var countryCode: String?
                    public var neighborhood: String?
                    public var locality: String?
                    public var postalCode: String?
                    public var stateProvince: String?

                    public init(floor: String? = nil, streetAddress: [String]? = nil, countryCode: String? = nil, neighborhood: String? = nil, locality: String? = nil, postalCode: String? = nil, stateProvince: String? = nil) {
                        self.floor = floor
                        self.streetAddress = streetAddress
                        self.countryCode = countryCode
                        self.neighborhood = neighborhood
                        self.locality = locality
                        self.postalCode = postalCode
                        self.stateProvince = stateProvince
                    }
                }

                public init(structuredAddress: StructuredAddress? = nil, fullAddress: String? = nil) {
                    self.structuredAddress = structuredAddress
                    self.fullAddress = fullAddress
                }
            }

            public struct PhoneNumber: Codable {
                public var type: `Type`?
                public var number: String?
                public var intent: String?

                public enum `Type`: String, Codable, CaseIterable {
                    case fax = "FAX"
                    case landline = "LANDLINE"
                    case mobile = "MOBILE"
                    case tollfree = "TOLLFREE"
                }

                public init(type: `Type`? = nil, number: String? = nil, intent: String? = nil) {
                    self.type = type
                    self.number = number
                    self.intent = intent
                }
            }

            public init(categories: [String]? = nil, names: [String]? = nil, mapAction: MapAction? = nil, homePage: String? = nil, relationship: Relationship? = nil, displayPoint: DisplayPoint? = nil, mainAddress: MainAddress? = nil, phoneNumber: PhoneNumber? = nil, placeID: String? = nil) {
                self.categories = categories
                self.names = names
                self.mapAction = mapAction
                self.homePage = homePage
                self.relationship = relationship
                self.displayPoint = displayPoint
                self.mainAddress = mainAddress
                self.phoneNumber = phoneNumber
                self.placeID = placeID
            }

            private enum CodingKeys: String, CodingKey {
                case categories
                case names
                case mapAction
                case homePage
                case relationship
                case displayPoint
                case mainAddress
                case phoneNumber
                case placeID = "placeId"
            }
        }

        public enum PlaceStatus: String, Codable, CaseIterable {
            case pending = "PENDING"
            case matched = "MATCHED"
            case noMatch = "NO_MATCH"
        }

        public enum Status: String, Codable, CaseIterable {
            case received = "RECEIVED"
            case deactivated = "DEACTIVATED"
            case appTransferInProgress = "APP_TRANSFER_IN_PROGRESS"
        }

        public init(businessCategory: BusinessCategory? = nil, place: Place? = nil, version: Int? = nil, link: URL? = nil, placeStatus: PlaceStatus? = nil, isPoweredBy: Bool? = nil, action: AppClipAction? = nil, status: Status? = nil, defaultLanguage: AppClipAdvancedExperienceLanguage? = nil) {
            self.businessCategory = businessCategory
            self.place = place
            self.version = version
            self.link = link
            self.placeStatus = placeStatus
            self.isPoweredBy = isPoweredBy
            self.action = action
            self.status = status
            self.defaultLanguage = defaultLanguage
        }
    }

    public init(links: ResourceLinks, relationships: Relationships? = nil, id: String, type: `Type`, attributes: Attributes? = nil) {
        self.links = links
        self.relationships = relationships
        self.id = id
        self.type = type
        self.attributes = attributes
    }
}

@available(*, deprecated, message: "Deprecated")
public struct AppStoreVersionSubmissionResponse: Codable {
    public var included: [AppStoreVersion]?
    /// AppStoreVersionSubmission
    ///
    /// - warning: Deprecated.
    public var data: AppStoreVersionSubmission
    public var links: DocumentLinks

    public init(included: [AppStoreVersion]? = nil, data: AppStoreVersionSubmission, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct BetaBuildLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships
        public var attributes: Attributes

        public enum `Type`: String, Codable, CaseIterable {
            case betaBuildLocalizations
        }

        public struct Relationships: Codable {
            public var build: Build

            public struct Build: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(build: Build) {
                self.build = build
            }
        }

        public struct Attributes: Codable {
            public var locale: String
            public var whatsNew: String?

            public init(locale: String, whatsNew: String? = nil) {
                self.locale = locale
                self.whatsNew = whatsNew
            }
        }

        public init(type: `Type`, relationships: Relationships, attributes: Attributes) {
            self.type = type
            self.relationships = relationships
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionPromotion: Codable {
    public var id: String
    public var type: `Type`
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionPromotions
    }

    public init(id: String, type: `Type`, links: ResourceLinks) {
        self.id = id
        self.type = type
        self.links = links
    }
}

public struct BetaAppReviewDetailResponse: Codable {
    public var links: DocumentLinks
    public var included: [App]?
    /// BetaAppReviewDetail
    public var data: BetaAppReviewDetail

    public init(links: DocumentLinks, included: [App]? = nil, data: BetaAppReviewDetail) {
        self.links = links
        self.included = included
        self.data = data
    }
}

public struct AppClipAdvancedExperienceLocalizationInlineCreate: Codable {
    public var attributes: Attributes?
    public var id: String?
    public var type: `Type`

    public struct Attributes: Codable {
        public var title: String?
        public var language: AppClipAdvancedExperienceLanguage?
        public var subtitle: String?

        public init(title: String? = nil, language: AppClipAdvancedExperienceLanguage? = nil, subtitle: String? = nil) {
            self.title = title
            self.language = language
            self.subtitle = subtitle
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appClipAdvancedExperienceLocalizations
    }

    public init(attributes: Attributes? = nil, id: String? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.type = type
    }
}

public struct BetaAppReviewSubmissionResponse: Codable {
    public var links: DocumentLinks
    /// BetaAppReviewSubmission
    public var data: BetaAppReviewSubmission
    public var included: [Build]?

    public init(links: DocumentLinks, data: BetaAppReviewSubmission, included: [Build]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct AppStoreVersionExperimentTreatmentResponse: Codable {
    public var included: [IncludedItem]?
    public var links: DocumentLinks
    /// AppStoreVersionExperimentTreatment
    public var data: AppStoreVersionExperimentTreatment

    public enum IncludedItem: Codable {
        case appStoreVersionExperiment(AppStoreVersionExperiment)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionExperiment(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: DocumentLinks, data: AppStoreVersionExperimentTreatment) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct CiBuildActionResponse: Codable {
    public var links: DocumentLinks
    public var included: [CiBuildRun]?
    /// CiBuildAction
    public var data: CiBuildAction

    public init(links: DocumentLinks, included: [CiBuildRun]? = nil, data: CiBuildAction) {
        self.links = links
        self.included = included
        self.data = data
    }
}

public struct UserInvitation: Codable {
    public var attributes: Attributes?
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`
    public var id: String

    public struct Attributes: Codable {
        public var lastName: String?
        public var firstName: String?
        public var isProvisioningAllowed: Bool?
        public var roles: [UserRole]?
        public var expirationDate: Date?
        public var email: String?
        public var isAllAppsVisible: Bool?

        public init(lastName: String? = nil, firstName: String? = nil, isProvisioningAllowed: Bool? = nil, roles: [UserRole]? = nil, expirationDate: Date? = nil, email: String? = nil, isAllAppsVisible: Bool? = nil) {
            self.lastName = lastName
            self.firstName = firstName
            self.isProvisioningAllowed = isProvisioningAllowed
            self.roles = roles
            self.expirationDate = expirationDate
            self.email = email
            self.isAllAppsVisible = isAllAppsVisible
        }

        private enum CodingKeys: String, CodingKey {
            case lastName
            case firstName
            case isProvisioningAllowed = "provisioningAllowed"
            case roles
            case expirationDate
            case email
            case isAllAppsVisible = "allAppsVisible"
        }
    }

    public struct Relationships: Codable {
        public var visibleApps: VisibleApps?

        public struct VisibleApps: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public init(visibleApps: VisibleApps? = nil) {
            self.visibleApps = visibleApps
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case userInvitations
    }

    public init(attributes: Attributes? = nil, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`, id: String) {
        self.attributes = attributes
        self.links = links
        self.relationships = relationships
        self.type = type
        self.id = id
    }
}

public struct AppCustomProductPageCreateRequest: Codable {
    public var included: [IncludedItem]?
    public var data: Data

    public enum IncludedItem: Codable {
        case appCustomProductPageLocalizationInlineCreate(AppCustomProductPageLocalizationInlineCreate)
        case appCustomProductPageVersionInlineCreate(AppCustomProductPageVersionInlineCreate)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCustomProductPageLocalizationInlineCreate.self) {
                self = .appCustomProductPageLocalizationInlineCreate(value)
            } else if let value = try? container.decode(AppCustomProductPageVersionInlineCreate.self) {
                self = .appCustomProductPageVersionInlineCreate(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCustomProductPageLocalizationInlineCreate(let value): try container.encode(value)
            case .appCustomProductPageVersionInlineCreate(let value): try container.encode(value)
            }
        }
    }

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`
        public var attributes: Attributes

        public struct Relationships: Codable {
            public var appCustomProductPageVersions: AppCustomProductPageVersions?
            public var app: App
            public var customProductPageTemplate: CustomProductPageTemplate?
            public var appStoreVersionTemplate: AppStoreVersionTemplate?

            public struct AppCustomProductPageVersions: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct CustomProductPageTemplate: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPages
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppStoreVersionTemplate: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appCustomProductPageVersions: AppCustomProductPageVersions? = nil, app: App, customProductPageTemplate: CustomProductPageTemplate? = nil, appStoreVersionTemplate: AppStoreVersionTemplate? = nil) {
                self.appCustomProductPageVersions = appCustomProductPageVersions
                self.app = app
                self.customProductPageTemplate = customProductPageTemplate
                self.appStoreVersionTemplate = appStoreVersionTemplate
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appCustomProductPages
        }

        public struct Attributes: Codable {
            public var name: String

            public init(name: String) {
                self.name = name
            }
        }

        public init(relationships: Relationships, type: `Type`, attributes: Attributes) {
            self.relationships = relationships
            self.type = type
            self.attributes = attributes
        }
    }

    public init(included: [IncludedItem]? = nil, data: Data) {
        self.included = included
        self.data = data
    }
}

public struct AppScreenshotSetResponse: Codable {
    public var links: DocumentLinks
    /// AppScreenshotSet
    public var data: AppScreenshotSet
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)
        case appScreenshot(AppScreenshot)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else if let value = try? container.decode(AppScreenshot.self) {
                self = .appScreenshot(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            case .appScreenshot(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, data: AppScreenshotSet, included: [IncludedItem]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct AppClipHeaderImage: Codable {
    public var type: `Type`
    public var id: String
    public var relationships: Relationships?
    public var links: ResourceLinks
    public var attributes: Attributes?

    public enum `Type`: String, Codable, CaseIterable {
        case appClipHeaderImages
    }

    public struct Relationships: Codable {
        public var appClipDefaultExperienceLocalization: AppClipDefaultExperienceLocalization?

        public struct AppClipDefaultExperienceLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperienceLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appClipDefaultExperienceLocalization: AppClipDefaultExperienceLocalization? = nil) {
            self.appClipDefaultExperienceLocalization = appClipDefaultExperienceLocalization
        }
    }

    public struct Attributes: Codable {
        public var fileSize: Int?
        public var fileName: String?
        public var assetDeliveryState: AppMediaAssetState?
        public var imageAsset: ImageAsset?
        public var uploadOperations: [UploadOperation]?
        public var sourceFileChecksum: String?

        public init(fileSize: Int? = nil, fileName: String? = nil, assetDeliveryState: AppMediaAssetState? = nil, imageAsset: ImageAsset? = nil, uploadOperations: [UploadOperation]? = nil, sourceFileChecksum: String? = nil) {
            self.fileSize = fileSize
            self.fileName = fileName
            self.assetDeliveryState = assetDeliveryState
            self.imageAsset = imageAsset
            self.uploadOperations = uploadOperations
            self.sourceFileChecksum = sourceFileChecksum
        }
    }

    public init(type: `Type`, id: String, relationships: Relationships? = nil, links: ResourceLinks, attributes: Attributes? = nil) {
        self.type = type
        self.id = id
        self.relationships = relationships
        self.links = links
        self.attributes = attributes
    }
}

public struct CertificateCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`

        public struct Attributes: Codable {
            public var certificateType: CertificateType
            public var csrContent: String

            public init(certificateType: CertificateType, csrContent: String) {
                self.certificateType = certificateType
                self.csrContent = csrContent
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case certificates
        }

        public init(attributes: Attributes, type: `Type`) {
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPriceTierResponse: Codable {
    public var links: DocumentLinks
    /// AppPriceTier
    public var data: AppPriceTier
    public var included: [AppPricePoint]?

    public init(links: DocumentLinks, data: AppPriceTier, included: [AppPricePoint]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public enum UserRole: String, Codable, CaseIterable {
    case admin = "ADMIN"
    case finance = "FINANCE"
    case accountHolder = "ACCOUNT_HOLDER"
    case sales = "SALES"
    case marketing = "MARKETING"
    case appManager = "APP_MANAGER"
    case developer = "DEVELOPER"
    case accessToReports = "ACCESS_TO_REPORTS"
    case customerSupport = "CUSTOMER_SUPPORT"
    case imageManager = "IMAGE_MANAGER"
    case createApps = "CREATE_APPS"
    case cloudManagedDeveloperID = "CLOUD_MANAGED_DEVELOPER_ID"
    case cloudManagedAppDistribution = "CLOUD_MANAGED_APP_DISTRIBUTION"
}

public struct AppStoreReviewDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewDetails
        }

        public struct Attributes: Codable {
            public var contactFirstName: String?
            public var notes: String?
            public var contactEmail: String?
            public var contactPhone: String?
            public var isDemoAccountRequired: Bool?
            public var demoAccountName: String?
            public var demoAccountPassword: String?
            public var contactLastName: String?

            public init(contactFirstName: String? = nil, notes: String? = nil, contactEmail: String? = nil, contactPhone: String? = nil, isDemoAccountRequired: Bool? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, contactLastName: String? = nil) {
                self.contactFirstName = contactFirstName
                self.notes = notes
                self.contactEmail = contactEmail
                self.contactPhone = contactPhone
                self.isDemoAccountRequired = isDemoAccountRequired
                self.demoAccountName = demoAccountName
                self.demoAccountPassword = demoAccountPassword
                self.contactLastName = contactLastName
            }

            private enum CodingKeys: String, CodingKey {
                case contactFirstName
                case notes
                case contactEmail
                case contactPhone
                case isDemoAccountRequired = "demoAccountRequired"
                case demoAccountName
                case demoAccountPassword
                case contactLastName
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, id: String) {
            self.type = type
            self.attributes = attributes
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

/// JsonPointer
public struct ErrorSourcePointer: Codable {
    public var pointer: String?

    public init(pointer: String? = nil) {
        self.pointer = pointer
    }
}

public struct BetaTesterBetaGroupsLinkagesResponse: Codable {
    public var data: [Datum]
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], meta: PagingInformation? = nil, links: PagedDocumentLinks) {
        self.data = data
        self.meta = meta
        self.links = links
    }
}

public struct CiBuildActionsResponse: Codable {
    public var included: [CiBuildRun]?
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [CiBuildAction]

    public init(included: [CiBuildRun]? = nil, meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [CiBuildAction]) {
        self.included = included
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct BundleIDCapabilitiesResponse: Codable {
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?
    public var data: [BundleIDCapability]

    public init(links: PagedDocumentLinks, meta: PagingInformation? = nil, data: [BundleIDCapability]) {
        self.links = links
        self.meta = meta
        self.data = data
    }
}

public struct AppStoreVersionExperimentTreatmentLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`
        public var relationships: Relationships

        public struct Attributes: Codable {
            public var locale: String

            public init(locale: String) {
                self.locale = locale
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionExperimentTreatmentLocalizations
        }

        public struct Relationships: Codable {
            public var appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment

            public struct AppStoreVersionExperimentTreatment: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperimentTreatments
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment) {
                self.appStoreVersionExperimentTreatment = appStoreVersionExperimentTreatment
            }
        }

        public init(attributes: Attributes, type: `Type`, relationships: Relationships) {
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreReviewDetail: Codable {
    public var relationships: Relationships?
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?
        public var appStoreReviewAttachments: AppStoreReviewAttachments?

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppStoreReviewAttachments: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreReviewAttachments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil, appStoreReviewAttachments: AppStoreReviewAttachments? = nil) {
            self.appStoreVersion = appStoreVersion
            self.appStoreReviewAttachments = appStoreReviewAttachments
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreReviewDetails
    }

    public struct Attributes: Codable {
        public var notes: String?
        public var isDemoAccountRequired: Bool?
        public var demoAccountName: String?
        public var demoAccountPassword: String?
        public var contactFirstName: String?
        public var contactEmail: String?
        public var contactPhone: String?
        public var contactLastName: String?

        public init(notes: String? = nil, isDemoAccountRequired: Bool? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, contactFirstName: String? = nil, contactEmail: String? = nil, contactPhone: String? = nil, contactLastName: String? = nil) {
            self.notes = notes
            self.isDemoAccountRequired = isDemoAccountRequired
            self.demoAccountName = demoAccountName
            self.demoAccountPassword = demoAccountPassword
            self.contactFirstName = contactFirstName
            self.contactEmail = contactEmail
            self.contactPhone = contactPhone
            self.contactLastName = contactLastName
        }

        private enum CodingKeys: String, CodingKey {
            case notes
            case isDemoAccountRequired = "demoAccountRequired"
            case demoAccountName
            case demoAccountPassword
            case contactFirstName
            case contactEmail
            case contactPhone
            case contactLastName
        }
    }

    public init(relationships: Relationships? = nil, type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.relationships = relationships
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct AppStoreVersionExperimentTreatmentUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var type: `Type`
        public var id: String

        public struct Attributes: Codable {
            public var name: String?
            public var appIconName: String?

            public init(name: String? = nil, appIconName: String? = nil) {
                self.name = name
                self.appIconName = appIconName
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionExperimentTreatments
        }

        public init(attributes: Attributes? = nil, type: `Type`, id: String) {
            self.attributes = attributes
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ReviewSubmissionUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var attributes: Attributes?
        public var type: `Type`

        public struct Attributes: Codable {
            public var isSubmitted: Bool?
            public var isCanceled: Bool?

            public init(isSubmitted: Bool? = nil, isCanceled: Bool? = nil) {
                self.isSubmitted = isSubmitted
                self.isCanceled = isCanceled
            }

            private enum CodingKeys: String, CodingKey {
                case isSubmitted = "submitted"
                case isCanceled = "canceled"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case reviewSubmissions
        }

        public init(id: String, attributes: Attributes? = nil, type: `Type`) {
            self.id = id
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionResponse: Codable {
    public var links: DocumentLinks
    /// AppStoreVersion
    public var data: AppStoreVersion
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case app(App)
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case build(Build)
        case appStoreVersionPhasedRelease(AppStoreVersionPhasedRelease)
        case routingAppCoverage(RoutingAppCoverage)
        case appStoreReviewDetail(AppStoreReviewDetail)
        case appStoreVersionSubmission(AppStoreVersionSubmission)
        case idfaDeclaration(IdfaDeclaration)
        case appClipDefaultExperience(AppClipDefaultExperience)
        case appStoreVersionExperiment(AppStoreVersionExperiment)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AgeRatingDeclaration.self) {
                self = .ageRatingDeclaration(value)
            } else if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(AppStoreVersionPhasedRelease.self) {
                self = .appStoreVersionPhasedRelease(value)
            } else if let value = try? container.decode(RoutingAppCoverage.self) {
                self = .routingAppCoverage(value)
            } else if let value = try? container.decode(AppStoreReviewDetail.self) {
                self = .appStoreReviewDetail(value)
            } else if let value = try? container.decode(AppStoreVersionSubmission.self) {
                self = .appStoreVersionSubmission(value)
            } else if let value = try? container.decode(IdfaDeclaration.self) {
                self = .idfaDeclaration(value)
            } else if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .ageRatingDeclaration(let value): try container.encode(value)
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .appStoreVersionPhasedRelease(let value): try container.encode(value)
            case .routingAppCoverage(let value): try container.encode(value)
            case .appStoreReviewDetail(let value): try container.encode(value)
            case .appStoreVersionSubmission(let value): try container.encode(value)
            case .idfaDeclaration(let value): try container.encode(value)
            case .appClipDefaultExperience(let value): try container.encode(value)
            case .appStoreVersionExperiment(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, data: AppStoreVersion, included: [IncludedItem]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct BuildsResponse: Codable {
    public var included: [IncludedItem]?
    public var meta: PagingInformation?
    public var data: [Build]
    public var links: PagedDocumentLinks

    public enum IncludedItem: Codable {
        case prereleaseVersion(PrereleaseVersion)
        case betaTester(BetaTester)
        case betaBuildLocalization(BetaBuildLocalization)
        case appEncryptionDeclaration(AppEncryptionDeclaration)
        case betaAppReviewSubmission(BetaAppReviewSubmission)
        case app(App)
        case buildBetaDetail(BuildBetaDetail)
        case appStoreVersion(AppStoreVersion)
        case buildIcon(BuildIcon)
        case buildBundle(BuildBundle)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else if let value = try? container.decode(BetaBuildLocalization.self) {
                self = .betaBuildLocalization(value)
            } else if let value = try? container.decode(AppEncryptionDeclaration.self) {
                self = .appEncryptionDeclaration(value)
            } else if let value = try? container.decode(BetaAppReviewSubmission.self) {
                self = .betaAppReviewSubmission(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BuildBetaDetail.self) {
                self = .buildBetaDetail(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(BuildIcon.self) {
                self = .buildIcon(value)
            } else if let value = try? container.decode(BuildBundle.self) {
                self = .buildBundle(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            case .betaBuildLocalization(let value): try container.encode(value)
            case .appEncryptionDeclaration(let value): try container.encode(value)
            case .betaAppReviewSubmission(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            case .buildBetaDetail(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .buildIcon(let value): try container.encode(value)
            case .buildBundle(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, meta: PagingInformation? = nil, data: [Build], links: PagedDocumentLinks) {
        self.included = included
        self.meta = meta
        self.data = data
        self.links = links
    }
}

public struct AppPricePointResponse: Codable {
    public var links: DocumentLinks
    /// AppPricePoint
    public var data: AppPricePoint
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case appPriceTier(AppPriceTier)
        case territory(Territory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppPriceTier.self) {
                self = .appPriceTier(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appPriceTier(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, data: AppPricePoint, included: [IncludedItem]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct AppEventCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var attributes: Attributes
        public var type: `Type`

        public struct Relationships: Codable {
            public var app: App

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App) {
                self.app = app
            }
        }

        public struct Attributes: Codable {
            public var badge: Badge?
            public var purchaseRequirement: PurchaseRequirement?
            public var priority: Priority?
            public var deepLink: URL?
            public var purpose: Purpose?
            public var territorySchedules: [TerritorySchedule]?
            public var primaryLocale: String?
            public var referenceName: String

            public enum Badge: String, Codable, CaseIterable {
                case liveEvent = "LIVE_EVENT"
                case premiere = "PREMIERE"
                case challenge = "CHALLENGE"
                case competition = "COMPETITION"
                case newSeason = "NEW_SEASON"
                case majorUpdate = "MAJOR_UPDATE"
                case specialEvent = "SPECIAL_EVENT"
            }

            public enum PurchaseRequirement: String, Codable, CaseIterable {
                case noCostAssociated = "NO_COST_ASSOCIATED"
                case inAppPurchase = "IN_APP_PURCHASE"
                case subscription = "SUBSCRIPTION"
                case inAppPurchaseAndSubscription = "IN_APP_PURCHASE_AND_SUBSCRIPTION"
                case inAppPurchaseOrSubscription = "IN_APP_PURCHASE_OR_SUBSCRIPTION"
            }

            public enum Priority: String, Codable, CaseIterable {
                case high = "HIGH"
                case normal = "NORMAL"
            }

            public enum Purpose: String, Codable, CaseIterable {
                case appropriateForAllUsers = "APPROPRIATE_FOR_ALL_USERS"
                case attractNewUsers = "ATTRACT_NEW_USERS"
                case keepActiveUsersInformed = "KEEP_ACTIVE_USERS_INFORMED"
                case bringBackLapsedUsers = "BRING_BACK_LAPSED_USERS"
            }

            public struct TerritorySchedule: Codable {
                public var territories: [String]?
                public var eventStart: Date?
                public var publishStart: Date?
                public var eventEnd: Date?

                public init(territories: [String]? = nil, eventStart: Date? = nil, publishStart: Date? = nil, eventEnd: Date? = nil) {
                    self.territories = territories
                    self.eventStart = eventStart
                    self.publishStart = publishStart
                    self.eventEnd = eventEnd
                }
            }

            public init(badge: Badge? = nil, purchaseRequirement: PurchaseRequirement? = nil, priority: Priority? = nil, deepLink: URL? = nil, purpose: Purpose? = nil, territorySchedules: [TerritorySchedule]? = nil, primaryLocale: String? = nil, referenceName: String) {
                self.badge = badge
                self.purchaseRequirement = purchaseRequirement
                self.priority = priority
                self.deepLink = deepLink
                self.purpose = purpose
                self.territorySchedules = territorySchedules
                self.primaryLocale = primaryLocale
                self.referenceName = referenceName
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appEvents
        }

        public init(relationships: Relationships, attributes: Attributes, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var feedbackEmail: String?
            public var description: String?
            public var marketingURL: String?
            public var tvOsPrivacyPolicy: String?
            public var privacyPolicyURL: String?

            public init(feedbackEmail: String? = nil, description: String? = nil, marketingURL: String? = nil, tvOsPrivacyPolicy: String? = nil, privacyPolicyURL: String? = nil) {
                self.feedbackEmail = feedbackEmail
                self.description = description
                self.marketingURL = marketingURL
                self.tvOsPrivacyPolicy = tvOsPrivacyPolicy
                self.privacyPolicyURL = privacyPolicyURL
            }

            private enum CodingKeys: String, CodingKey {
                case feedbackEmail
                case description
                case marketingURL = "marketingUrl"
                case tvOsPrivacyPolicy
                case privacyPolicyURL = "privacyPolicyUrl"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppLocalizations
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ReviewSubmissionsResponse: Codable {
    public var data: [ReviewSubmission]
    public var links: PagedDocumentLinks
    public var included: [IncludedItem]?
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case reviewSubmissionItem(ReviewSubmissionItem)
        case appStoreVersion(AppStoreVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(ReviewSubmissionItem.self) {
                self = .reviewSubmissionItem(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .reviewSubmissionItem(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            }
        }
    }

    public init(data: [ReviewSubmission], links: PagedDocumentLinks, included: [IncludedItem]? = nil, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.included = included
        self.meta = meta
    }
}

public enum ExternalBetaState: String, Codable, CaseIterable {
    case processing = "PROCESSING"
    case processingException = "PROCESSING_EXCEPTION"
    case missingExportCompliance = "MISSING_EXPORT_COMPLIANCE"
    case readyForBetaTesting = "READY_FOR_BETA_TESTING"
    case inBetaTesting = "IN_BETA_TESTING"
    case expired = "EXPIRED"
    case readyForBetaSubmission = "READY_FOR_BETA_SUBMISSION"
    case inExportComplianceReview = "IN_EXPORT_COMPLIANCE_REVIEW"
    case waitingForBetaReview = "WAITING_FOR_BETA_REVIEW"
    case inBetaReview = "IN_BETA_REVIEW"
    case betaRejected = "BETA_REJECTED"
    case betaApproved = "BETA_APPROVED"
}

public enum AppClipAdvancedExperienceLanguage: String, Codable, CaseIterable {
    case ar = "AR"
    case ca = "CA"
    case cs = "CS"
    case da = "DA"
    case de = "DE"
    case el = "EL"
    case en = "EN"
    case es = "ES"
    case fi = "FI"
    case fr = "FR"
    case he = "HE"
    case hi = "HI"
    case hr = "HR"
    case hu = "HU"
    case id = "ID"
    case it = "IT"
    case ja = "JA"
    case ko = "KO"
    case ms = "MS"
    case nl = "NL"
    case no = "NO"
    case pl = "PL"
    case pt = "PT"
    case ro = "RO"
    case ru = "RU"
    case sk = "SK"
    case sv = "SV"
    case th = "TH"
    case tr = "TR"
    case uk = "UK"
    case vi = "VI"
    case zh = "ZH"
}

public struct AppStoreVersionPhasedReleaseResponse: Codable {
    public var links: DocumentLinks
    /// AppStoreVersionPhasedRelease
    public var data: AppStoreVersionPhasedRelease

    public init(links: DocumentLinks, data: AppStoreVersionPhasedRelease) {
        self.links = links
        self.data = data
    }
}

public struct BetaGroupBetaTestersLinkagesResponse: Codable {
    public var meta: PagingInformation?
    public var data: [Datum]
    public var links: PagedDocumentLinks

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(meta: PagingInformation? = nil, data: [Datum], links: PagedDocumentLinks) {
        self.meta = meta
        self.data = data
        self.links = links
    }
}

public struct PagingInformation: Codable {
    public var paging: Paging

    public struct Paging: Codable {
        public var limit: Int
        public var total: Int

        public init(limit: Int, total: Int) {
            self.limit = limit
            self.total = total
        }
    }

    public init(paging: Paging) {
        self.paging = paging
    }
}

public struct BetaAppReviewDetail: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppReviewDetails
    }

    public struct Attributes: Codable {
        public var demoAccountName: String?
        public var contactEmail: String?
        public var notes: String?
        public var contactFirstName: String?
        public var isDemoAccountRequired: Bool?
        public var contactPhone: String?
        public var demoAccountPassword: String?
        public var contactLastName: String?

        public init(demoAccountName: String? = nil, contactEmail: String? = nil, notes: String? = nil, contactFirstName: String? = nil, isDemoAccountRequired: Bool? = nil, contactPhone: String? = nil, demoAccountPassword: String? = nil, contactLastName: String? = nil) {
            self.demoAccountName = demoAccountName
            self.contactEmail = contactEmail
            self.notes = notes
            self.contactFirstName = contactFirstName
            self.isDemoAccountRequired = isDemoAccountRequired
            self.contactPhone = contactPhone
            self.demoAccountPassword = demoAccountPassword
            self.contactLastName = contactLastName
        }

        private enum CodingKeys: String, CodingKey {
            case demoAccountName
            case contactEmail
            case notes
            case contactFirstName
            case isDemoAccountRequired = "demoAccountRequired"
            case contactPhone
            case demoAccountPassword
            case contactLastName
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks, relationships: Relationships? = nil) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
        self.relationships = relationships
    }
}

public struct AppClipAppStoreReviewDetailCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`
        public var attributes: Attributes?

        public struct Relationships: Codable {
            public var appClipDefaultExperience: AppClipDefaultExperience

            public struct AppClipDefaultExperience: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipDefaultExperiences
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appClipDefaultExperience: AppClipDefaultExperience) {
                self.appClipDefaultExperience = appClipDefaultExperience
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAppStoreReviewDetails
        }

        public struct Attributes: Codable {
            public var invocationURLs: [URL]?

            public init(invocationURLs: [URL]? = nil) {
                self.invocationURLs = invocationURLs
            }

            private enum CodingKeys: String, CodingKey {
                case invocationURLs = "invocationUrls"
            }
        }

        public init(relationships: Relationships, type: `Type`, attributes: Attributes? = nil) {
            self.relationships = relationships
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDefaultExperienceUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var attributes: Attributes?
        public var type: `Type`
        public var relationships: Relationships?

        public struct Attributes: Codable {
            public var action: AppClipAction?

            public init(action: AppClipAction? = nil) {
                self.action = action
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperiences
        }

        public struct Relationships: Codable {
            public var releaseWithAppStoreVersion: ReleaseWithAppStoreVersion?

            public struct ReleaseWithAppStoreVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(releaseWithAppStoreVersion: ReleaseWithAppStoreVersion? = nil) {
                self.releaseWithAppStoreVersion = releaseWithAppStoreVersion
            }
        }

        public init(id: String, attributes: Attributes? = nil, type: `Type`, relationships: Relationships? = nil) {
            self.id = id
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionExperimentCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships
        public var attributes: Attributes

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionExperiments
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public struct Attributes: Codable {
            public var trafficProportion: Int
            public var name: String

            public init(trafficProportion: Int, name: String) {
                self.trafficProportion = trafficProportion
                self.name = name
            }
        }

        public init(type: `Type`, relationships: Relationships, attributes: Attributes) {
            self.type = type
            self.relationships = relationships
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ScmGitReference: Codable {
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var attributes: Attributes?

    public enum `Type`: String, Codable, CaseIterable {
        case scmGitReferences
    }

    public struct Relationships: Codable {
        public var repository: Repository?

        public struct Repository: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmRepositories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(repository: Repository? = nil) {
            self.repository = repository
        }
    }

    public struct Attributes: Codable {
        public var kind: CiGitRefKind?
        public var canonicalName: String?
        public var name: String?
        public var isDeleted: Bool?

        public init(kind: CiGitRefKind? = nil, canonicalName: String? = nil, name: String? = nil, isDeleted: Bool? = nil) {
            self.kind = kind
            self.canonicalName = canonicalName
            self.name = name
            self.isDeleted = isDeleted
        }
    }

    public init(type: `Type`, id: String, links: ResourceLinks, relationships: Relationships? = nil, attributes: Attributes? = nil) {
        self.type = type
        self.id = id
        self.links = links
        self.relationships = relationships
        self.attributes = attributes
    }
}

public struct DocumentLinks: Codable {
    public var this: String

    public init(this: String) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct BuildBetaDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case buildBetaDetails
        }

        public struct Attributes: Codable {
            public var isAutoNotifyEnabled: Bool?

            public init(isAutoNotifyEnabled: Bool? = nil) {
                self.isAutoNotifyEnabled = isAutoNotifyEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case isAutoNotifyEnabled = "autoNotifyEnabled"
            }
        }

        public init(id: String, type: `Type`, attributes: Attributes? = nil) {
            self.id = id
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ReviewSubmissionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes
        public var relationships: Relationships

        public enum `Type`: String, Codable, CaseIterable {
            case reviewSubmissions
        }

        public struct Attributes: Codable {
            public var platform: Platform

            public init(platform: Platform) {
                self.platform = platform
            }
        }

        public struct Relationships: Codable {
            public var app: App

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App) {
                self.app = app
            }
        }

        public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionBuildLinkageRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildBetaDetailsResponse: Codable {
    public var included: [Build]?
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [BuildBetaDetail]

    public init(included: [Build]? = nil, meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [BuildBetaDetail]) {
        self.included = included
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public enum CiTestStatus: String, Codable, CaseIterable {
    case success = "SUCCESS"
    case failure = "FAILURE"
    case mixed = "MIXED"
    case skipped = "SKIPPED"
    case expectedFailure = "EXPECTED_FAILURE"
}

public struct AppPreviewUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public struct Attributes: Codable {
            public var isUploaded: Bool?
            public var previewFrameTimeCode: String?
            public var sourceFileChecksum: String?

            public init(isUploaded: Bool? = nil, previewFrameTimeCode: String? = nil, sourceFileChecksum: String? = nil) {
                self.isUploaded = isUploaded
                self.previewFrameTimeCode = previewFrameTimeCode
                self.sourceFileChecksum = sourceFileChecksum
            }

            private enum CodingKeys: String, CodingKey {
                case isUploaded = "uploaded"
                case previewFrameTimeCode
                case sourceFileChecksum
            }
        }

        public init(id: String, type: `Type`, attributes: Attributes? = nil) {
            self.id = id
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionBuildLinkageResponse: Codable {
    public var data: Data
    public var links: DocumentLinks

    public struct Data: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: Data, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct TerritoriesResponse: Codable {
    public var data: [Territory]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [Territory], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BuildUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships?
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public struct Relationships: Codable {
            public var appEncryptionDeclaration: AppEncryptionDeclaration?

            public struct AppEncryptionDeclaration: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEncryptionDeclarations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appEncryptionDeclaration: AppEncryptionDeclaration? = nil) {
                self.appEncryptionDeclaration = appEncryptionDeclaration
            }
        }

        public struct Attributes: Codable {
            public var usesNonExemptEncryption: Bool?
            public var isExpired: Bool?

            public init(usesNonExemptEncryption: Bool? = nil, isExpired: Bool? = nil) {
                self.usesNonExemptEncryption = usesNonExemptEncryption
                self.isExpired = isExpired
            }

            private enum CodingKeys: String, CodingKey {
                case usesNonExemptEncryption
                case isExpired = "expired"
            }
        }

        public init(type: `Type`, relationships: Relationships? = nil, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.relationships = relationships
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse: Codable {
    public var links: DocumentLinks
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersions
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(links: DocumentLinks, data: Data) {
        self.links = links
        self.data = data
    }
}

public struct UserVisibleAppsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct UserVisibleAppsLinkagesResponse: Codable {
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(links: PagedDocumentLinks, meta: PagingInformation? = nil, data: [Datum]) {
        self.links = links
        self.meta = meta
        self.data = data
    }
}

public struct AppStoreVersion: Codable {
    public var links: ResourceLinks
    public var id: String
    public var relationships: Relationships?
    public var type: `Type`
    public var attributes: Attributes?

    public struct Relationships: Codable {
        public var build: Build?
        public var app: App?
        public var routingAppCoverage: RoutingAppCoverage?
        public var appStoreVersionPhasedRelease: AppStoreVersionPhasedRelease?
        /// - warning: Deprecated.
        public var ageRatingDeclaration: AgeRatingDeclaration?
        public var appStoreVersionLocalizations: AppStoreVersionLocalizations?
        public var appStoreVersionExperiments: AppStoreVersionExperiments?
        public var appClipDefaultExperience: AppClipDefaultExperience?
        public var appStoreReviewDetail: AppStoreReviewDetail?
        public var appStoreVersionSubmission: AppStoreVersionSubmission?
        public var idfaDeclaration: IdfaDeclaration?

        public struct Build: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct RoutingAppCoverage: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case routingAppCoverages
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersionPhasedRelease: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionPhasedReleases
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        @available(*, deprecated, message: "Deprecated")
        public struct AgeRatingDeclaration: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case ageRatingDeclarations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersionLocalizations: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public struct AppStoreVersionExperiments: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperiments
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public struct AppClipDefaultExperience: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperiences
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreReviewDetail: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreReviewDetails
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersionSubmission: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionSubmissions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct IdfaDeclaration: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case idfaDeclarations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(build: Build? = nil, app: App? = nil, routingAppCoverage: RoutingAppCoverage? = nil, appStoreVersionPhasedRelease: AppStoreVersionPhasedRelease? = nil, ageRatingDeclaration: AgeRatingDeclaration? = nil, appStoreVersionLocalizations: AppStoreVersionLocalizations? = nil, appStoreVersionExperiments: AppStoreVersionExperiments? = nil, appClipDefaultExperience: AppClipDefaultExperience? = nil, appStoreReviewDetail: AppStoreReviewDetail? = nil, appStoreVersionSubmission: AppStoreVersionSubmission? = nil, idfaDeclaration: IdfaDeclaration? = nil) {
            self.build = build
            self.app = app
            self.routingAppCoverage = routingAppCoverage
            self.appStoreVersionPhasedRelease = appStoreVersionPhasedRelease
            self.ageRatingDeclaration = ageRatingDeclaration
            self.appStoreVersionLocalizations = appStoreVersionLocalizations
            self.appStoreVersionExperiments = appStoreVersionExperiments
            self.appClipDefaultExperience = appClipDefaultExperience
            self.appStoreReviewDetail = appStoreReviewDetail
            self.appStoreVersionSubmission = appStoreVersionSubmission
            self.idfaDeclaration = idfaDeclaration
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersions
    }

    public struct Attributes: Codable {
        public var releaseType: ReleaseType?
        public var copyright: String?
        public var platform: Platform?
        public var versionString: String?
        /// - warning: Deprecated.
        public var usesIdfa: Bool?
        public var isDownloadable: Bool?
        public var createdDate: Date?
        public var appStoreState: AppStoreVersionState?
        public var earliestReleaseDate: Date?

        public enum ReleaseType: String, Codable, CaseIterable {
            case manual = "MANUAL"
            case afterApproval = "AFTER_APPROVAL"
            case scheduled = "SCHEDULED"
        }

        public init(releaseType: ReleaseType? = nil, copyright: String? = nil, platform: Platform? = nil, versionString: String? = nil, usesIdfa: Bool? = nil, isDownloadable: Bool? = nil, createdDate: Date? = nil, appStoreState: AppStoreVersionState? = nil, earliestReleaseDate: Date? = nil) {
            self.releaseType = releaseType
            self.copyright = copyright
            self.platform = platform
            self.versionString = versionString
            self.usesIdfa = usesIdfa
            self.isDownloadable = isDownloadable
            self.createdDate = createdDate
            self.appStoreState = appStoreState
            self.earliestReleaseDate = earliestReleaseDate
        }

        private enum CodingKeys: String, CodingKey {
            case releaseType
            case copyright
            case platform
            case versionString
            case usesIdfa
            case isDownloadable = "downloadable"
            case createdDate
            case appStoreState
            case earliestReleaseDate
        }
    }

    public init(links: ResourceLinks, id: String, relationships: Relationships? = nil, type: `Type`, attributes: Attributes? = nil) {
        self.links = links
        self.id = id
        self.relationships = relationships
        self.type = type
        self.attributes = attributes
    }
}

public struct BuildBetaDetailResponse: Codable {
    /// BuildBetaDetail
    public var data: BuildBetaDetail
    public var included: [Build]?
    public var links: DocumentLinks

    public init(data: BuildBetaDetail, included: [Build]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct CapabilityOption: Codable {
    public var description: String?
    public var isEnabledByDefault: Bool?
    public var key: Key?
    public var isEnabled: Bool?
    public var name: String?
    public var isSupportsWildcard: Bool?

    public enum Key: String, Codable, CaseIterable {
        case xcode5 = "XCODE_5"
        case xcode6 = "XCODE_6"
        case completeProtection = "COMPLETE_PROTECTION"
        case protectedUnlessOpen = "PROTECTED_UNLESS_OPEN"
        case protectedUntilFirstUserAuth = "PROTECTED_UNTIL_FIRST_USER_AUTH"
        case primaryAppConsent = "PRIMARY_APP_CONSENT"
    }

    public init(description: String? = nil, isEnabledByDefault: Bool? = nil, key: Key? = nil, isEnabled: Bool? = nil, name: String? = nil, isSupportsWildcard: Bool? = nil) {
        self.description = description
        self.isEnabledByDefault = isEnabledByDefault
        self.key = key
        self.isEnabled = isEnabled
        self.name = name
        self.isSupportsWildcard = isSupportsWildcard
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case isEnabledByDefault = "enabledByDefault"
        case key
        case isEnabled = "enabled"
        case name
        case isSupportsWildcard = "supportsWildcard"
    }
}

public struct CiArtifactResponse: Codable {
    /// CiArtifact
    public var data: CiArtifact
    public var links: DocumentLinks

    public init(data: CiArtifact, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppInfoLocalizationResponse: Codable {
    /// AppInfoLocalization
    public var data: AppInfoLocalization
    public var included: [AppInfo]?
    public var links: DocumentLinks

    public init(data: AppInfoLocalization, included: [AppInfo]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppStoreReviewDetailCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`
        public var attributes: Attributes?

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewDetails
        }

        public struct Attributes: Codable {
            public var contactFirstName: String?
            public var contactEmail: String?
            public var contactLastName: String?
            public var isDemoAccountRequired: Bool?
            public var demoAccountName: String?
            public var contactPhone: String?
            public var demoAccountPassword: String?
            public var notes: String?

            public init(contactFirstName: String? = nil, contactEmail: String? = nil, contactLastName: String? = nil, isDemoAccountRequired: Bool? = nil, demoAccountName: String? = nil, contactPhone: String? = nil, demoAccountPassword: String? = nil, notes: String? = nil) {
                self.contactFirstName = contactFirstName
                self.contactEmail = contactEmail
                self.contactLastName = contactLastName
                self.isDemoAccountRequired = isDemoAccountRequired
                self.demoAccountName = demoAccountName
                self.contactPhone = contactPhone
                self.demoAccountPassword = demoAccountPassword
                self.notes = notes
            }

            private enum CodingKeys: String, CodingKey {
                case contactFirstName
                case contactEmail
                case contactLastName
                case isDemoAccountRequired = "demoAccountRequired"
                case demoAccountName
                case contactPhone
                case demoAccountPassword
                case notes
            }
        }

        public init(relationships: Relationships, type: `Type`, attributes: Attributes? = nil) {
            self.relationships = relationships
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public enum CertificateType: String, Codable, CaseIterable {
    case iosDevelopment = "IOS_DEVELOPMENT"
    case iosDistribution = "IOS_DISTRIBUTION"
    case macAppDistribution = "MAC_APP_DISTRIBUTION"
    case macInstallerDistribution = "MAC_INSTALLER_DISTRIBUTION"
    case macAppDevelopment = "MAC_APP_DEVELOPMENT"
    case developerIDKext = "DEVELOPER_ID_KEXT"
    case developerIDApplication = "DEVELOPER_ID_APPLICATION"
    case development = "DEVELOPMENT"
    case distribution = "DISTRIBUTION"
    case passTypeID = "PASS_TYPE_ID"
    case passTypeIDWithNfc = "PASS_TYPE_ID_WITH_NFC"
}

public struct AppPriceTier: Codable {
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`
    public var id: String

    public struct Relationships: Codable {
        public var pricePoints: PricePoints?

        public struct PricePoints: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPricePoints
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(pricePoints: PricePoints? = nil) {
            self.pricePoints = pricePoints
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appPriceTiers
    }

    public init(links: ResourceLinks, relationships: Relationships? = nil, type: `Type`, id: String) {
        self.links = links
        self.relationships = relationships
        self.type = type
        self.id = id
    }
}

public struct BetaAppClipInvocationCreateRequest: Codable {
    public var data: Data
    public var included: [BetaAppClipInvocationLocalizationInlineCreate]?

    public struct Data: Codable {
        public var relationships: Relationships
        public var attributes: Attributes
        public var type: `Type`

        public struct Relationships: Codable {
            public var buildBundle: BuildBundle
            public var betaAppClipInvocationLocalizations: BetaAppClipInvocationLocalizations

            public struct BuildBundle: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case buildBundles
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct BetaAppClipInvocationLocalizations: Codable {
                public var data: [Datum]

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaAppClipInvocationLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public init(buildBundle: BuildBundle, betaAppClipInvocationLocalizations: BetaAppClipInvocationLocalizations) {
                self.buildBundle = buildBundle
                self.betaAppClipInvocationLocalizations = betaAppClipInvocationLocalizations
            }
        }

        public struct Attributes: Codable {
            public var url: URL

            public init(url: URL) {
                self.url = url
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppClipInvocations
        }

        public init(relationships: Relationships, attributes: Attributes, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data, included: [BetaAppClipInvocationLocalizationInlineCreate]? = nil) {
        self.data = data
        self.included = included
    }
}

public struct AppStoreVersionPhasedReleaseUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var phasedReleaseState: PhasedReleaseState?

            public init(phasedReleaseState: PhasedReleaseState? = nil) {
                self.phasedReleaseState = phasedReleaseState
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionPhasedReleases
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ReviewSubmission: Codable {
    public var attributes: Attributes?
    public var links: ResourceLinks
    public var id: String
    public var type: `Type`
    public var relationships: Relationships?

    public struct Attributes: Codable {
        public var submittedDate: Date?
        public var state: State?
        public var platform: Platform?

        public enum State: String, Codable, CaseIterable {
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case unresolvedIssues = "UNRESOLVED_ISSUES"
            case canceling = "CANCELING"
            case completing = "COMPLETING"
            case complete = "COMPLETE"
        }

        public init(submittedDate: Date? = nil, state: State? = nil, platform: Platform? = nil) {
            self.submittedDate = submittedDate
            self.state = state
            self.platform = platform
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case reviewSubmissions
    }

    public struct Relationships: Codable {
        public var app: App?
        public var items: Items?
        public var appStoreVersionForReview: AppStoreVersionForReview?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Items: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case reviewSubmissionItems
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AppStoreVersionForReview: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil, items: Items? = nil, appStoreVersionForReview: AppStoreVersionForReview? = nil) {
            self.app = app
            self.items = items
            self.appStoreVersionForReview = appStoreVersionForReview
        }
    }

    public init(attributes: Attributes? = nil, links: ResourceLinks, id: String, type: `Type`, relationships: Relationships? = nil) {
        self.attributes = attributes
        self.links = links
        self.id = id
        self.type = type
        self.relationships = relationships
    }
}

public struct BundleIDCapabilityUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var settings: [CapabilitySetting]?
            public var capabilityType: CapabilityType?

            public init(settings: [CapabilitySetting]? = nil, capabilityType: CapabilityType? = nil) {
                self.settings = settings
                self.capabilityType = capabilityType
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDCapabilities = "bundleIdCapabilities"
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDefaultExperienceCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var type: `Type`
        public var relationships: Relationships

        public struct Attributes: Codable {
            public var action: AppClipAction?

            public init(action: AppClipAction? = nil) {
                self.action = action
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperiences
        }

        public struct Relationships: Codable {
            public var appClip: AppClip
            public var releaseWithAppStoreVersion: ReleaseWithAppStoreVersion?
            public var appClipDefaultExperienceTemplate: AppClipDefaultExperienceTemplate?

            public struct AppClip: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClips
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct ReleaseWithAppStoreVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppClipDefaultExperienceTemplate: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipDefaultExperiences
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appClip: AppClip, releaseWithAppStoreVersion: ReleaseWithAppStoreVersion? = nil, appClipDefaultExperienceTemplate: AppClipDefaultExperienceTemplate? = nil) {
                self.appClip = appClip
                self.releaseWithAppStoreVersion = releaseWithAppStoreVersion
                self.appClipDefaultExperienceTemplate = appClipDefaultExperienceTemplate
            }
        }

        public init(attributes: Attributes? = nil, type: `Type`, relationships: Relationships) {
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct DeviceUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var name: String?
            public var status: Status?

            public enum Status: String, Codable, CaseIterable {
                case enabled = "ENABLED"
                case disabled = "DISABLED"
            }

            public init(name: String? = nil, status: Status? = nil) {
                self.name = name
                self.status = status
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case devices
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppLocalization: Codable {
    public var type: `Type`
    public var relationships: Relationships?
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppLocalizations
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public struct Attributes: Codable {
        public var privacyPolicyURL: String?
        public var locale: String?
        public var feedbackEmail: String?
        public var tvOsPrivacyPolicy: String?
        public var marketingURL: String?
        public var description: String?

        public init(privacyPolicyURL: String? = nil, locale: String? = nil, feedbackEmail: String? = nil, tvOsPrivacyPolicy: String? = nil, marketingURL: String? = nil, description: String? = nil) {
            self.privacyPolicyURL = privacyPolicyURL
            self.locale = locale
            self.feedbackEmail = feedbackEmail
            self.tvOsPrivacyPolicy = tvOsPrivacyPolicy
            self.marketingURL = marketingURL
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case privacyPolicyURL = "privacyPolicyUrl"
            case locale
            case feedbackEmail
            case tvOsPrivacyPolicy
            case marketingURL = "marketingUrl"
            case description
        }
    }

    public init(type: `Type`, relationships: Relationships? = nil, attributes: Attributes? = nil, id: String, links: ResourceLinks) {
        self.type = type
        self.relationships = relationships
        self.attributes = attributes
        self.id = id
        self.links = links
    }
}

public struct AppCustomProductPageVersion: Codable {
    public var type: `Type`
    public var attributes: Attributes?
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case appCustomProductPageVersions
    }

    public struct Attributes: Codable {
        public var version: String?
        public var state: State?

        public enum State: String, Codable, CaseIterable {
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case accepted = "ACCEPTED"
            case approved = "APPROVED"
            case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
            case rejected = "REJECTED"
        }

        public init(version: String? = nil, state: State? = nil) {
            self.version = version
            self.state = state
        }
    }

    public struct Relationships: Codable {
        public var appCustomProductPageLocalizations: AppCustomProductPageLocalizations?
        public var appCustomProductPage: AppCustomProductPage?

        public struct AppCustomProductPageLocalizations: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public struct AppCustomProductPage: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPages
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appCustomProductPageLocalizations: AppCustomProductPageLocalizations? = nil, appCustomProductPage: AppCustomProductPage? = nil) {
            self.appCustomProductPageLocalizations = appCustomProductPageLocalizations
            self.appCustomProductPage = appCustomProductPage
        }
    }

    public init(type: `Type`, attributes: Attributes? = nil, links: ResourceLinks, relationships: Relationships? = nil, id: String) {
        self.type = type
        self.attributes = attributes
        self.links = links
        self.relationships = relationships
        self.id = id
    }
}

public struct AppStoreVersionExperimentTreatmentLocalization: Codable {
    public var type: `Type`
    public var relationships: Relationships?
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionExperimentTreatmentLocalizations
    }

    public struct Relationships: Codable {
        public var appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment?
        public var appScreenshotSets: AppScreenshotSets?
        public var appPreviewSets: AppPreviewSets?

        public struct AppStoreVersionExperimentTreatment: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperimentTreatments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppScreenshotSets: Codable {
            public var meta: PagingInformation?
            public var data: [Datum]?
            public var links: Links?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshotSets
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil, links: Links? = nil) {
                self.meta = meta
                self.data = data
                self.links = links
            }
        }

        public struct AppPreviewSets: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviewSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment? = nil, appScreenshotSets: AppScreenshotSets? = nil, appPreviewSets: AppPreviewSets? = nil) {
            self.appStoreVersionExperimentTreatment = appStoreVersionExperimentTreatment
            self.appScreenshotSets = appScreenshotSets
            self.appPreviewSets = appPreviewSets
        }
    }

    public struct Attributes: Codable {
        public var locale: String?

        public init(locale: String? = nil) {
            self.locale = locale
        }
    }

    public init(type: `Type`, relationships: Relationships? = nil, attributes: Attributes? = nil, id: String, links: ResourceLinks) {
        self.type = type
        self.relationships = relationships
        self.attributes = attributes
        self.id = id
        self.links = links
    }
}

public struct AppEventLocalization: Codable {
    public var relationships: Relationships?
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`
    public var links: ResourceLinks

    public struct Relationships: Codable {
        public var appEventScreenshots: AppEventScreenshots?
        public var appEvent: AppEvent?
        public var appEventVideoClips: AppEventVideoClips?

        public struct AppEventScreenshots: Codable {
            public var data: [Datum]?
            public var meta: PagingInformation?
            public var links: Links?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appEventScreenshots
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, meta: PagingInformation? = nil, links: Links? = nil) {
                self.data = data
                self.meta = meta
                self.links = links
            }
        }

        public struct AppEvent: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appEvents
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppEventVideoClips: Codable {
            public var meta: PagingInformation?
            public var data: [Datum]?
            public var links: Links?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appEventVideoClips
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil, links: Links? = nil) {
                self.meta = meta
                self.data = data
                self.links = links
            }
        }

        public init(appEventScreenshots: AppEventScreenshots? = nil, appEvent: AppEvent? = nil, appEventVideoClips: AppEventVideoClips? = nil) {
            self.appEventScreenshots = appEventScreenshots
            self.appEvent = appEvent
            self.appEventVideoClips = appEventVideoClips
        }
    }

    public struct Attributes: Codable {
        public var shortDescription: String?
        public var locale: String?
        public var name: String?
        public var longDescription: String?

        public init(shortDescription: String? = nil, locale: String? = nil, name: String? = nil, longDescription: String? = nil) {
            self.shortDescription = shortDescription
            self.locale = locale
            self.name = name
            self.longDescription = longDescription
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appEventLocalizations
    }

    public init(relationships: Relationships? = nil, attributes: Attributes? = nil, id: String, type: `Type`, links: ResourceLinks) {
        self.relationships = relationships
        self.attributes = attributes
        self.id = id
        self.type = type
        self.links = links
    }
}

public struct AppClipAdvancedExperienceLocalization: Codable {
    public var attributes: Attributes?
    public var links: ResourceLinks
    public var type: `Type`
    public var id: String

    public struct Attributes: Codable {
        public var language: AppClipAdvancedExperienceLanguage?
        public var title: String?
        public var subtitle: String?

        public init(language: AppClipAdvancedExperienceLanguage? = nil, title: String? = nil, subtitle: String? = nil) {
            self.language = language
            self.title = title
            self.subtitle = subtitle
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appClipAdvancedExperienceLocalizations
    }

    public init(attributes: Attributes? = nil, links: ResourceLinks, type: `Type`, id: String) {
        self.attributes = attributes
        self.links = links
        self.type = type
        self.id = id
    }
}

public struct AppClipHeaderImageCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`
        public var attributes: Attributes

        public struct Relationships: Codable {
            public var appClipDefaultExperienceLocalization: AppClipDefaultExperienceLocalization

            public struct AppClipDefaultExperienceLocalization: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipDefaultExperienceLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appClipDefaultExperienceLocalization: AppClipDefaultExperienceLocalization) {
                self.appClipDefaultExperienceLocalization = appClipDefaultExperienceLocalization
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipHeaderImages
        }

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String

            public init(fileSize: Int, fileName: String) {
                self.fileSize = fileSize
                self.fileName = fileName
            }
        }

        public init(relationships: Relationships, type: `Type`, attributes: Attributes) {
            self.relationships = relationships
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ResourceLinks: Codable {
    public var this: String

    public init(this: String) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct BundleID: Codable {
    public var links: ResourceLinks
    public var type: `Type`
    public var attributes: Attributes?
    public var id: String
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case bundleIDs = "bundleIds"
    }

    public struct Attributes: Codable {
        public var name: String?
        public var platform: BundleIDPlatform?
        public var identifier: String?
        public var seedID: String?

        public init(name: String? = nil, platform: BundleIDPlatform? = nil, identifier: String? = nil, seedID: String? = nil) {
            self.name = name
            self.platform = platform
            self.identifier = identifier
            self.seedID = seedID
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case platform
            case identifier
            case seedID = "seedId"
        }
    }

    public struct Relationships: Codable {
        public var profiles: Profiles?
        public var app: App?
        public var bundleIDCapabilities: BundleIDCapabilities?

        public struct Profiles: Codable {
            public var meta: PagingInformation?
            public var links: Links?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case profiles
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(meta: PagingInformation? = nil, links: Links? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.links = links
                self.data = data
            }
        }

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BundleIDCapabilities: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case bundleIDCapabilities = "bundleIdCapabilities"
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(profiles: Profiles? = nil, app: App? = nil, bundleIDCapabilities: BundleIDCapabilities? = nil) {
            self.profiles = profiles
            self.app = app
            self.bundleIDCapabilities = bundleIDCapabilities
        }

        private enum CodingKeys: String, CodingKey {
            case profiles
            case app
            case bundleIDCapabilities = "bundleIdCapabilities"
        }
    }

    public init(links: ResourceLinks, type: `Type`, attributes: Attributes? = nil, id: String, relationships: Relationships? = nil) {
        self.links = links
        self.type = type
        self.attributes = attributes
        self.id = id
        self.relationships = relationships
    }
}

public struct Build: Codable {
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var type: `Type`
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var minOsVersion: String?
        public var isExpired: Bool?
        public var usesNonExemptEncryption: Bool?
        public var expirationDate: Date?
        public var iconAssetToken: ImageAsset?
        public var lsMinimumSystemVersion: String?
        public var computedMinMacOsVersion: String?
        public var uploadedDate: Date?
        public var buildAudienceType: BuildAudienceType?
        public var version: String?
        public var processingState: ProcessingState?

        public enum ProcessingState: String, Codable, CaseIterable {
            case processing = "PROCESSING"
            case failed = "FAILED"
            case invalid = "INVALID"
            case valid = "VALID"
        }

        public init(minOsVersion: String? = nil, isExpired: Bool? = nil, usesNonExemptEncryption: Bool? = nil, expirationDate: Date? = nil, iconAssetToken: ImageAsset? = nil, lsMinimumSystemVersion: String? = nil, computedMinMacOsVersion: String? = nil, uploadedDate: Date? = nil, buildAudienceType: BuildAudienceType? = nil, version: String? = nil, processingState: ProcessingState? = nil) {
            self.minOsVersion = minOsVersion
            self.isExpired = isExpired
            self.usesNonExemptEncryption = usesNonExemptEncryption
            self.expirationDate = expirationDate
            self.iconAssetToken = iconAssetToken
            self.lsMinimumSystemVersion = lsMinimumSystemVersion
            self.computedMinMacOsVersion = computedMinMacOsVersion
            self.uploadedDate = uploadedDate
            self.buildAudienceType = buildAudienceType
            self.version = version
            self.processingState = processingState
        }

        private enum CodingKeys: String, CodingKey {
            case minOsVersion
            case isExpired = "expired"
            case usesNonExemptEncryption
            case expirationDate
            case iconAssetToken
            case lsMinimumSystemVersion
            case computedMinMacOsVersion
            case uploadedDate
            case buildAudienceType
            case version
            case processingState
        }
    }

    public struct Relationships: Codable {
        public var buildBetaDetail: BuildBetaDetail?
        public var appEncryptionDeclaration: AppEncryptionDeclaration?
        public var preReleaseVersion: PreReleaseVersion?
        public var icons: Icons?
        public var betaBuildLocalizations: BetaBuildLocalizations?
        public var individualTesters: IndividualTesters?
        public var betaAppReviewSubmission: BetaAppReviewSubmission?
        public var buildBundles: BuildBundles?
        public var app: App?
        public var appStoreVersion: AppStoreVersion?

        public struct BuildBetaDetail: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case buildBetaDetails
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppEncryptionDeclaration: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appEncryptionDeclarations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct PreReleaseVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case preReleaseVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Icons: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case buildIcons
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct BetaBuildLocalizations: Codable {
            public var meta: PagingInformation?
            public var data: [Datum]?
            public var links: Links?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaBuildLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil, links: Links? = nil) {
                self.meta = meta
                self.data = data
                self.links = links
            }
        }

        public struct IndividualTesters: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaTesters
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct BetaAppReviewSubmission: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppReviewSubmissions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct BuildBundles: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case buildBundles
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(buildBetaDetail: BuildBetaDetail? = nil, appEncryptionDeclaration: AppEncryptionDeclaration? = nil, preReleaseVersion: PreReleaseVersion? = nil, icons: Icons? = nil, betaBuildLocalizations: BetaBuildLocalizations? = nil, individualTesters: IndividualTesters? = nil, betaAppReviewSubmission: BetaAppReviewSubmission? = nil, buildBundles: BuildBundles? = nil, app: App? = nil, appStoreVersion: AppStoreVersion? = nil) {
            self.buildBetaDetail = buildBetaDetail
            self.appEncryptionDeclaration = appEncryptionDeclaration
            self.preReleaseVersion = preReleaseVersion
            self.icons = icons
            self.betaBuildLocalizations = betaBuildLocalizations
            self.individualTesters = individualTesters
            self.betaAppReviewSubmission = betaAppReviewSubmission
            self.buildBundles = buildBundles
            self.app = app
            self.appStoreVersion = appStoreVersion
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case builds
    }

    public init(id: String, attributes: Attributes? = nil, relationships: Relationships? = nil, type: `Type`, links: ResourceLinks) {
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
        self.type = type
        self.links = links
    }
}

public enum ScreenshotDisplayType: String, Codable, CaseIterable {
    case appIphone65 = "APP_IPHONE_65"
    case appIphone58 = "APP_IPHONE_58"
    case appIphone55 = "APP_IPHONE_55"
    case appIphone47 = "APP_IPHONE_47"
    case appIphone40 = "APP_IPHONE_40"
    case appIphone35 = "APP_IPHONE_35"
    case appIpadPro3gen129 = "APP_IPAD_PRO_3GEN_129"
    case appIpadPro3gen11 = "APP_IPAD_PRO_3GEN_11"
    case appIpadPro129 = "APP_IPAD_PRO_129"
    case appIpad105 = "APP_IPAD_105"
    case appIpad97 = "APP_IPAD_97"
    case appDesktop = "APP_DESKTOP"
    case appWatchSeries7 = "APP_WATCH_SERIES_7"
    case appWatchSeries4 = "APP_WATCH_SERIES_4"
    case appWatchSeries3 = "APP_WATCH_SERIES_3"
    case appAppleTv = "APP_APPLE_TV"
    case imessageAppIphone65 = "IMESSAGE_APP_IPHONE_65"
    case imessageAppIphone58 = "IMESSAGE_APP_IPHONE_58"
    case imessageAppIphone55 = "IMESSAGE_APP_IPHONE_55"
    case imessageAppIphone47 = "IMESSAGE_APP_IPHONE_47"
    case imessageAppIphone40 = "IMESSAGE_APP_IPHONE_40"
    case imessageAppIpadPro3gen129 = "IMESSAGE_APP_IPAD_PRO_3GEN_129"
    case imessageAppIpadPro3gen11 = "IMESSAGE_APP_IPAD_PRO_3GEN_11"
    case imessageAppIpadPro129 = "IMESSAGE_APP_IPAD_PRO_129"
    case imessageAppIpad105 = "IMESSAGE_APP_IPAD_105"
    case imessageAppIpad97 = "IMESSAGE_APP_IPAD_97"
}

public struct UsersResponse: Codable {
    public var data: [User]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?
    public var included: [App]?

    public init(data: [User], links: PagedDocumentLinks, meta: PagingInformation? = nil, included: [App]? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
        self.included = included
    }
}

public struct AppStoreVersionPromotionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersionExperimentTreatment: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperimentTreatments
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersionExperimentTreatment: AppStoreVersionExperimentTreatment, appStoreVersion: AppStoreVersion) {
                self.appStoreVersionExperimentTreatment = appStoreVersionExperimentTreatment
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionPromotions
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AgeRatingDeclaration: Codable {
    public var id: String
    public var attributes: Attributes?
    public var type: `Type`
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var violenceCartoonOrFantasy: ViolenceCartoonOrFantasy?
        public var violenceRealistic: ViolenceRealistic?
        public var sexualContentOrNudity: SexualContentOrNudity?
        public var isSeventeenPlus: Bool?
        public var kidsAgeBand: KidsAgeBand?
        public var isUnrestrictedWebAccess: Bool?
        public var gamblingSimulated: GamblingSimulated?
        public var horrorOrFearThemes: HorrorOrFearThemes?
        public var matureOrSuggestiveThemes: MatureOrSuggestiveThemes?
        /// - warning: Deprecated.
        public var isGamblingAndContests: Bool?
        public var profanityOrCrudeHumor: ProfanityOrCrudeHumor?
        public var violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic?
        public var sexualContentGraphicAndNudity: SexualContentGraphicAndNudity?
        public var alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences?
        public var contests: Contests?
        public var isGambling: Bool?
        public var medicalOrTreatmentInformation: MedicalOrTreatmentInformation?

        public enum ViolenceCartoonOrFantasy: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceRealistic: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum SexualContentOrNudity: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum GamblingSimulated: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum HorrorOrFearThemes: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum MatureOrSuggestiveThemes: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ProfanityOrCrudeHumor: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceRealisticProlongedGraphicOrSadistic: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum SexualContentGraphicAndNudity: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum AlcoholTobaccoOrDrugUseOrReferences: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum Contests: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum MedicalOrTreatmentInformation: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public init(violenceCartoonOrFantasy: ViolenceCartoonOrFantasy? = nil, violenceRealistic: ViolenceRealistic? = nil, sexualContentOrNudity: SexualContentOrNudity? = nil, isSeventeenPlus: Bool? = nil, kidsAgeBand: KidsAgeBand? = nil, isUnrestrictedWebAccess: Bool? = nil, gamblingSimulated: GamblingSimulated? = nil, horrorOrFearThemes: HorrorOrFearThemes? = nil, matureOrSuggestiveThemes: MatureOrSuggestiveThemes? = nil, isGamblingAndContests: Bool? = nil, profanityOrCrudeHumor: ProfanityOrCrudeHumor? = nil, violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic? = nil, sexualContentGraphicAndNudity: SexualContentGraphicAndNudity? = nil, alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences? = nil, contests: Contests? = nil, isGambling: Bool? = nil, medicalOrTreatmentInformation: MedicalOrTreatmentInformation? = nil) {
            self.violenceCartoonOrFantasy = violenceCartoonOrFantasy
            self.violenceRealistic = violenceRealistic
            self.sexualContentOrNudity = sexualContentOrNudity
            self.isSeventeenPlus = isSeventeenPlus
            self.kidsAgeBand = kidsAgeBand
            self.isUnrestrictedWebAccess = isUnrestrictedWebAccess
            self.gamblingSimulated = gamblingSimulated
            self.horrorOrFearThemes = horrorOrFearThemes
            self.matureOrSuggestiveThemes = matureOrSuggestiveThemes
            self.isGamblingAndContests = isGamblingAndContests
            self.profanityOrCrudeHumor = profanityOrCrudeHumor
            self.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic
            self.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity
            self.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences
            self.contests = contests
            self.isGambling = isGambling
            self.medicalOrTreatmentInformation = medicalOrTreatmentInformation
        }

        private enum CodingKeys: String, CodingKey {
            case violenceCartoonOrFantasy
            case violenceRealistic
            case sexualContentOrNudity
            case isSeventeenPlus = "seventeenPlus"
            case kidsAgeBand
            case isUnrestrictedWebAccess = "unrestrictedWebAccess"
            case gamblingSimulated
            case horrorOrFearThemes
            case matureOrSuggestiveThemes
            case isGamblingAndContests = "gamblingAndContests"
            case profanityOrCrudeHumor
            case violenceRealisticProlongedGraphicOrSadistic
            case sexualContentGraphicAndNudity
            case alcoholTobaccoOrDrugUseOrReferences
            case contests
            case isGambling = "gambling"
            case medicalOrTreatmentInformation
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case ageRatingDeclarations
    }

    public init(id: String, attributes: Attributes? = nil, type: `Type`, links: ResourceLinks) {
        self.id = id
        self.attributes = attributes
        self.type = type
        self.links = links
    }
}

public struct ReviewSubmissionItemUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case reviewSubmissionItems
        }

        public struct Attributes: Codable {
            public var isResolved: Bool?
            public var isRemoved: Bool?

            public init(isResolved: Bool? = nil, isRemoved: Bool? = nil) {
                self.isResolved = isResolved
                self.isRemoved = isRemoved
            }

            private enum CodingKeys: String, CodingKey {
                case isResolved = "resolved"
                case isRemoved = "removed"
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildAppEncryptionDeclarationLinkageResponse: Codable {
    public var data: Data
    public var links: DocumentLinks

    public struct Data: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appEncryptionDeclarations
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: Data, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public enum AppClipAction: String, Codable, CaseIterable {
    case `open` = "OPEN"
    case view = "VIEW"
    case play = "PLAY"
}

public struct BuildIcon: Codable {
    public var id: String
    public var attributes: Attributes?
    public var type: `Type`
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var iconType: IconAssetType?
        public var iconAsset: ImageAsset?
        public var name: String?

        public init(iconType: IconAssetType? = nil, iconAsset: ImageAsset? = nil, name: String? = nil) {
            self.iconType = iconType
            self.iconAsset = iconAsset
            self.name = name
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case buildIcons
    }

    public init(id: String, attributes: Attributes? = nil, type: `Type`, links: ResourceLinks) {
        self.id = id
        self.attributes = attributes
        self.type = type
        self.links = links
    }
}

public struct BetaAppReviewSubmissionsResponse: Codable {
    public var data: [BetaAppReviewSubmission]
    public var included: [Build]?
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks

    public init(data: [BetaAppReviewSubmission], included: [Build]? = nil, meta: PagingInformation? = nil, links: PagedDocumentLinks) {
        self.data = data
        self.included = included
        self.meta = meta
        self.links = links
    }
}

public struct AppClipDefaultExperienceResponse: Codable {
    public var links: DocumentLinks
    public var included: [IncludedItem]?
    /// AppClipDefaultExperience
    public var data: AppClipDefaultExperience

    public enum IncludedItem: Codable {
        case appClip(AppClip)
        case appStoreVersion(AppStoreVersion)
        case appClipDefaultExperienceLocalization(AppClipDefaultExperienceLocalization)
        case appClipAppStoreReviewDetail(AppClipAppStoreReviewDetail)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppClipDefaultExperienceLocalization.self) {
                self = .appClipDefaultExperienceLocalization(value)
            } else if let value = try? container.decode(AppClipAppStoreReviewDetail.self) {
                self = .appClipAppStoreReviewDetail(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClip(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .appClipDefaultExperienceLocalization(let value): try container.encode(value)
            case .appClipAppStoreReviewDetail(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, included: [IncludedItem]? = nil, data: AppClipDefaultExperience) {
        self.links = links
        self.included = included
        self.data = data
    }
}

public struct AppCategoriesResponse: Codable {
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [AppCategory]
    public var included: [AppCategory]?

    public init(meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [AppCategory], included: [AppCategory]? = nil) {
        self.meta = meta
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct AppClipAppStoreReviewDetail: Codable {
    public var relationships: Relationships?
    public var attributes: Attributes?
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks

    public struct Relationships: Codable {
        public var appClipDefaultExperience: AppClipDefaultExperience?

        public struct AppClipDefaultExperience: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperiences
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appClipDefaultExperience: AppClipDefaultExperience? = nil) {
            self.appClipDefaultExperience = appClipDefaultExperience
        }
    }

    public struct Attributes: Codable {
        public var invocationURLs: [URL]?

        public init(invocationURLs: [URL]? = nil) {
            self.invocationURLs = invocationURLs
        }

        private enum CodingKeys: String, CodingKey {
            case invocationURLs = "invocationUrls"
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appClipAppStoreReviewDetails
    }

    public init(relationships: Relationships? = nil, attributes: Attributes? = nil, type: `Type`, id: String, links: ResourceLinks) {
        self.relationships = relationships
        self.attributes = attributes
        self.type = type
        self.id = id
        self.links = links
    }
}

@available(*, deprecated, message: "Deprecated")
public struct AppStoreVersionSubmission: Codable {
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreVersion = appStoreVersion
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionSubmissions
    }

    public init(id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppClipDefaultExperience: Codable {
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`

    public struct Relationships: Codable {
        public var releaseWithAppStoreVersion: ReleaseWithAppStoreVersion?
        public var appClip: AppClip?
        public var appClipDefaultExperienceLocalizations: AppClipDefaultExperienceLocalizations?
        public var appClipAppStoreReviewDetail: AppClipAppStoreReviewDetail?

        public struct ReleaseWithAppStoreVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppClip: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appClips
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppClipDefaultExperienceLocalizations: Codable {
            public var data: [Datum]?
            public var meta: PagingInformation?
            public var links: Links?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipDefaultExperienceLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, meta: PagingInformation? = nil, links: Links? = nil) {
                self.data = data
                self.meta = meta
                self.links = links
            }
        }

        public struct AppClipAppStoreReviewDetail: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appClipAppStoreReviewDetails
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(releaseWithAppStoreVersion: ReleaseWithAppStoreVersion? = nil, appClip: AppClip? = nil, appClipDefaultExperienceLocalizations: AppClipDefaultExperienceLocalizations? = nil, appClipAppStoreReviewDetail: AppClipAppStoreReviewDetail? = nil) {
            self.releaseWithAppStoreVersion = releaseWithAppStoreVersion
            self.appClip = appClip
            self.appClipDefaultExperienceLocalizations = appClipDefaultExperienceLocalizations
            self.appClipAppStoreReviewDetail = appClipAppStoreReviewDetail
        }
    }

    public struct Attributes: Codable {
        public var action: AppClipAction?

        public init(action: AppClipAction? = nil) {
            self.action = action
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appClipDefaultExperiences
    }

    public init(links: ResourceLinks, relationships: Relationships? = nil, attributes: Attributes? = nil, id: String, type: `Type`) {
        self.links = links
        self.relationships = relationships
        self.attributes = attributes
        self.id = id
        self.type = type
    }
}

public struct AppStoreVersionReleaseRequest: Codable {
    public var links: ResourceLinks
    public var id: String
    public var type: `Type`

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionReleaseRequests
    }

    public init(links: ResourceLinks, id: String, type: `Type`) {
        self.links = links
        self.id = id
        self.type = type
    }
}

public struct ScmGitReferenceResponse: Codable {
    /// ScmGitReference
    public var data: ScmGitReference
    public var links: DocumentLinks
    public var included: [ScmRepository]?

    public init(data: ScmGitReference, links: DocumentLinks, included: [ScmRepository]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppPreOrderCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var type: `Type`
        public var relationships: Relationships

        public struct Attributes: Codable {
            public var appReleaseDate: NaiveDate?

            public init(appReleaseDate: NaiveDate? = nil) {
                self.appReleaseDate = appReleaseDate
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appPreOrders
        }

        public struct Relationships: Codable {
            public var app: App

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App) {
                self.app = app
            }
        }

        public init(attributes: Attributes? = nil, type: `Type`, relationships: Relationships) {
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiWorkflow: Codable {
    public var id: String
    public var attributes: Attributes?
    public var type: `Type`
    public var links: ResourceLinks
    public var relationships: Relationships?

    public struct Attributes: Codable {
        public var branchStartCondition: CiBranchStartCondition?
        public var lastModifiedDate: Date?
        public var scheduledStartCondition: CiScheduledStartCondition?
        public var isClean: Bool?
        public var name: String?
        public var description: String?
        public var pullRequestStartCondition: CiPullRequestStartCondition?
        public var isLockedForEditing: Bool?
        public var actions: [CiAction]?
        public var containerFilePath: String?
        public var tagStartCondition: CiTagStartCondition?
        public var isEnabled: Bool?

        public init(branchStartCondition: CiBranchStartCondition? = nil, lastModifiedDate: Date? = nil, scheduledStartCondition: CiScheduledStartCondition? = nil, isClean: Bool? = nil, name: String? = nil, description: String? = nil, pullRequestStartCondition: CiPullRequestStartCondition? = nil, isLockedForEditing: Bool? = nil, actions: [CiAction]? = nil, containerFilePath: String? = nil, tagStartCondition: CiTagStartCondition? = nil, isEnabled: Bool? = nil) {
            self.branchStartCondition = branchStartCondition
            self.lastModifiedDate = lastModifiedDate
            self.scheduledStartCondition = scheduledStartCondition
            self.isClean = isClean
            self.name = name
            self.description = description
            self.pullRequestStartCondition = pullRequestStartCondition
            self.isLockedForEditing = isLockedForEditing
            self.actions = actions
            self.containerFilePath = containerFilePath
            self.tagStartCondition = tagStartCondition
            self.isEnabled = isEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case branchStartCondition
            case lastModifiedDate
            case scheduledStartCondition
            case isClean = "clean"
            case name
            case description
            case pullRequestStartCondition
            case isLockedForEditing
            case actions
            case containerFilePath
            case tagStartCondition
            case isEnabled
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case ciWorkflows
    }

    public struct Relationships: Codable {
        public var xcodeVersion: XcodeVersion?
        public var product: Product?
        public var macOsVersion: MacOsVersion?
        public var repository: Repository?

        public struct XcodeVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciXcodeVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Product: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case ciProducts
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct MacOsVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ciMacOsVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Repository: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case scmRepositories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(xcodeVersion: XcodeVersion? = nil, product: Product? = nil, macOsVersion: MacOsVersion? = nil, repository: Repository? = nil) {
            self.xcodeVersion = xcodeVersion
            self.product = product
            self.macOsVersion = macOsVersion
            self.repository = repository
        }
    }

    public init(id: String, attributes: Attributes? = nil, type: `Type`, links: ResourceLinks, relationships: Relationships? = nil) {
        self.id = id
        self.attributes = attributes
        self.type = type
        self.links = links
        self.relationships = relationships
    }
}

public struct ScmProviderType: Codable {
    public var isOnPremise: Bool?
    public var kind: Kind?
    public var displayName: String?

    public enum Kind: String, Codable, CaseIterable {
        case bitbucketCloud = "BITBUCKET_CLOUD"
        case bitbucketServer = "BITBUCKET_SERVER"
        case githubCloud = "GITHUB_CLOUD"
        case githubEnterprise = "GITHUB_ENTERPRISE"
        case gitlabCloud = "GITLAB_CLOUD"
        case gitlabSelfManaged = "GITLAB_SELF_MANAGED"
    }

    public init(isOnPremise: Bool? = nil, kind: Kind? = nil, displayName: String? = nil) {
        self.isOnPremise = isOnPremise
        self.kind = kind
        self.displayName = displayName
    }
}

public enum BrazilAgeRating: String, Codable, CaseIterable {
    case l = "L"
    case ten = "TEN"
    case twelve = "TWELVE"
    case fourteen = "FOURTEEN"
    case sixteen = "SIXTEEN"
    case eighteen = "EIGHTEEN"
}

public struct GameCenterEnabledVersionsResponse: Codable {
    public var data: [GameCenterEnabledVersion]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case gameCenterEnabledVersion(GameCenterEnabledVersion)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(GameCenterEnabledVersion.self) {
                self = .gameCenterEnabledVersion(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .gameCenterEnabledVersion(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(data: [GameCenterEnabledVersion], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreVersionLocalizationsResponse: Codable {
    public var meta: PagingInformation?
    public var included: [IncludedItem]?
    public var data: [AppStoreVersionLocalization]
    public var links: PagedDocumentLinks

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(meta: PagingInformation? = nil, included: [IncludedItem]? = nil, data: [AppStoreVersionLocalization], links: PagedDocumentLinks) {
        self.meta = meta
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct BetaBuildLocalizationsResponse: Codable {
    public var data: [BetaBuildLocalization]
    public var included: [Build]?
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks

    public init(data: [BetaBuildLocalization], included: [Build]? = nil, meta: PagingInformation? = nil, links: PagedDocumentLinks) {
        self.data = data
        self.included = included
        self.meta = meta
        self.links = links
    }
}

public struct AppStoreVersionPhasedReleaseCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var attributes: Attributes?
        public var type: `Type`

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public struct Attributes: Codable {
            public var phasedReleaseState: PhasedReleaseState?

            public init(phasedReleaseState: PhasedReleaseState? = nil) {
                self.phasedReleaseState = phasedReleaseState
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionPhasedReleases
        }

        public init(relationships: Relationships, attributes: Attributes? = nil, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppUpdateRequest: Codable {
    public var data: Data
    public var included: [AppPriceInlineCreate]?

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var relationships: Relationships?
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public struct Attributes: Codable {
            public var subscriptionStatusURL: URL?
            public var bundleID: String?
            public var primaryLocale: String?
            public var contentRightsDeclaration: ContentRightsDeclaration?
            public var subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion?
            public var subscriptionStatusURLForSandbox: URL?
            public var isAvailableInNewTerritories: Bool?
            public var subscriptionStatusURLVersion: SubscriptionStatusURLVersion?

            public enum ContentRightsDeclaration: String, Codable, CaseIterable {
                case doesNotUseThirdPartyContent = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
                case usesThirdPartyContent = "USES_THIRD_PARTY_CONTENT"
            }

            public init(subscriptionStatusURL: URL? = nil, bundleID: String? = nil, primaryLocale: String? = nil, contentRightsDeclaration: ContentRightsDeclaration? = nil, subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion? = nil, subscriptionStatusURLForSandbox: URL? = nil, isAvailableInNewTerritories: Bool? = nil, subscriptionStatusURLVersion: SubscriptionStatusURLVersion? = nil) {
                self.subscriptionStatusURL = subscriptionStatusURL
                self.bundleID = bundleID
                self.primaryLocale = primaryLocale
                self.contentRightsDeclaration = contentRightsDeclaration
                self.subscriptionStatusURLVersionForSandbox = subscriptionStatusURLVersionForSandbox
                self.subscriptionStatusURLForSandbox = subscriptionStatusURLForSandbox
                self.isAvailableInNewTerritories = isAvailableInNewTerritories
                self.subscriptionStatusURLVersion = subscriptionStatusURLVersion
            }

            private enum CodingKeys: String, CodingKey {
                case subscriptionStatusURL = "subscriptionStatusUrl"
                case bundleID = "bundleId"
                case primaryLocale
                case contentRightsDeclaration
                case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
                case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
                case isAvailableInNewTerritories = "availableInNewTerritories"
                case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
            }
        }

        public struct Relationships: Codable {
            public var availableTerritories: AvailableTerritories?
            public var prices: Prices?

            public struct AvailableTerritories: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case territories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct Prices: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appPrices
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(availableTerritories: AvailableTerritories? = nil, prices: Prices? = nil) {
                self.availableTerritories = availableTerritories
                self.prices = prices
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships? = nil, id: String) {
            self.type = type
            self.attributes = attributes
            self.relationships = relationships
            self.id = id
        }
    }

    public init(data: Data, included: [AppPriceInlineCreate]? = nil) {
        self.data = data
        self.included = included
    }
}

public struct AppClipAdvancedExperienceImageUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var isUploaded: Bool?
            public var sourceFileChecksum: String?

            public init(isUploaded: Bool? = nil, sourceFileChecksum: String? = nil) {
                self.isUploaded = isUploaded
                self.sourceFileChecksum = sourceFileChecksum
            }

            private enum CodingKeys: String, CodingKey {
                case isUploaded = "uploaded"
                case sourceFileChecksum
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAdvancedExperienceImages
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiTestResult: Codable {
    public var links: ResourceLinks
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`

    public struct Attributes: Codable {
        public var name: String?
        public var status: CiTestStatus?
        public var message: String?
        public var className: String?
        public var destinationTestResults: [DestinationTestResult]?
        public var fileSource: FileLocation?

        public struct DestinationTestResult: Codable {
            public var deviceName: String?
            public var osVersion: String?
            public var uuid: String?
            public var duration: Double?
            public var status: CiTestStatus?

            public init(deviceName: String? = nil, osVersion: String? = nil, uuid: String? = nil, duration: Double? = nil, status: CiTestStatus? = nil) {
                self.deviceName = deviceName
                self.osVersion = osVersion
                self.uuid = uuid
                self.duration = duration
                self.status = status
            }
        }

        public init(name: String? = nil, status: CiTestStatus? = nil, message: String? = nil, className: String? = nil, destinationTestResults: [DestinationTestResult]? = nil, fileSource: FileLocation? = nil) {
            self.name = name
            self.status = status
            self.message = message
            self.className = className
            self.destinationTestResults = destinationTestResults
            self.fileSource = fileSource
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case ciTestResults
    }

    public init(links: ResourceLinks, attributes: Attributes? = nil, id: String, type: `Type`) {
        self.links = links
        self.attributes = attributes
        self.id = id
        self.type = type
    }
}

public struct AppMediaStateError: Codable {
    public var code: String?
    public var description: String?

    public init(code: String? = nil, description: String? = nil) {
        self.code = code
        self.description = description
    }
}

public struct AppClipAppStoreReviewDetailResponse: Codable {
    /// AppClipAppStoreReviewDetail
    public var data: AppClipAppStoreReviewDetail
    public var links: DocumentLinks
    public var included: [AppClipDefaultExperience]?

    public init(data: AppClipAppStoreReviewDetail, links: DocumentLinks, included: [AppClipDefaultExperience]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct CiTestDestination: Codable {
    public var runtimeName: String?
    public var deviceTypeIdentifier: String?
    public var kind: CiTestDestinationKind?
    public var deviceTypeName: String?
    public var runtimeIdentifier: String?

    public init(runtimeName: String? = nil, deviceTypeIdentifier: String? = nil, kind: CiTestDestinationKind? = nil, deviceTypeName: String? = nil, runtimeIdentifier: String? = nil) {
        self.runtimeName = runtimeName
        self.deviceTypeIdentifier = deviceTypeIdentifier
        self.kind = kind
        self.deviceTypeName = deviceTypeName
        self.runtimeIdentifier = runtimeIdentifier
    }
}

public struct AppEventScreenshotUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var attributes: Attributes?
        public var type: `Type`

        public struct Attributes: Codable {
            public var isUploaded: Bool?

            public init(isUploaded: Bool? = nil) {
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case isUploaded = "uploaded"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appEventScreenshots
        }

        public init(id: String, attributes: Attributes? = nil, type: `Type`) {
            self.id = id
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipAdvancedExperienceCreateRequest: Codable {
    public var included: [AppClipAdvancedExperienceLocalizationInlineCreate]?
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`
        public var attributes: Attributes

        public struct Relationships: Codable {
            public var headerImage: HeaderImage
            public var localizations: Localizations
            public var appClip: AppClip

            public struct HeaderImage: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipAdvancedExperienceImages
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Localizations: Codable {
                public var data: [Datum]

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipAdvancedExperienceLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public struct AppClip: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClips
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(headerImage: HeaderImage, localizations: Localizations, appClip: AppClip) {
                self.headerImage = headerImage
                self.localizations = localizations
                self.appClip = appClip
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAdvancedExperiences
        }

        public struct Attributes: Codable {
            public var link: URL
            public var businessCategory: BusinessCategory?
            public var defaultLanguage: AppClipAdvancedExperienceLanguage
            public var action: AppClipAction?
            public var place: Place?
            public var isPoweredBy: Bool

            public enum BusinessCategory: String, Codable, CaseIterable {
                case automotive = "AUTOMOTIVE"
                case beauty = "BEAUTY"
                case bikes = "BIKES"
                case books = "BOOKS"
                case casino = "CASINO"
                case education = "EDUCATION"
                case educationJapan = "EDUCATION_JAPAN"
                case entertainment = "ENTERTAINMENT"
                case evCharger = "EV_CHARGER"
                case financialUsd = "FINANCIAL_USD"
                case financialCny = "FINANCIAL_CNY"
                case financialGbp = "FINANCIAL_GBP"
                case financialJpy = "FINANCIAL_JPY"
                case financialEur = "FINANCIAL_EUR"
                case fitness = "FITNESS"
                case foodAndDrink = "FOOD_AND_DRINK"
                case gas = "GAS"
                case grocery = "GROCERY"
                case healthAndMedical = "HEALTH_AND_MEDICAL"
                case hotelAndTravel = "HOTEL_AND_TRAVEL"
                case music = "MUSIC"
                case parking = "PARKING"
                case petServices = "PET_SERVICES"
                case professionalServices = "PROFESSIONAL_SERVICES"
                case shopping = "SHOPPING"
                case ticketing = "TICKETING"
                case transit = "TRANSIT"
            }

            public struct Place: Codable {
                public var names: [String]?
                public var homePage: String?
                public var phoneNumber: PhoneNumber?
                public var relationship: Relationship?
                public var mapAction: MapAction?
                public var mainAddress: MainAddress?
                public var categories: [String]?
                public var placeID: String?
                public var displayPoint: DisplayPoint?

                public struct PhoneNumber: Codable {
                    public var type: `Type`?
                    public var number: String?
                    public var intent: String?

                    public enum `Type`: String, Codable, CaseIterable {
                        case fax = "FAX"
                        case landline = "LANDLINE"
                        case mobile = "MOBILE"
                        case tollfree = "TOLLFREE"
                    }

                    public init(type: `Type`? = nil, number: String? = nil, intent: String? = nil) {
                        self.type = type
                        self.number = number
                        self.intent = intent
                    }
                }

                public enum Relationship: String, Codable, CaseIterable {
                    case owner = "OWNER"
                    case authorized = "AUTHORIZED"
                    case other = "OTHER"
                }

                public enum MapAction: String, Codable, CaseIterable {
                    case buyTickets = "BUY_TICKETS"
                    case viewAvailability = "VIEW_AVAILABILITY"
                    case viewPricing = "VIEW_PRICING"
                    case hotelBookRoom = "HOTEL_BOOK_ROOM"
                    case parkingReserveParking = "PARKING_RESERVE_PARKING"
                    case restaurantJoinWaitlist = "RESTAURANT_JOIN_WAITLIST"
                    case restaurantOrderDelivery = "RESTAURANT_ORDER_DELIVERY"
                    case restaurantOrderFood = "RESTAURANT_ORDER_FOOD"
                    case restaurantOrderTakeout = "RESTAURANT_ORDER_TAKEOUT"
                    case restaurantReservation = "RESTAURANT_RESERVATION"
                    case scheduleAppointment = "SCHEDULE_APPOINTMENT"
                    case restaurantViewMenu = "RESTAURANT_VIEW_MENU"
                    case theaterNowPlaying = "THEATER_NOW_PLAYING"
                }

                public struct MainAddress: Codable {
                    public var structuredAddress: StructuredAddress?
                    public var fullAddress: String?

                    public struct StructuredAddress: Codable {
                        public var floor: String?
                        public var countryCode: String?
                        public var postalCode: String?
                        public var locality: String?
                        public var stateProvince: String?
                        public var neighborhood: String?
                        public var streetAddress: [String]?

                        public init(floor: String? = nil, countryCode: String? = nil, postalCode: String? = nil, locality: String? = nil, stateProvince: String? = nil, neighborhood: String? = nil, streetAddress: [String]? = nil) {
                            self.floor = floor
                            self.countryCode = countryCode
                            self.postalCode = postalCode
                            self.locality = locality
                            self.stateProvince = stateProvince
                            self.neighborhood = neighborhood
                            self.streetAddress = streetAddress
                        }
                    }

                    public init(structuredAddress: StructuredAddress? = nil, fullAddress: String? = nil) {
                        self.structuredAddress = structuredAddress
                        self.fullAddress = fullAddress
                    }
                }

                public struct DisplayPoint: Codable {
                    public var coordinates: Coordinates?
                    public var source: Source?

                    public struct Coordinates: Codable {
                        public var longitude: Double?
                        public var latitude: Double?

                        public init(longitude: Double? = nil, latitude: Double? = nil) {
                            self.longitude = longitude
                            self.latitude = latitude
                        }
                    }

                    public enum Source: String, Codable, CaseIterable {
                        case calculated = "CALCULATED"
                        case manuallyPlaced = "MANUALLY_PLACED"
                    }

                    public init(coordinates: Coordinates? = nil, source: Source? = nil) {
                        self.coordinates = coordinates
                        self.source = source
                    }
                }

                public init(names: [String]? = nil, homePage: String? = nil, phoneNumber: PhoneNumber? = nil, relationship: Relationship? = nil, mapAction: MapAction? = nil, mainAddress: MainAddress? = nil, categories: [String]? = nil, placeID: String? = nil, displayPoint: DisplayPoint? = nil) {
                    self.names = names
                    self.homePage = homePage
                    self.phoneNumber = phoneNumber
                    self.relationship = relationship
                    self.mapAction = mapAction
                    self.mainAddress = mainAddress
                    self.categories = categories
                    self.placeID = placeID
                    self.displayPoint = displayPoint
                }

                private enum CodingKeys: String, CodingKey {
                    case names
                    case homePage
                    case phoneNumber
                    case relationship
                    case mapAction
                    case mainAddress
                    case categories
                    case placeID = "placeId"
                    case displayPoint
                }
            }

            public init(link: URL, businessCategory: BusinessCategory? = nil, defaultLanguage: AppClipAdvancedExperienceLanguage, action: AppClipAction? = nil, place: Place? = nil, isPoweredBy: Bool) {
                self.link = link
                self.businessCategory = businessCategory
                self.defaultLanguage = defaultLanguage
                self.action = action
                self.place = place
                self.isPoweredBy = isPoweredBy
            }
        }

        public init(relationships: Relationships, type: `Type`, attributes: Attributes) {
            self.relationships = relationships
            self.type = type
            self.attributes = attributes
        }
    }

    public init(included: [AppClipAdvancedExperienceLocalizationInlineCreate]? = nil, data: Data) {
        self.included = included
        self.data = data
    }
}

public struct AppsResponse: Codable {
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var data: [App]
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case ciProduct(CiProduct)
        case betaGroup(BetaGroup)
        case appStoreVersion(AppStoreVersion)
        case prereleaseVersion(PrereleaseVersion)
        case betaAppLocalization(BetaAppLocalization)
        case build(Build)
        case betaLicenseAgreement(BetaLicenseAgreement)
        case betaAppReviewDetail(BetaAppReviewDetail)
        case appInfo(AppInfo)
        case appClip(AppClip)
        case endUserLicenseAgreement(EndUserLicenseAgreement)
        case appPreOrder(AppPreOrder)
        case appPrice(AppPrice)
        case territory(Territory)
        case inAppPurchase(InAppPurchase)
        case gameCenterEnabledVersion(GameCenterEnabledVersion)
        case appCustomProductPage(AppCustomProductPage)
        case appEvent(AppEvent)
        case reviewSubmission(ReviewSubmission)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaAppLocalization.self) {
                self = .betaAppLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaLicenseAgreement.self) {
                self = .betaLicenseAgreement(value)
            } else if let value = try? container.decode(BetaAppReviewDetail.self) {
                self = .betaAppReviewDetail(value)
            } else if let value = try? container.decode(AppInfo.self) {
                self = .appInfo(value)
            } else if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(EndUserLicenseAgreement.self) {
                self = .endUserLicenseAgreement(value)
            } else if let value = try? container.decode(AppPreOrder.self) {
                self = .appPreOrder(value)
            } else if let value = try? container.decode(AppPrice.self) {
                self = .appPrice(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else if let value = try? container.decode(InAppPurchase.self) {
                self = .inAppPurchase(value)
            } else if let value = try? container.decode(GameCenterEnabledVersion.self) {
                self = .gameCenterEnabledVersion(value)
            } else if let value = try? container.decode(AppCustomProductPage.self) {
                self = .appCustomProductPage(value)
            } else if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else if let value = try? container.decode(ReviewSubmission.self) {
                self = .reviewSubmission(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .ciProduct(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaAppLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaLicenseAgreement(let value): try container.encode(value)
            case .betaAppReviewDetail(let value): try container.encode(value)
            case .appInfo(let value): try container.encode(value)
            case .appClip(let value): try container.encode(value)
            case .endUserLicenseAgreement(let value): try container.encode(value)
            case .appPreOrder(let value): try container.encode(value)
            case .appPrice(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            case .inAppPurchase(let value): try container.encode(value)
            case .gameCenterEnabledVersion(let value): try container.encode(value)
            case .appCustomProductPage(let value): try container.encode(value)
            case .appEvent(let value): try container.encode(value)
            case .reviewSubmission(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: PagedDocumentLinks, data: [App], meta: PagingInformation? = nil) {
        self.included = included
        self.links = links
        self.data = data
        self.meta = meta
    }
}

public struct CiTagPatterns: Codable {
    public var patterns: [Pattern]?
    public var isAllMatch: Bool?

    public struct Pattern: Codable {
        public var pattern: String?
        public var isPrefix: Bool?

        public init(pattern: String? = nil, isPrefix: Bool? = nil) {
            self.pattern = pattern
            self.isPrefix = isPrefix
        }
    }

    public init(patterns: [Pattern]? = nil, isAllMatch: Bool? = nil) {
        self.patterns = patterns
        self.isAllMatch = isAllMatch
    }
}

public struct BundleIDsResponse: Codable {
    public var meta: PagingInformation?
    public var included: [IncludedItem]?
    public var data: [BundleID]
    public var links: PagedDocumentLinks

    public enum IncludedItem: Codable {
        case profile(Profile)
        case bundleIDCapability(BundleIDCapability)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Profile.self) {
                self = .profile(value)
            } else if let value = try? container.decode(BundleIDCapability.self) {
                self = .bundleIDCapability(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .profile(let value): try container.encode(value)
            case .bundleIDCapability(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(meta: PagingInformation? = nil, included: [IncludedItem]? = nil, data: [BundleID], links: PagedDocumentLinks) {
        self.meta = meta
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct PagedDocumentLinks: Codable {
    public var first: String?
    public var this: String
    public var next: String?

    public init(first: String? = nil, this: String, next: String? = nil) {
        self.first = first
        self.this = this
        self.next = next
    }

    private enum CodingKeys: String, CodingKey {
        case first
        case this = "self"
        case next
    }
}

public struct AppStoreVersionExperiment: Codable {
    public var relationships: Relationships?
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public struct Relationships: Codable {
        public var appStoreVersionExperimentTreatments: AppStoreVersionExperimentTreatments?
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreVersionExperimentTreatments: Codable {
            public var data: [Datum]?
            public var meta: PagingInformation?
            public var links: Links?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperimentTreatments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, meta: PagingInformation? = nil, links: Links? = nil) {
                self.data = data
                self.meta = meta
                self.links = links
            }
        }

        public struct AppStoreVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appStoreVersionExperimentTreatments: AppStoreVersionExperimentTreatments? = nil, appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreVersionExperimentTreatments = appStoreVersionExperimentTreatments
            self.appStoreVersion = appStoreVersion
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionExperiments
    }

    public struct Attributes: Codable {
        public var state: State?
        public var endDate: Date?
        public var trafficProportion: Int?
        public var startDate: Date?
        public var name: String?
        public var isReviewRequired: Bool?

        public enum State: String, Codable, CaseIterable {
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case readyForReview = "READY_FOR_REVIEW"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case accepted = "ACCEPTED"
            case approved = "APPROVED"
            case rejected = "REJECTED"
            case completed = "COMPLETED"
            case stopped = "STOPPED"
        }

        public init(state: State? = nil, endDate: Date? = nil, trafficProportion: Int? = nil, startDate: Date? = nil, name: String? = nil, isReviewRequired: Bool? = nil) {
            self.state = state
            self.endDate = endDate
            self.trafficProportion = trafficProportion
            self.startDate = startDate
            self.name = name
            self.isReviewRequired = isReviewRequired
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case endDate
            case trafficProportion
            case startDate
            case name
            case isReviewRequired = "reviewRequired"
        }
    }

    public init(relationships: Relationships? = nil, type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.relationships = relationships
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public enum AppEncryptionDeclarationState: String, Codable, CaseIterable {
    case inReview = "IN_REVIEW"
    case approved = "APPROVED"
    case rejected = "REJECTED"
    case invalid = "INVALID"
    case expired = "EXPIRED"
}

public struct AppClipHeaderImageUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appClipHeaderImages
        }

        public struct Attributes: Codable {
            public var sourceFileChecksum: String?
            public var isUploaded: Bool?

            public init(sourceFileChecksum: String? = nil, isUploaded: Bool? = nil) {
                self.sourceFileChecksum = sourceFileChecksum
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case sourceFileChecksum
                case isUploaded = "uploaded"
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, id: String) {
            self.type = type
            self.attributes = attributes
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct InAppPurchase: Codable {
    public var attributes: Attributes?
    public var type: `Type`
    public var links: ResourceLinks
    public var id: String
    public var relationships: Relationships?

    public struct Attributes: Codable {
        public var state: State?
        public var referenceName: String?
        public var productID: String?
        public var inAppPurchaseType: InAppPurchaseType?

        public enum State: String, Codable, CaseIterable {
            case created = "CREATED"
            case developerSignedOff = "DEVELOPER_SIGNED_OFF"
            case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
            case deletionInProgress = "DELETION_IN_PROGRESS"
            case approved = "APPROVED"
            case deleted = "DELETED"
            case removedFromSale = "REMOVED_FROM_SALE"
            case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
            case waitingForUpload = "WAITING_FOR_UPLOAD"
            case processingContent = "PROCESSING_CONTENT"
            case replaced = "REPLACED"
            case rejected = "REJECTED"
            case waitingForScreenshot = "WAITING_FOR_SCREENSHOT"
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case missingMetadata = "MISSING_METADATA"
            case readyToSubmit = "READY_TO_SUBMIT"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
        }

        public enum InAppPurchaseType: String, Codable, CaseIterable {
            case automaticallyRenewableSubscription = "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"
            case nonConsumable = "NON_CONSUMABLE"
            case consumable = "CONSUMABLE"
            case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
            case freeSubscription = "FREE_SUBSCRIPTION"
        }

        public init(state: State? = nil, referenceName: String? = nil, productID: String? = nil, inAppPurchaseType: InAppPurchaseType? = nil) {
            self.state = state
            self.referenceName = referenceName
            self.productID = productID
            self.inAppPurchaseType = inAppPurchaseType
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case referenceName
            case productID = "productId"
            case inAppPurchaseType
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case inAppPurchases
    }

    public struct Relationships: Codable {
        public var apps: Apps?

        public struct Apps: Codable {
            public var data: [Datum]?
            public var meta: PagingInformation?
            public var links: Links?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, meta: PagingInformation? = nil, links: Links? = nil) {
                self.data = data
                self.meta = meta
                self.links = links
            }
        }

        public init(apps: Apps? = nil) {
            self.apps = apps
        }
    }

    public init(attributes: Attributes? = nil, type: `Type`, links: ResourceLinks, id: String, relationships: Relationships? = nil) {
        self.attributes = attributes
        self.type = type
        self.links = links
        self.id = id
        self.relationships = relationships
    }
}

public struct BetaGroupsResponse: Codable {
    public var data: [BetaGroup]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case build(Build)
        case betaTester(BetaTester)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            }
        }
    }

    public init(data: [BetaGroup], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct UploadOperation: Codable {
    public var requestHeaders: [HTTPHeader]?
    public var offset: Int?
    public var length: Int?
    public var url: String?
    public var method: String?

    public init(requestHeaders: [HTTPHeader]? = nil, offset: Int? = nil, length: Int? = nil, url: String? = nil, method: String? = nil) {
        self.requestHeaders = requestHeaders
        self.offset = offset
        self.length = length
        self.url = url
        self.method = method
    }
}

public struct AppStoreVersionExperimentTreatmentsResponse: Codable {
    public var meta: PagingInformation?
    public var data: [AppStoreVersionExperimentTreatment]
    public var links: PagedDocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case appStoreVersionExperiment(AppStoreVersionExperiment)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionExperiment(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(meta: PagingInformation? = nil, data: [AppStoreVersionExperimentTreatment], links: PagedDocumentLinks, included: [IncludedItem]? = nil) {
        self.meta = meta
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppEventVideoClipsResponse: Codable {
    public var data: [AppEventVideoClip]
    public var meta: PagingInformation?
    public var included: [AppEventLocalization]?
    public var links: PagedDocumentLinks

    public init(data: [AppEventVideoClip], meta: PagingInformation? = nil, included: [AppEventLocalization]? = nil, links: PagedDocumentLinks) {
        self.data = data
        self.meta = meta
        self.included = included
        self.links = links
    }
}

public struct AppEventScreenshotResponse: Codable {
    public var included: [AppEventLocalization]?
    /// AppEventScreenshot
    public var data: AppEventScreenshot
    public var links: DocumentLinks

    public init(included: [AppEventLocalization]? = nil, data: AppEventScreenshot, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct CiProductsResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [CiProduct]
    public var meta: PagingInformation?
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case app(App)
        case bundleID(BundleID)
        case scmRepository(ScmRepository)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BundleID.self) {
                self = .bundleID(value)
            } else if let value = try? container.decode(ScmRepository.self) {
                self = .scmRepository(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .bundleID(let value): try container.encode(value)
            case .scmRepository(let value): try container.encode(value)
            }
        }
    }

    public init(links: PagedDocumentLinks, data: [CiProduct], meta: PagingInformation? = nil, included: [IncludedItem]? = nil) {
        self.links = links
        self.data = data
        self.meta = meta
        self.included = included
    }
}

public struct CiBranchStartCondition: Codable {
    public var source: CiBranchPatterns?
    public var isAutoCancel: Bool?
    public var filesAndFoldersRule: CiFilesAndFoldersRule?

    public init(source: CiBranchPatterns? = nil, isAutoCancel: Bool? = nil, filesAndFoldersRule: CiFilesAndFoldersRule? = nil) {
        self.source = source
        self.isAutoCancel = isAutoCancel
        self.filesAndFoldersRule = filesAndFoldersRule
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case isAutoCancel = "autoCancel"
        case filesAndFoldersRule
    }
}

public struct BetaTesterAppsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppEncryptionDeclarationsResponse: Codable {
    public var meta: PagingInformation?
    public var data: [AppEncryptionDeclaration]
    public var links: PagedDocumentLinks
    public var included: [App]?

    public init(meta: PagingInformation? = nil, data: [AppEncryptionDeclaration], links: PagedDocumentLinks, included: [App]? = nil) {
        self.meta = meta
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppPricesResponse: Codable {
    public var meta: PagingInformation?
    public var data: [AppPrice]
    public var links: PagedDocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case app(App)
        case appPriceTier(AppPriceTier)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppPriceTier.self) {
                self = .appPriceTier(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appPriceTier(let value): try container.encode(value)
            }
        }
    }

    public init(meta: PagingInformation? = nil, data: [AppPrice], links: PagedDocumentLinks, included: [IncludedItem]? = nil) {
        self.meta = meta
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppResponse: Codable {
    public var included: [IncludedItem]?
    public var links: DocumentLinks
    /// App
    public var data: App

    public enum IncludedItem: Codable {
        case ciProduct(CiProduct)
        case betaGroup(BetaGroup)
        case appStoreVersion(AppStoreVersion)
        case prereleaseVersion(PrereleaseVersion)
        case betaAppLocalization(BetaAppLocalization)
        case build(Build)
        case betaLicenseAgreement(BetaLicenseAgreement)
        case betaAppReviewDetail(BetaAppReviewDetail)
        case appInfo(AppInfo)
        case appClip(AppClip)
        case endUserLicenseAgreement(EndUserLicenseAgreement)
        case appPreOrder(AppPreOrder)
        case appPrice(AppPrice)
        case territory(Territory)
        case inAppPurchase(InAppPurchase)
        case gameCenterEnabledVersion(GameCenterEnabledVersion)
        case appCustomProductPage(AppCustomProductPage)
        case appEvent(AppEvent)
        case reviewSubmission(ReviewSubmission)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaAppLocalization.self) {
                self = .betaAppLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaLicenseAgreement.self) {
                self = .betaLicenseAgreement(value)
            } else if let value = try? container.decode(BetaAppReviewDetail.self) {
                self = .betaAppReviewDetail(value)
            } else if let value = try? container.decode(AppInfo.self) {
                self = .appInfo(value)
            } else if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(EndUserLicenseAgreement.self) {
                self = .endUserLicenseAgreement(value)
            } else if let value = try? container.decode(AppPreOrder.self) {
                self = .appPreOrder(value)
            } else if let value = try? container.decode(AppPrice.self) {
                self = .appPrice(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else if let value = try? container.decode(InAppPurchase.self) {
                self = .inAppPurchase(value)
            } else if let value = try? container.decode(GameCenterEnabledVersion.self) {
                self = .gameCenterEnabledVersion(value)
            } else if let value = try? container.decode(AppCustomProductPage.self) {
                self = .appCustomProductPage(value)
            } else if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else if let value = try? container.decode(ReviewSubmission.self) {
                self = .reviewSubmission(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .ciProduct(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaAppLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaLicenseAgreement(let value): try container.encode(value)
            case .betaAppReviewDetail(let value): try container.encode(value)
            case .appInfo(let value): try container.encode(value)
            case .appClip(let value): try container.encode(value)
            case .endUserLicenseAgreement(let value): try container.encode(value)
            case .appPreOrder(let value): try container.encode(value)
            case .appPrice(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            case .inAppPurchase(let value): try container.encode(value)
            case .gameCenterEnabledVersion(let value): try container.encode(value)
            case .appCustomProductPage(let value): try container.encode(value)
            case .appEvent(let value): try container.encode(value)
            case .reviewSubmission(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: DocumentLinks, data: App) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct ScmPullRequestResponse: Codable {
    public var links: DocumentLinks
    /// ScmPullRequest
    public var data: ScmPullRequest
    public var included: [ScmRepository]?

    public init(links: DocumentLinks, data: ScmPullRequest, included: [ScmRepository]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct BetaTesterBetaGroupsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct DiagnosticLog: Codable {
    public var links: ResourceLinks
    public var type: `Type`
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case diagnosticLogs
    }

    public init(links: ResourceLinks, type: `Type`, id: String) {
        self.links = links
        self.type = type
        self.id = id
    }
}

public struct AppCustomProductPageLocalizationInlineCreate: Codable {
    public var type: `Type`
    public var attributes: Attributes
    public var relationships: Relationships?
    public var id: String?

    public enum `Type`: String, Codable, CaseIterable {
        case appCustomProductPageLocalizations
    }

    public struct Attributes: Codable {
        public var promotionalText: String?
        public var locale: String

        public init(promotionalText: String? = nil, locale: String) {
            self.promotionalText = promotionalText
            self.locale = locale
        }
    }

    public struct Relationships: Codable {
        public var appCustomProductPageVersion: AppCustomProductPageVersion?

        public struct AppCustomProductPageVersion: Codable {
            public var data: Data?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public init(appCustomProductPageVersion: AppCustomProductPageVersion? = nil) {
            self.appCustomProductPageVersion = appCustomProductPageVersion
        }
    }

    public init(type: `Type`, attributes: Attributes, relationships: Relationships? = nil, id: String? = nil) {
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.id = id
    }
}

public struct BuildBundleFileSize: Codable {
    public var id: String
    public var attributes: Attributes?
    public var type: `Type`
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var deviceModel: String?
        public var osVersion: String?
        public var downloadBytes: Int?
        public var installBytes: Int?

        public init(deviceModel: String? = nil, osVersion: String? = nil, downloadBytes: Int? = nil, installBytes: Int? = nil) {
            self.deviceModel = deviceModel
            self.osVersion = osVersion
            self.downloadBytes = downloadBytes
            self.installBytes = installBytes
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case buildBundleFileSizes
    }

    public init(id: String, attributes: Attributes? = nil, type: `Type`, links: ResourceLinks) {
        self.id = id
        self.attributes = attributes
        self.type = type
        self.links = links
    }
}

public struct AppPriceTiersResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [AppPriceTier]
    public var included: [AppPricePoint]?
    public var meta: PagingInformation?

    public init(links: PagedDocumentLinks, data: [AppPriceTier], included: [AppPricePoint]? = nil, meta: PagingInformation? = nil) {
        self.links = links
        self.data = data
        self.included = included
        self.meta = meta
    }
}

public struct BundleIDCapabilityCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var settings: [CapabilitySetting]?
            public var capabilityType: CapabilityType

            public init(settings: [CapabilitySetting]? = nil, capabilityType: CapabilityType) {
                self.settings = settings
                self.capabilityType = capabilityType
            }
        }

        public struct Relationships: Codable {
            public var bundleID: BundleID

            public struct BundleID: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case bundleIDs = "bundleIds"
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(bundleID: BundleID) {
                self.bundleID = bundleID
            }

            private enum CodingKeys: String, CodingKey {
                case bundleID = "bundleId"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDCapabilities = "bundleIdCapabilities"
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct DevicesResponse: Codable {
    public var meta: PagingInformation?
    public var data: [Device]
    public var links: PagedDocumentLinks

    public init(meta: PagingInformation? = nil, data: [Device], links: PagedDocumentLinks) {
        self.meta = meta
        self.data = data
        self.links = links
    }
}

public enum CiTestDestinationKind: String, Codable, CaseIterable {
    case simulator = "SIMULATOR"
    case mac = "MAC"
}

public struct RoutingAppCoverageCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var fileSize: Int
            public var fileName: String

            public init(fileSize: Int, fileName: String) {
                self.fileSize = fileSize
                self.fileName = fileName
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case routingAppCoverages
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppReviewSubmission: Codable {
    public var attributes: Attributes?
    public var type: `Type`
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var id: String

    public struct Attributes: Codable {
        public var betaReviewState: BetaReviewState?
        public var submittedDate: Date?

        public init(betaReviewState: BetaReviewState? = nil, submittedDate: Date? = nil) {
            self.betaReviewState = betaReviewState
            self.submittedDate = submittedDate
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppReviewSubmissions
    }

    public struct Relationships: Codable {
        public var build: Build?

        public struct Build: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(build: Build? = nil) {
            self.build = build
        }
    }

    public init(attributes: Attributes? = nil, type: `Type`, links: ResourceLinks, relationships: Relationships? = nil, id: String) {
        self.attributes = attributes
        self.type = type
        self.links = links
        self.relationships = relationships
        self.id = id
    }
}

public struct BetaTesterBuildsLinkagesResponse: Codable {
    public var data: [Datum]
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum], meta: PagingInformation? = nil, links: PagedDocumentLinks) {
        self.data = data
        self.meta = meta
        self.links = links
    }
}

public struct BundleIDUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var name: String?

            public init(name: String? = nil) {
                self.name = name
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDs = "bundleIds"
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppInfoResponse: Codable {
    public var links: DocumentLinks
    /// AppInfo
    public var data: AppInfo
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case app(App)
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appInfoLocalization(AppInfoLocalization)
        case appCategory(AppCategory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AgeRatingDeclaration.self) {
                self = .ageRatingDeclaration(value)
            } else if let value = try? container.decode(AppInfoLocalization.self) {
                self = .appInfoLocalization(value)
            } else if let value = try? container.decode(AppCategory.self) {
                self = .appCategory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .ageRatingDeclaration(let value): try container.encode(value)
            case .appInfoLocalization(let value): try container.encode(value)
            case .appCategory(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, data: AppInfo, included: [IncludedItem]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct CiIssueCounts: Codable {
    public var analyzerWarnings: Int?
    public var testFailures: Int?
    public var errors: Int?
    public var warnings: Int?

    public init(analyzerWarnings: Int? = nil, testFailures: Int? = nil, errors: Int? = nil, warnings: Int? = nil) {
        self.analyzerWarnings = analyzerWarnings
        self.testFailures = testFailures
        self.errors = errors
        self.warnings = warnings
    }
}

public enum Platform: String, Codable, CaseIterable {
    case ios = "IOS"
    case macOs = "MAC_OS"
    case tvOs = "TV_OS"
}

public struct ScmRepository: Codable {
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public struct Attributes: Codable {
        public var sshCloneURL: URL?
        public var ownerName: String?
        public var httpCloneURL: URL?
        public var repositoryName: String?
        public var lastAccessedDate: Date?

        public init(sshCloneURL: URL? = nil, ownerName: String? = nil, httpCloneURL: URL? = nil, repositoryName: String? = nil, lastAccessedDate: Date? = nil) {
            self.sshCloneURL = sshCloneURL
            self.ownerName = ownerName
            self.httpCloneURL = httpCloneURL
            self.repositoryName = repositoryName
            self.lastAccessedDate = lastAccessedDate
        }

        private enum CodingKeys: String, CodingKey {
            case sshCloneURL = "sshCloneUrl"
            case ownerName
            case httpCloneURL = "httpCloneUrl"
            case repositoryName
            case lastAccessedDate
        }
    }

    public struct Relationships: Codable {
        public var scmProvider: ScmProvider?
        public var defaultBranch: DefaultBranch?

        public struct ScmProvider: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmProviders
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct DefaultBranch: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case scmGitReferences
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(scmProvider: ScmProvider? = nil, defaultBranch: DefaultBranch? = nil) {
            self.scmProvider = scmProvider
            self.defaultBranch = defaultBranch
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case scmRepositories
    }

    public init(attributes: Attributes? = nil, relationships: Relationships? = nil, id: String, links: ResourceLinks, type: `Type`) {
        self.attributes = attributes
        self.relationships = relationships
        self.id = id
        self.links = links
        self.type = type
    }
}

public enum PhasedReleaseState: String, Codable, CaseIterable {
    case inactive = "INACTIVE"
    case active = "ACTIVE"
    case paused = "PAUSED"
    case complete = "COMPLETE"
}

public struct CapabilitySetting: Codable {
    public var allowedInstances: AllowedInstances?
    public var description: String?
    public var key: Key?
    public var minInstances: Int?
    public var isVisible: Bool?
    public var options: [CapabilityOption]?
    public var isEnabledByDefault: Bool?
    public var name: String?

    public enum AllowedInstances: String, Codable, CaseIterable {
        case entry = "ENTRY"
        case single = "SINGLE"
        case multiple = "MULTIPLE"
    }

    public enum Key: String, Codable, CaseIterable {
        case icloudVersion = "ICLOUD_VERSION"
        case dataProtectionPermissionLevel = "DATA_PROTECTION_PERMISSION_LEVEL"
        case appleIDAuthAppConsent = "APPLE_ID_AUTH_APP_CONSENT"
    }

    public init(allowedInstances: AllowedInstances? = nil, description: String? = nil, key: Key? = nil, minInstances: Int? = nil, isVisible: Bool? = nil, options: [CapabilityOption]? = nil, isEnabledByDefault: Bool? = nil, name: String? = nil) {
        self.allowedInstances = allowedInstances
        self.description = description
        self.key = key
        self.minInstances = minInstances
        self.isVisible = isVisible
        self.options = options
        self.isEnabledByDefault = isEnabledByDefault
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case allowedInstances
        case description
        case key
        case minInstances
        case isVisible = "visible"
        case options
        case isEnabledByDefault = "enabledByDefault"
        case name
    }
}

public struct ReviewSubmissionItemCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var appStoreVersionExperiment: AppStoreVersionExperiment?
            public var appCustomProductPageVersion: AppCustomProductPageVersion?
            public var appEvent: AppEvent?
            public var reviewSubmission: ReviewSubmission
            public var appStoreVersion: AppStoreVersion?

            public struct AppStoreVersionExperiment: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperiments
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppCustomProductPageVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppEvent: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEvents
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct ReviewSubmission: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case reviewSubmissions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct AppStoreVersion: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appStoreVersionExperiment: AppStoreVersionExperiment? = nil, appCustomProductPageVersion: AppCustomProductPageVersion? = nil, appEvent: AppEvent? = nil, reviewSubmission: ReviewSubmission, appStoreVersion: AppStoreVersion? = nil) {
                self.appStoreVersionExperiment = appStoreVersionExperiment
                self.appCustomProductPageVersion = appCustomProductPageVersion
                self.appEvent = appEvent
                self.reviewSubmission = reviewSubmission
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case reviewSubmissionItems
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CertificatesResponse: Codable {
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [Certificate]

    public init(meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [Certificate]) {
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct AppPreOrderResponse: Codable {
    public var links: DocumentLinks
    /// AppPreOrder
    public var data: AppPreOrder
    public var included: [App]?

    public init(links: DocumentLinks, data: AppPreOrder, included: [App]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct ProfileResponse: Codable {
    public var included: [IncludedItem]?
    public var links: DocumentLinks
    /// Profile
    public var data: Profile

    public enum IncludedItem: Codable {
        case bundleID(BundleID)
        case device(Device)
        case certificate(Certificate)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(BundleID.self) {
                self = .bundleID(value)
            } else if let value = try? container.decode(Device.self) {
                self = .device(value)
            } else if let value = try? container.decode(Certificate.self) {
                self = .certificate(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .bundleID(let value): try container.encode(value)
            case .device(let value): try container.encode(value)
            case .certificate(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: DocumentLinks, data: Profile) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct BuildBetaGroupsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaAppClipInvocationLocalizationInlineCreate: Codable {
    public var relationships: Relationships?
    public var id: String?
    public var attributes: Attributes
    public var type: `Type`

    public struct Relationships: Codable {
        public var betaAppClipInvocation: BetaAppClipInvocation?

        public struct BetaAppClipInvocation: Codable {
            public var data: Data?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppClipInvocations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(data: Data? = nil) {
                self.data = data
            }
        }

        public init(betaAppClipInvocation: BetaAppClipInvocation? = nil) {
            self.betaAppClipInvocation = betaAppClipInvocation
        }
    }

    public struct Attributes: Codable {
        public var title: String
        public var locale: String

        public init(title: String, locale: String) {
            self.title = title
            self.locale = locale
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppClipInvocationLocalizations
    }

    public init(relationships: Relationships? = nil, id: String? = nil, attributes: Attributes, type: `Type`) {
        self.relationships = relationships
        self.id = id
        self.attributes = attributes
        self.type = type
    }
}

public struct App: Codable {
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var attributes: Attributes?
    public var type: `Type`

    public struct Relationships: Codable {
        public var endUserLicenseAgreement: EndUserLicenseAgreement?
        public var betaAppLocalizations: BetaAppLocalizations?
        public var prices: Prices?
        public var availableTerritories: AvailableTerritories?
        public var appClips: AppClips?
        public var appCustomProductPages: AppCustomProductPages?
        public var preOrder: PreOrder?
        public var appEvents: AppEvents?
        public var ciProduct: CiProduct?
        public var betaAppReviewDetail: BetaAppReviewDetail?
        public var builds: Builds?
        public var betaGroups: BetaGroups?
        public var appInfos: AppInfos?
        public var reviewSubmissions: ReviewSubmissions?
        public var gameCenterEnabledVersions: GameCenterEnabledVersions?
        public var betaLicenseAgreement: BetaLicenseAgreement?
        public var appStoreVersions: AppStoreVersions?
        public var inAppPurchases: InAppPurchases?
        public var preReleaseVersions: PreReleaseVersions?

        public struct EndUserLicenseAgreement: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case endUserLicenseAgreements
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct BetaAppLocalizations: Codable {
            public var meta: PagingInformation?
            public var data: [Datum]?
            public var links: Links?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil, links: Links? = nil) {
                self.meta = meta
                self.data = data
                self.links = links
            }
        }

        public struct Prices: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPrices
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AvailableTerritories: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case territories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppClips: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appClips
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppCustomProductPages: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPages
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct PreOrder: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreOrders
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppEvents: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appEvents
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct CiProduct: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case ciProducts
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct BetaAppReviewDetail: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppReviewDetails
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Builds: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public struct BetaGroups: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaGroups
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AppInfos: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appInfos
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct ReviewSubmissions: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case reviewSubmissions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct GameCenterEnabledVersions: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case gameCenterEnabledVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct BetaLicenseAgreement: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case betaLicenseAgreements
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersions: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public struct InAppPurchases: Codable {
            public var meta: PagingInformation?
            public var data: [Datum]?
            public var links: Links?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case inAppPurchases
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil, links: Links? = nil) {
                self.meta = meta
                self.data = data
                self.links = links
            }
        }

        public struct PreReleaseVersions: Codable {
            public var meta: PagingInformation?
            public var data: [Datum]?
            public var links: Links?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case preReleaseVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil, links: Links? = nil) {
                self.meta = meta
                self.data = data
                self.links = links
            }
        }

        public init(endUserLicenseAgreement: EndUserLicenseAgreement? = nil, betaAppLocalizations: BetaAppLocalizations? = nil, prices: Prices? = nil, availableTerritories: AvailableTerritories? = nil, appClips: AppClips? = nil, appCustomProductPages: AppCustomProductPages? = nil, preOrder: PreOrder? = nil, appEvents: AppEvents? = nil, ciProduct: CiProduct? = nil, betaAppReviewDetail: BetaAppReviewDetail? = nil, builds: Builds? = nil, betaGroups: BetaGroups? = nil, appInfos: AppInfos? = nil, reviewSubmissions: ReviewSubmissions? = nil, gameCenterEnabledVersions: GameCenterEnabledVersions? = nil, betaLicenseAgreement: BetaLicenseAgreement? = nil, appStoreVersions: AppStoreVersions? = nil, inAppPurchases: InAppPurchases? = nil, preReleaseVersions: PreReleaseVersions? = nil) {
            self.endUserLicenseAgreement = endUserLicenseAgreement
            self.betaAppLocalizations = betaAppLocalizations
            self.prices = prices
            self.availableTerritories = availableTerritories
            self.appClips = appClips
            self.appCustomProductPages = appCustomProductPages
            self.preOrder = preOrder
            self.appEvents = appEvents
            self.ciProduct = ciProduct
            self.betaAppReviewDetail = betaAppReviewDetail
            self.builds = builds
            self.betaGroups = betaGroups
            self.appInfos = appInfos
            self.reviewSubmissions = reviewSubmissions
            self.gameCenterEnabledVersions = gameCenterEnabledVersions
            self.betaLicenseAgreement = betaLicenseAgreement
            self.appStoreVersions = appStoreVersions
            self.inAppPurchases = inAppPurchases
            self.preReleaseVersions = preReleaseVersions
        }
    }

    public struct Attributes: Codable {
        public var contentRightsDeclaration: ContentRightsDeclaration?
        public var isOrEverWasMadeForKids: Bool?
        public var subscriptionStatusURLVersion: SubscriptionStatusURLVersion?
        public var name: String?
        public var subscriptionStatusURLForSandbox: URL?
        public var primaryLocale: String?
        public var bundleID: String?
        public var sku: String?
        public var subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion?
        public var isAvailableInNewTerritories: Bool?
        public var subscriptionStatusURL: URL?

        public enum ContentRightsDeclaration: String, Codable, CaseIterable {
            case doesNotUseThirdPartyContent = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
            case usesThirdPartyContent = "USES_THIRD_PARTY_CONTENT"
        }

        public init(contentRightsDeclaration: ContentRightsDeclaration? = nil, isOrEverWasMadeForKids: Bool? = nil, subscriptionStatusURLVersion: SubscriptionStatusURLVersion? = nil, name: String? = nil, subscriptionStatusURLForSandbox: URL? = nil, primaryLocale: String? = nil, bundleID: String? = nil, sku: String? = nil, subscriptionStatusURLVersionForSandbox: SubscriptionStatusURLVersion? = nil, isAvailableInNewTerritories: Bool? = nil, subscriptionStatusURL: URL? = nil) {
            self.contentRightsDeclaration = contentRightsDeclaration
            self.isOrEverWasMadeForKids = isOrEverWasMadeForKids
            self.subscriptionStatusURLVersion = subscriptionStatusURLVersion
            self.name = name
            self.subscriptionStatusURLForSandbox = subscriptionStatusURLForSandbox
            self.primaryLocale = primaryLocale
            self.bundleID = bundleID
            self.sku = sku
            self.subscriptionStatusURLVersionForSandbox = subscriptionStatusURLVersionForSandbox
            self.isAvailableInNewTerritories = isAvailableInNewTerritories
            self.subscriptionStatusURL = subscriptionStatusURL
        }

        private enum CodingKeys: String, CodingKey {
            case contentRightsDeclaration
            case isOrEverWasMadeForKids
            case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
            case name
            case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
            case primaryLocale
            case bundleID = "bundleId"
            case sku
            case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
            case isAvailableInNewTerritories = "availableInNewTerritories"
            case subscriptionStatusURL = "subscriptionStatusUrl"
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case apps
    }

    public init(id: String, links: ResourceLinks, relationships: Relationships? = nil, attributes: Attributes? = nil, type: `Type`) {
        self.id = id
        self.links = links
        self.relationships = relationships
        self.attributes = attributes
        self.type = type
    }
}

/// Parameter
public struct ErrorSourceParameter: Codable {
    public var parameter: String?

    public init(parameter: String? = nil) {
        self.parameter = parameter
    }
}

public struct PrereleaseVersion: Codable {
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`
    public var relationships: Relationships?
    public var attributes: Attributes?

    public enum `Type`: String, Codable, CaseIterable {
        case preReleaseVersions
    }

    public struct Relationships: Codable {
        public var app: App?
        public var builds: Builds?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Builds: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public init(app: App? = nil, builds: Builds? = nil) {
            self.app = app
            self.builds = builds
        }
    }

    public struct Attributes: Codable {
        public var version: String?
        public var platform: Platform?

        public init(version: String? = nil, platform: Platform? = nil) {
            self.version = version
            self.platform = platform
        }
    }

    public init(id: String, links: ResourceLinks, type: `Type`, relationships: Relationships? = nil, attributes: Attributes? = nil) {
        self.id = id
        self.links = links
        self.type = type
        self.relationships = relationships
        self.attributes = attributes
    }
}

public struct BetaGroupResponse: Codable {
    public var included: [IncludedItem]?
    public var links: DocumentLinks
    /// BetaGroup
    public var data: BetaGroup

    public enum IncludedItem: Codable {
        case app(App)
        case build(Build)
        case betaTester(BetaTester)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: DocumentLinks, data: BetaGroup) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct BetaAppLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var attributes: Attributes
        public var type: `Type`

        public struct Relationships: Codable {
            public var app: App

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App) {
                self.app = app
            }
        }

        public struct Attributes: Codable {
            public var feedbackEmail: String?
            public var privacyPolicyURL: String?
            public var tvOsPrivacyPolicy: String?
            public var marketingURL: String?
            public var description: String?
            public var locale: String

            public init(feedbackEmail: String? = nil, privacyPolicyURL: String? = nil, tvOsPrivacyPolicy: String? = nil, marketingURL: String? = nil, description: String? = nil, locale: String) {
                self.feedbackEmail = feedbackEmail
                self.privacyPolicyURL = privacyPolicyURL
                self.tvOsPrivacyPolicy = tvOsPrivacyPolicy
                self.marketingURL = marketingURL
                self.description = description
                self.locale = locale
            }

            private enum CodingKeys: String, CodingKey {
                case feedbackEmail
                case privacyPolicyURL = "privacyPolicyUrl"
                case tvOsPrivacyPolicy
                case marketingURL = "marketingUrl"
                case description
                case locale
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppLocalizations
        }

        public init(relationships: Relationships, attributes: Attributes, type: `Type`) {
            self.relationships = relationships
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildBundleFileSizesResponse: Codable {
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [BuildBundleFileSize]

    public init(meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [BuildBundleFileSize]) {
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct AppStoreReviewAttachmentUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var isUploaded: Bool?
            public var sourceFileChecksum: String?

            public init(isUploaded: Bool? = nil, sourceFileChecksum: String? = nil) {
                self.isUploaded = isUploaded
                self.sourceFileChecksum = sourceFileChecksum
            }

            private enum CodingKeys: String, CodingKey {
                case isUploaded = "uploaded"
                case sourceFileChecksum
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewAttachments
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiMacOsVersionResponse: Codable {
    public var included: [CiXcodeVersion]?
    public var links: DocumentLinks
    /// CiMacOsVersion
    public var data: CiMacOsVersion

    public init(included: [CiXcodeVersion]? = nil, links: DocumentLinks, data: CiMacOsVersion) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct BetaTester: Codable {
    public var relationships: Relationships?
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks
    public var attributes: Attributes?

    public struct Relationships: Codable {
        public var builds: Builds?
        public var apps: Apps?
        public var betaGroups: BetaGroups?

        public struct Builds: Codable {
            public var meta: PagingInformation?
            public var links: Links?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(meta: PagingInformation? = nil, links: Links? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.links = links
                self.data = data
            }
        }

        public struct Apps: Codable {
            public var meta: PagingInformation?
            public var links: Links?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(meta: PagingInformation? = nil, links: Links? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.links = links
                self.data = data
            }
        }

        public struct BetaGroups: Codable {
            public var meta: PagingInformation?
            public var links: Links?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaGroups
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(meta: PagingInformation? = nil, links: Links? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.links = links
                self.data = data
            }
        }

        public init(builds: Builds? = nil, apps: Apps? = nil, betaGroups: BetaGroups? = nil) {
            self.builds = builds
            self.apps = apps
            self.betaGroups = betaGroups
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaTesters
    }

    public struct Attributes: Codable {
        public var inviteType: BetaInviteType?
        public var lastName: String?
        public var email: String?
        public var firstName: String?

        public init(inviteType: BetaInviteType? = nil, lastName: String? = nil, email: String? = nil, firstName: String? = nil) {
            self.inviteType = inviteType
            self.lastName = lastName
            self.email = email
            self.firstName = firstName
        }
    }

    public init(relationships: Relationships? = nil, type: `Type`, id: String, links: ResourceLinks, attributes: Attributes? = nil) {
        self.relationships = relationships
        self.type = type
        self.id = id
        self.links = links
        self.attributes = attributes
    }
}

public struct AppStoreVersionPhasedRelease: Codable {
    public var links: ResourceLinks
    public var type: `Type`
    public var attributes: Attributes?
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionPhasedReleases
    }

    public struct Attributes: Codable {
        public var phasedReleaseState: PhasedReleaseState?
        public var totalPauseDuration: Int?
        public var currentDayNumber: Int?
        public var startDate: Date?

        public init(phasedReleaseState: PhasedReleaseState? = nil, totalPauseDuration: Int? = nil, currentDayNumber: Int? = nil, startDate: Date? = nil) {
            self.phasedReleaseState = phasedReleaseState
            self.totalPauseDuration = totalPauseDuration
            self.currentDayNumber = currentDayNumber
            self.startDate = startDate
        }
    }

    public init(links: ResourceLinks, type: `Type`, attributes: Attributes? = nil, id: String) {
        self.links = links
        self.type = type
        self.attributes = attributes
        self.id = id
    }
}

public struct BuildBetaDetail: Codable {
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`
    public var relationships: Relationships?
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var internalBuildState: InternalBetaState?
        public var isAutoNotifyEnabled: Bool?
        public var externalBuildState: ExternalBetaState?

        public init(internalBuildState: InternalBetaState? = nil, isAutoNotifyEnabled: Bool? = nil, externalBuildState: ExternalBetaState? = nil) {
            self.internalBuildState = internalBuildState
            self.isAutoNotifyEnabled = isAutoNotifyEnabled
            self.externalBuildState = externalBuildState
        }

        private enum CodingKeys: String, CodingKey {
            case internalBuildState
            case isAutoNotifyEnabled = "autoNotifyEnabled"
            case externalBuildState
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case buildBetaDetails
    }

    public struct Relationships: Codable {
        public var build: Build?

        public struct Build: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(build: Build? = nil) {
            self.build = build
        }
    }

    public init(attributes: Attributes? = nil, id: String, type: `Type`, relationships: Relationships? = nil, links: ResourceLinks) {
        self.attributes = attributes
        self.id = id
        self.type = type
        self.relationships = relationships
        self.links = links
    }
}

public struct CiProductResponse: Codable {
    /// CiProduct
    public var data: CiProduct
    public var links: DocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case app(App)
        case bundleID(BundleID)
        case scmRepository(ScmRepository)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BundleID.self) {
                self = .bundleID(value)
            } else if let value = try? container.decode(ScmRepository.self) {
                self = .scmRepository(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .bundleID(let value): try container.encode(value)
            case .scmRepository(let value): try container.encode(value)
            }
        }
    }

    public init(data: CiProduct, links: DocumentLinks, included: [IncludedItem]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppEventsResponse: Codable {
    public var meta: PagingInformation?
    public var included: [AppEventLocalization]?
    public var data: [AppEvent]
    public var links: PagedDocumentLinks

    public init(meta: PagingInformation? = nil, included: [AppEventLocalization]? = nil, data: [AppEvent], links: PagedDocumentLinks) {
        self.meta = meta
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct UserInvitationsResponse: Codable {
    public var included: [App]?
    public var data: [UserInvitation]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(included: [App]? = nil, data: [UserInvitation], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.included = included
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppClipDefaultExperiencesResponse: Codable {
    public var included: [IncludedItem]?
    public var data: [AppClipDefaultExperience]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appClip(AppClip)
        case appStoreVersion(AppStoreVersion)
        case appClipDefaultExperienceLocalization(AppClipDefaultExperienceLocalization)
        case appClipAppStoreReviewDetail(AppClipAppStoreReviewDetail)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppClipDefaultExperienceLocalization.self) {
                self = .appClipDefaultExperienceLocalization(value)
            } else if let value = try? container.decode(AppClipAppStoreReviewDetail.self) {
                self = .appClipAppStoreReviewDetail(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClip(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .appClipDefaultExperienceLocalization(let value): try container.encode(value)
            case .appClipAppStoreReviewDetail(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, data: [AppClipDefaultExperience], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.included = included
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct DeviceResponse: Codable {
    public var links: DocumentLinks
    /// Device
    public var data: Device

    public init(links: DocumentLinks, data: Device) {
        self.links = links
        self.data = data
    }
}

public struct CiBuildRunsResponse: Codable {
    public var data: [CiBuildRun]
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case build(Build)
        case ciWorkflow(CiWorkflow)
        case ciProduct(CiProduct)
        case scmGitReference(ScmGitReference)
        case scmPullRequest(ScmPullRequest)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(CiWorkflow.self) {
                self = .ciWorkflow(value)
            } else if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(ScmGitReference.self) {
                self = .scmGitReference(value)
            } else if let value = try? container.decode(ScmPullRequest.self) {
                self = .scmPullRequest(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .build(let value): try container.encode(value)
            case .ciWorkflow(let value): try container.encode(value)
            case .ciProduct(let value): try container.encode(value)
            case .scmGitReference(let value): try container.encode(value)
            case .scmPullRequest(let value): try container.encode(value)
            }
        }
    }

    public init(data: [CiBuildRun], meta: PagingInformation? = nil, links: PagedDocumentLinks, included: [IncludedItem]? = nil) {
        self.data = data
        self.meta = meta
        self.links = links
        self.included = included
    }
}

public struct AppEventVideoClip: Codable {
    public var links: ResourceLinks
    public var type: `Type`
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case appEventVideoClips
    }

    public struct Attributes: Codable {
        public var fileName: String?
        public var previewFrameTimeCode: String?
        public var fileSize: Int?
        public var assetDeliveryState: AppMediaAssetState?
        public var videoURL: String?
        public var uploadOperations: [UploadOperation]?
        public var appEventAssetType: AppEventAssetType?
        public var previewImage: ImageAsset?

        public init(fileName: String? = nil, previewFrameTimeCode: String? = nil, fileSize: Int? = nil, assetDeliveryState: AppMediaAssetState? = nil, videoURL: String? = nil, uploadOperations: [UploadOperation]? = nil, appEventAssetType: AppEventAssetType? = nil, previewImage: ImageAsset? = nil) {
            self.fileName = fileName
            self.previewFrameTimeCode = previewFrameTimeCode
            self.fileSize = fileSize
            self.assetDeliveryState = assetDeliveryState
            self.videoURL = videoURL
            self.uploadOperations = uploadOperations
            self.appEventAssetType = appEventAssetType
            self.previewImage = previewImage
        }

        private enum CodingKeys: String, CodingKey {
            case fileName
            case previewFrameTimeCode
            case fileSize
            case assetDeliveryState
            case videoURL = "videoUrl"
            case uploadOperations
            case appEventAssetType
            case previewImage
        }
    }

    public struct Relationships: Codable {
        public var appEventLocalization: AppEventLocalization?

        public struct AppEventLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appEventLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appEventLocalization: AppEventLocalization? = nil) {
            self.appEventLocalization = appEventLocalization
        }
    }

    public init(links: ResourceLinks, type: `Type`, attributes: Attributes? = nil, relationships: Relationships? = nil, id: String) {
        self.links = links
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.id = id
    }
}

public enum CiActionType: String, Codable, CaseIterable {
    case build = "BUILD"
    case analyze = "ANALYZE"
    case test = "TEST"
    case archive = "ARCHIVE"
}

public enum CiGitRefKind: String, Codable, CaseIterable {
    case branch = "BRANCH"
    case tag = "TAG"
}

public struct BetaGroup: Codable {
    public var links: ResourceLinks
    public var id: String
    public var relationships: Relationships?
    public var type: `Type`
    public var attributes: Attributes?

    public struct Relationships: Codable {
        public var app: App?
        public var builds: Builds?
        public var betaTesters: BetaTesters?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Builds: Codable {
            public var meta: PagingInformation?
            public var links: Links?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(meta: PagingInformation? = nil, links: Links? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.links = links
                self.data = data
            }
        }

        public struct BetaTesters: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaTesters
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public init(app: App? = nil, builds: Builds? = nil, betaTesters: BetaTesters? = nil) {
            self.app = app
            self.builds = builds
            self.betaTesters = betaTesters
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaGroups
    }

    public struct Attributes: Codable {
        public var isPublicLinkLimitEnabled: Bool?
        public var isIosBuildsAvailableForAppleSiliconMac: Bool?
        public var hasAccessToAllBuilds: Bool?
        public var name: String?
        public var isFeedbackEnabled: Bool?
        public var publicLinkID: String?
        public var isPublicLinkEnabled: Bool?
        public var isInternalGroup: Bool?
        public var publicLinkLimit: Int?
        public var publicLink: String?
        public var createdDate: Date?

        public init(isPublicLinkLimitEnabled: Bool? = nil, isIosBuildsAvailableForAppleSiliconMac: Bool? = nil, hasAccessToAllBuilds: Bool? = nil, name: String? = nil, isFeedbackEnabled: Bool? = nil, publicLinkID: String? = nil, isPublicLinkEnabled: Bool? = nil, isInternalGroup: Bool? = nil, publicLinkLimit: Int? = nil, publicLink: String? = nil, createdDate: Date? = nil) {
            self.isPublicLinkLimitEnabled = isPublicLinkLimitEnabled
            self.isIosBuildsAvailableForAppleSiliconMac = isIosBuildsAvailableForAppleSiliconMac
            self.hasAccessToAllBuilds = hasAccessToAllBuilds
            self.name = name
            self.isFeedbackEnabled = isFeedbackEnabled
            self.publicLinkID = publicLinkID
            self.isPublicLinkEnabled = isPublicLinkEnabled
            self.isInternalGroup = isInternalGroup
            self.publicLinkLimit = publicLinkLimit
            self.publicLink = publicLink
            self.createdDate = createdDate
        }

        private enum CodingKeys: String, CodingKey {
            case isPublicLinkLimitEnabled = "publicLinkLimitEnabled"
            case isIosBuildsAvailableForAppleSiliconMac = "iosBuildsAvailableForAppleSiliconMac"
            case hasAccessToAllBuilds
            case name
            case isFeedbackEnabled = "feedbackEnabled"
            case publicLinkID = "publicLinkId"
            case isPublicLinkEnabled = "publicLinkEnabled"
            case isInternalGroup
            case publicLinkLimit
            case publicLink
            case createdDate
        }
    }

    public init(links: ResourceLinks, id: String, relationships: Relationships? = nil, type: `Type`, attributes: Attributes? = nil) {
        self.links = links
        self.id = id
        self.relationships = relationships
        self.type = type
        self.attributes = attributes
    }
}

public struct BetaTesterAppsLinkagesResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [Datum]
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(links: PagedDocumentLinks, data: [Datum], meta: PagingInformation? = nil) {
        self.links = links
        self.data = data
        self.meta = meta
    }
}

public struct AppScreenshotsResponse: Codable {
    public var included: [AppScreenshotSet]?
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [AppScreenshot]

    public init(included: [AppScreenshotSet]? = nil, meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [AppScreenshot]) {
        self.included = included
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct BetaLicenseAgreement: Codable {
    public var type: `Type`
    public var relationships: Relationships?
    public var links: ResourceLinks
    public var id: String
    public var attributes: Attributes?

    public enum `Type`: String, Codable, CaseIterable {
        case betaLicenseAgreements
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public struct Attributes: Codable {
        public var agreementText: String?

        public init(agreementText: String? = nil) {
            self.agreementText = agreementText
        }
    }

    public init(type: `Type`, relationships: Relationships? = nil, links: ResourceLinks, id: String, attributes: Attributes? = nil) {
        self.type = type
        self.relationships = relationships
        self.links = links
        self.id = id
        self.attributes = attributes
    }
}

public struct AppCustomProductPageLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var promotionalText: String?
            public var locale: String

            public init(promotionalText: String? = nil, locale: String) {
                self.promotionalText = promotionalText
                self.locale = locale
            }
        }

        public struct Relationships: Codable {
            public var appCustomProductPageVersion: AppCustomProductPageVersion

            public struct AppCustomProductPageVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appCustomProductPageVersion: AppCustomProductPageVersion) {
                self.appCustomProductPageVersion = appCustomProductPageVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appCustomProductPageLocalizations
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipDomainStatus: Codable {
    public var links: ResourceLinks
    public var type: `Type`
    public var attributes: Attributes?
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case appClipDomainStatuses
    }

    public struct Attributes: Codable {
        public var lastUpdatedDate: Date?
        public var domains: [Domain]?

        public struct Domain: Codable {
            public var errorCode: ErrorCode?
            public var lastUpdatedDate: Date?
            public var domain: String?
            public var isValid: Bool?

            public enum ErrorCode: String, Codable, CaseIterable {
                case badHTTPResponse = "BAD_HTTP_RESPONSE"
                case badJSONContent = "BAD_JSON_CONTENT"
                case badPkcs7Signature = "BAD_PKCS7_SIGNATURE"
                case cannotReachAasaFile = "CANNOT_REACH_AASA_FILE"
                case dnsError = "DNS_ERROR"
                case insecureRedirectsForbidden = "INSECURE_REDIRECTS_FORBIDDEN"
                case invalidEntitlementMissingSection = "INVALID_ENTITLEMENT_MISSING_SECTION"
                case invalidEntitlementSyntaxError = "INVALID_ENTITLEMENT_SYNTAX_ERROR"
                case invalidEntitlementUnhandledSection = "INVALID_ENTITLEMENT_UNHANDLED_SECTION"
                case invalidEntitlementUnknownID = "INVALID_ENTITLEMENT_UNKNOWN_ID"
                case networkError = "NETWORK_ERROR"
                case networkErrorTemporary = "NETWORK_ERROR_TEMPORARY"
                case otherError = "OTHER_ERROR"
                case timeout = "TIMEOUT"
                case tlsError = "TLS_ERROR"
                case unexpectedError = "UNEXPECTED_ERROR"
            }

            public init(errorCode: ErrorCode? = nil, lastUpdatedDate: Date? = nil, domain: String? = nil, isValid: Bool? = nil) {
                self.errorCode = errorCode
                self.lastUpdatedDate = lastUpdatedDate
                self.domain = domain
                self.isValid = isValid
            }
        }

        public init(lastUpdatedDate: Date? = nil, domains: [Domain]? = nil) {
            self.lastUpdatedDate = lastUpdatedDate
            self.domains = domains
        }
    }

    public init(links: ResourceLinks, type: `Type`, attributes: Attributes? = nil, id: String) {
        self.links = links
        self.type = type
        self.attributes = attributes
        self.id = id
    }
}

public struct UserResponse: Codable {
    /// User
    public var data: User
    public var links: DocumentLinks
    public var included: [App]?

    public init(data: User, links: DocumentLinks, included: [App]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public enum PreviewType: String, Codable, CaseIterable {
    case iphone65 = "IPHONE_65"
    case iphone58 = "IPHONE_58"
    case iphone55 = "IPHONE_55"
    case iphone47 = "IPHONE_47"
    case iphone40 = "IPHONE_40"
    case iphone35 = "IPHONE_35"
    case ipadPro3gen129 = "IPAD_PRO_3GEN_129"
    case ipadPro3gen11 = "IPAD_PRO_3GEN_11"
    case ipadPro129 = "IPAD_PRO_129"
    case ipad105 = "IPAD_105"
    case ipad97 = "IPAD_97"
    case desktop = "DESKTOP"
    case watchSeries4 = "WATCH_SERIES_4"
    case watchSeries3 = "WATCH_SERIES_3"
    case appleTv = "APPLE_TV"
}

public struct AppEventVideoClipResponse: Codable {
    /// AppEventVideoClip
    public var data: AppEventVideoClip
    public var links: DocumentLinks
    public var included: [AppEventLocalization]?

    public init(data: AppEventVideoClip, links: DocumentLinks, included: [AppEventLocalization]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppCustomProductPageUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appCustomProductPages
        }

        public struct Attributes: Codable {
            public var name: String?
            public var isVisible: Bool?

            public init(name: String? = nil, isVisible: Bool? = nil) {
                self.name = name
                self.isVisible = isVisible
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case isVisible = "visible"
            }
        }

        public init(id: String, type: `Type`, attributes: Attributes? = nil) {
            self.id = id
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipsResponse: Codable {
    public var meta: PagingInformation?
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var data: [AppClip]

    public enum IncludedItem: Codable {
        case app(App)
        case appClipDefaultExperience(AppClipDefaultExperience)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appClipDefaultExperience(let value): try container.encode(value)
            }
        }
    }

    public init(meta: PagingInformation? = nil, included: [IncludedItem]? = nil, links: PagedDocumentLinks, data: [AppClip]) {
        self.meta = meta
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct BetaAppLocalizationResponse: Codable {
    public var links: DocumentLinks
    /// BetaAppLocalization
    public var data: BetaAppLocalization
    public var included: [App]?

    public init(links: DocumentLinks, data: BetaAppLocalization, included: [App]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct ProfilesResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [Profile]
    public var included: [IncludedItem]?
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case bundleID(BundleID)
        case device(Device)
        case certificate(Certificate)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(BundleID.self) {
                self = .bundleID(value)
            } else if let value = try? container.decode(Device.self) {
                self = .device(value)
            } else if let value = try? container.decode(Certificate.self) {
                self = .certificate(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .bundleID(let value): try container.encode(value)
            case .device(let value): try container.encode(value)
            case .certificate(let value): try container.encode(value)
            }
        }
    }

    public init(links: PagedDocumentLinks, data: [Profile], included: [IncludedItem]? = nil, meta: PagingInformation? = nil) {
        self.links = links
        self.data = data
        self.included = included
        self.meta = meta
    }
}

public struct AppPreviewSetResponse: Codable {
    public var links: DocumentLinks
    /// AppPreviewSet
    public var data: AppPreviewSet
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)
        case appPreview(AppPreview)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else if let value = try? container.decode(AppPreview.self) {
                self = .appPreview(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            case .appPreview(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, data: AppPreviewSet, included: [IncludedItem]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct CiArtifact: Codable {
    public var type: `Type`
    public var links: ResourceLinks
    public var attributes: Attributes?
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case ciArtifacts
    }

    public struct Attributes: Codable {
        public var downloadURL: URL?
        public var fileSize: Int?
        public var fileName: String?
        public var fileType: FileType?

        public enum FileType: String, Codable, CaseIterable {
            case archive = "ARCHIVE"
            case archiveExport = "ARCHIVE_EXPORT"
            case logBundle = "LOG_BUNDLE"
            case resultBundle = "RESULT_BUNDLE"
            case testProducts = "TEST_PRODUCTS"
            case xcodebuildProducts = "XCODEBUILD_PRODUCTS"
        }

        public init(downloadURL: URL? = nil, fileSize: Int? = nil, fileName: String? = nil, fileType: FileType? = nil) {
            self.downloadURL = downloadURL
            self.fileSize = fileSize
            self.fileName = fileName
            self.fileType = fileType
        }

        private enum CodingKeys: String, CodingKey {
            case downloadURL = "downloadUrl"
            case fileSize
            case fileName
            case fileType
        }
    }

    public init(type: `Type`, links: ResourceLinks, attributes: Attributes? = nil, id: String) {
        self.type = type
        self.links = links
        self.attributes = attributes
        self.id = id
    }
}

public struct AppInfo: Codable {
    public var links: ResourceLinks
    public var id: String
    public var relationships: Relationships?
    public var type: `Type`
    public var attributes: Attributes?

    public struct Relationships: Codable {
        public var appInfoLocalizations: AppInfoLocalizations?
        public var primaryCategory: PrimaryCategory?
        public var secondaryCategory: SecondaryCategory?
        public var secondarySubcategoryTwo: SecondarySubcategoryTwo?
        public var primarySubcategoryTwo: PrimarySubcategoryTwo?
        public var app: App?
        public var ageRatingDeclaration: AgeRatingDeclaration?
        public var secondarySubcategoryOne: SecondarySubcategoryOne?
        public var primarySubcategoryOne: PrimarySubcategoryOne?

        public struct AppInfoLocalizations: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appInfoLocalizations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public struct PrimaryCategory: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct SecondaryCategory: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct SecondarySubcategoryTwo: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct PrimarySubcategoryTwo: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AgeRatingDeclaration: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case ageRatingDeclarations
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct SecondarySubcategoryOne: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct PrimarySubcategoryOne: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(appInfoLocalizations: AppInfoLocalizations? = nil, primaryCategory: PrimaryCategory? = nil, secondaryCategory: SecondaryCategory? = nil, secondarySubcategoryTwo: SecondarySubcategoryTwo? = nil, primarySubcategoryTwo: PrimarySubcategoryTwo? = nil, app: App? = nil, ageRatingDeclaration: AgeRatingDeclaration? = nil, secondarySubcategoryOne: SecondarySubcategoryOne? = nil, primarySubcategoryOne: PrimarySubcategoryOne? = nil) {
            self.appInfoLocalizations = appInfoLocalizations
            self.primaryCategory = primaryCategory
            self.secondaryCategory = secondaryCategory
            self.secondarySubcategoryTwo = secondarySubcategoryTwo
            self.primarySubcategoryTwo = primarySubcategoryTwo
            self.app = app
            self.ageRatingDeclaration = ageRatingDeclaration
            self.secondarySubcategoryOne = secondarySubcategoryOne
            self.primarySubcategoryOne = primarySubcategoryOne
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appInfos
    }

    public struct Attributes: Codable {
        public var appStoreAgeRating: AppStoreAgeRating?
        public var appStoreState: AppStoreVersionState?
        public var brazilAgeRating: BrazilAgeRating?
        public var kidsAgeBand: KidsAgeBand?

        public init(appStoreAgeRating: AppStoreAgeRating? = nil, appStoreState: AppStoreVersionState? = nil, brazilAgeRating: BrazilAgeRating? = nil, kidsAgeBand: KidsAgeBand? = nil) {
            self.appStoreAgeRating = appStoreAgeRating
            self.appStoreState = appStoreState
            self.brazilAgeRating = brazilAgeRating
            self.kidsAgeBand = kidsAgeBand
        }
    }

    public init(links: ResourceLinks, id: String, relationships: Relationships? = nil, type: `Type`, attributes: Attributes? = nil) {
        self.links = links
        self.id = id
        self.relationships = relationships
        self.type = type
        self.attributes = attributes
    }
}

public struct AppPreviewSetsResponse: Codable {
    public var meta: PagingInformation?
    public var data: [AppPreviewSet]
    public var links: PagedDocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)
        case appStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)
        case appPreview(AppPreview)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
                self = .appStoreVersionExperimentTreatmentLocalization(value)
            } else if let value = try? container.decode(AppPreview.self) {
                self = .appPreview(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatmentLocalization(let value): try container.encode(value)
            case .appPreview(let value): try container.encode(value)
            }
        }
    }

    public init(meta: PagingInformation? = nil, data: [AppPreviewSet], links: PagedDocumentLinks, included: [IncludedItem]? = nil) {
        self.meta = meta
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppScreenshotSetAppScreenshotsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppStoreVersionPromotionResponse: Codable {
    public var links: DocumentLinks
    /// AppStoreVersionPromotion
    public var data: AppStoreVersionPromotion

    public init(links: DocumentLinks, data: AppStoreVersionPromotion) {
        self.links = links
        self.data = data
    }
}

public enum BetaReviewState: String, Codable, CaseIterable {
    case waitingForReview = "WAITING_FOR_REVIEW"
    case inReview = "IN_REVIEW"
    case rejected = "REJECTED"
    case approved = "APPROVED"
}

public struct ProfileCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`
        public var relationships: Relationships

        public struct Attributes: Codable {
            public var name: String
            public var profileType: ProfileType

            public enum ProfileType: String, Codable, CaseIterable {
                case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
                case iosAppStore = "IOS_APP_STORE"
                case iosAppAdhoc = "IOS_APP_ADHOC"
                case iosAppInhouse = "IOS_APP_INHOUSE"
                case macAppDevelopment = "MAC_APP_DEVELOPMENT"
                case macAppStore = "MAC_APP_STORE"
                case macAppDirect = "MAC_APP_DIRECT"
                case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
                case tvosAppStore = "TVOS_APP_STORE"
                case tvosAppAdhoc = "TVOS_APP_ADHOC"
                case tvosAppInhouse = "TVOS_APP_INHOUSE"
                case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
                case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
                case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
            }

            public init(name: String, profileType: ProfileType) {
                self.name = name
                self.profileType = profileType
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case profiles
        }

        public struct Relationships: Codable {
            public var devices: Devices?
            public var bundleID: BundleID
            public var certificates: Certificates

            public struct Devices: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case devices
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct BundleID: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case bundleIDs = "bundleIds"
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Certificates: Codable {
                public var data: [Datum]

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case certificates
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public init(devices: Devices? = nil, bundleID: BundleID, certificates: Certificates) {
                self.devices = devices
                self.bundleID = bundleID
                self.certificates = certificates
            }

            private enum CodingKeys: String, CodingKey {
                case devices
                case bundleID = "bundleId"
                case certificates
            }
        }

        public init(attributes: Attributes, type: `Type`, relationships: Relationships) {
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BundleIDResponse: Codable {
    public var links: DocumentLinks
    /// BundleId
    public var data: BundleID
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case profile(Profile)
        case bundleIDCapability(BundleIDCapability)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Profile.self) {
                self = .profile(value)
            } else if let value = try? container.decode(BundleIDCapability.self) {
                self = .bundleIDCapability(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .profile(let value): try container.encode(value)
            case .bundleIDCapability(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, data: BundleID, included: [IncludedItem]? = nil) {
        self.links = links
        self.data = data
        self.included = included
    }
}

public struct AppBetaTestersLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct ErrorResponse: Codable {
    public var errors: [Error]?

    public struct Error: Codable {
        public var code: String
        public var status: String
        public var detail: String
        public var id: String?
        public var source: Source?
        public var title: String

        public enum Source: Codable {
            case errorSourcePointer(ErrorSourcePointer)
            case errorSourceParameter(ErrorSourceParameter)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(ErrorSourcePointer.self) {
                    self = .errorSourcePointer(value)
                } else if let value = try? container.decode(ErrorSourceParameter.self) {
                    self = .errorSourceParameter(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .errorSourcePointer(let value): try container.encode(value)
                case .errorSourceParameter(let value): try container.encode(value)
                }
            }
        }

        public init(code: String, status: String, detail: String, id: String? = nil, source: Source? = nil, title: String) {
            self.code = code
            self.status = status
            self.detail = detail
            self.id = id
            self.source = source
            self.title = title
        }
    }

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

public struct BetaBuildLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case betaBuildLocalizations
        }

        public struct Attributes: Codable {
            public var whatsNew: String?

            public init(whatsNew: String? = nil) {
                self.whatsNew = whatsNew
            }
        }

        public init(id: String, type: `Type`, attributes: Attributes? = nil) {
            self.id = id
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEventVideoClipCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var fileSize: Int
            public var appEventAssetType: AppEventAssetType
            public var fileName: String
            public var previewFrameTimeCode: String?

            public init(fileSize: Int, appEventAssetType: AppEventAssetType, fileName: String, previewFrameTimeCode: String? = nil) {
                self.fileSize = fileSize
                self.appEventAssetType = appEventAssetType
                self.fileName = fileName
                self.previewFrameTimeCode = previewFrameTimeCode
            }
        }

        public struct Relationships: Codable {
            public var appEventLocalization: AppEventLocalization

            public struct AppEventLocalization: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEventLocalizations
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appEventLocalization: AppEventLocalization) {
                self.appEventLocalization = appEventLocalization
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appEventVideoClips
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct PrereleaseVersionResponse: Codable {
    public var included: [IncludedItem]?
    public var links: DocumentLinks
    /// PrereleaseVersion
    public var data: PrereleaseVersion

    public enum IncludedItem: Codable {
        case build(Build)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .build(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: DocumentLinks, data: PrereleaseVersion) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct AgeRatingDeclarationResponse: Codable {
    /// AgeRatingDeclaration
    public var data: AgeRatingDeclaration
    public var links: DocumentLinks

    public init(data: AgeRatingDeclaration, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppPreviewResponse: Codable {
    public var included: [AppPreviewSet]?
    public var links: DocumentLinks
    /// AppPreview
    public var data: AppPreview

    public init(included: [AppPreviewSet]? = nil, links: DocumentLinks, data: AppPreview) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct AppScreenshotSet: Codable {
    public var relationships: Relationships?
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks
    public var attributes: Attributes?

    public struct Relationships: Codable {
        public var appCustomProductPageLocalization: AppCustomProductPageLocalization?
        public var appStoreVersionLocalization: AppStoreVersionLocalization?
        public var appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization?
        public var appScreenshots: AppScreenshots?

        public struct AppCustomProductPageLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersionLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersionExperimentTreatmentLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperimentTreatmentLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppScreenshots: Codable {
            public var links: Links?
            public var data: [Datum]?
            public var meta: PagingInformation?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshots
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: [Datum]? = nil, meta: PagingInformation? = nil) {
                self.links = links
                self.data = data
                self.meta = meta
            }
        }

        public init(appCustomProductPageLocalization: AppCustomProductPageLocalization? = nil, appStoreVersionLocalization: AppStoreVersionLocalization? = nil, appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization? = nil, appScreenshots: AppScreenshots? = nil) {
            self.appCustomProductPageLocalization = appCustomProductPageLocalization
            self.appStoreVersionLocalization = appStoreVersionLocalization
            self.appStoreVersionExperimentTreatmentLocalization = appStoreVersionExperimentTreatmentLocalization
            self.appScreenshots = appScreenshots
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appScreenshotSets
    }

    public struct Attributes: Codable {
        public var screenshotDisplayType: ScreenshotDisplayType?

        public init(screenshotDisplayType: ScreenshotDisplayType? = nil) {
            self.screenshotDisplayType = screenshotDisplayType
        }
    }

    public init(relationships: Relationships? = nil, type: `Type`, id: String, links: ResourceLinks, attributes: Attributes? = nil) {
        self.relationships = relationships
        self.type = type
        self.id = id
        self.links = links
        self.attributes = attributes
    }
}

public struct CiMacOsVersionsResponse: Codable {
    public var included: [CiXcodeVersion]?
    public var data: [CiMacOsVersion]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(included: [CiXcodeVersion]? = nil, data: [CiMacOsVersion], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.included = included
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppClipDefaultExperienceLocalizationsResponse: Codable {
    public var meta: PagingInformation?
    public var data: [AppClipDefaultExperienceLocalization]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks

    public enum IncludedItem: Codable {
        case appClipDefaultExperience(AppClipDefaultExperience)
        case appClipHeaderImage(AppClipHeaderImage)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else if let value = try? container.decode(AppClipHeaderImage.self) {
                self = .appClipHeaderImage(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClipDefaultExperience(let value): try container.encode(value)
            case .appClipHeaderImage(let value): try container.encode(value)
            }
        }
    }

    public init(meta: PagingInformation? = nil, data: [AppClipDefaultExperienceLocalization], included: [IncludedItem]? = nil, links: PagedDocumentLinks) {
        self.meta = meta
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BundleIDCapability: Codable {
    public var id: String
    public var attributes: Attributes?
    public var type: `Type`
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var capabilityType: CapabilityType?
        public var settings: [CapabilitySetting]?

        public init(capabilityType: CapabilityType? = nil, settings: [CapabilitySetting]? = nil) {
            self.capabilityType = capabilityType
            self.settings = settings
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case bundleIDCapabilities = "bundleIdCapabilities"
    }

    public init(id: String, attributes: Attributes? = nil, type: `Type`, links: ResourceLinks) {
        self.id = id
        self.attributes = attributes
        self.type = type
        self.links = links
    }
}

public struct InAppPurchasesResponse: Codable {
    public var meta: PagingInformation?
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var data: [InAppPurchase]

    public init(meta: PagingInformation? = nil, included: [App]? = nil, links: PagedDocumentLinks, data: [InAppPurchase]) {
        self.meta = meta
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct AppStoreReviewAttachmentsResponse: Codable {
    public var data: [AppStoreReviewAttachment]
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var included: [AppStoreReviewDetail]?

    public init(data: [AppStoreReviewAttachment], meta: PagingInformation? = nil, links: PagedDocumentLinks, included: [AppStoreReviewDetail]? = nil) {
        self.data = data
        self.meta = meta
        self.links = links
        self.included = included
    }
}

public struct AppEventUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var purchaseRequirement: PurchaseRequirement?
            public var primaryLocale: String?
            public var referenceName: String?
            public var territorySchedules: [TerritorySchedule]?
            public var deepLink: URL?
            public var priority: Priority?
            public var purpose: Purpose?
            public var badge: Badge?

            public enum PurchaseRequirement: String, Codable, CaseIterable {
                case noCostAssociated = "NO_COST_ASSOCIATED"
                case inAppPurchase = "IN_APP_PURCHASE"
                case subscription = "SUBSCRIPTION"
                case inAppPurchaseAndSubscription = "IN_APP_PURCHASE_AND_SUBSCRIPTION"
                case inAppPurchaseOrSubscription = "IN_APP_PURCHASE_OR_SUBSCRIPTION"
            }

            public struct TerritorySchedule: Codable {
                public var territories: [String]?
                public var eventStart: Date?
                public var publishStart: Date?
                public var eventEnd: Date?

                public init(territories: [String]? = nil, eventStart: Date? = nil, publishStart: Date? = nil, eventEnd: Date? = nil) {
                    self.territories = territories
                    self.eventStart = eventStart
                    self.publishStart = publishStart
                    self.eventEnd = eventEnd
                }
            }

            public enum Priority: String, Codable, CaseIterable {
                case high = "HIGH"
                case normal = "NORMAL"
            }

            public enum Purpose: String, Codable, CaseIterable {
                case appropriateForAllUsers = "APPROPRIATE_FOR_ALL_USERS"
                case attractNewUsers = "ATTRACT_NEW_USERS"
                case keepActiveUsersInformed = "KEEP_ACTIVE_USERS_INFORMED"
                case bringBackLapsedUsers = "BRING_BACK_LAPSED_USERS"
            }

            public enum Badge: String, Codable, CaseIterable {
                case liveEvent = "LIVE_EVENT"
                case premiere = "PREMIERE"
                case challenge = "CHALLENGE"
                case competition = "COMPETITION"
                case newSeason = "NEW_SEASON"
                case majorUpdate = "MAJOR_UPDATE"
                case specialEvent = "SPECIAL_EVENT"
            }

            public init(purchaseRequirement: PurchaseRequirement? = nil, primaryLocale: String? = nil, referenceName: String? = nil, territorySchedules: [TerritorySchedule]? = nil, deepLink: URL? = nil, priority: Priority? = nil, purpose: Purpose? = nil, badge: Badge? = nil) {
                self.purchaseRequirement = purchaseRequirement
                self.primaryLocale = primaryLocale
                self.referenceName = referenceName
                self.territorySchedules = territorySchedules
                self.deepLink = deepLink
                self.priority = priority
                self.purpose = purpose
                self.badge = badge
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appEvents
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ReviewSubmissionItemResponse: Codable {
    public var included: [IncludedItem]?
    public var links: DocumentLinks
    /// ReviewSubmissionItem
    public var data: ReviewSubmissionItem

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appCustomProductPageVersion(AppCustomProductPageVersion)
        case appStoreVersionExperiment(AppStoreVersionExperiment)
        case appEvent(AppEvent)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else if let value = try? container.decode(AppStoreVersionExperiment.self) {
                self = .appStoreVersionExperiment(value)
            } else if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appCustomProductPageVersion(let value): try container.encode(value)
            case .appStoreVersionExperiment(let value): try container.encode(value)
            case .appEvent(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, links: DocumentLinks, data: ReviewSubmissionItem) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct Certificate: Codable {
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case certificates
    }

    public struct Attributes: Codable {
        public var serialNumber: String?
        public var name: String?
        public var certificateContent: String?
        public var platform: BundleIDPlatform?
        public var certificateType: CertificateType?
        public var displayName: String?
        public var expirationDate: Date?

        public init(serialNumber: String? = nil, name: String? = nil, certificateContent: String? = nil, platform: BundleIDPlatform? = nil, certificateType: CertificateType? = nil, displayName: String? = nil, expirationDate: Date? = nil) {
            self.serialNumber = serialNumber
            self.name = name
            self.certificateContent = certificateContent
            self.platform = platform
            self.certificateType = certificateType
            self.displayName = displayName
            self.expirationDate = expirationDate
        }
    }

    public init(type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct AppClipAdvancedExperiencesResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [AppClipAdvancedExperience]
    public var meta: PagingInformation?
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case appClip(AppClip)
        case appClipAdvancedExperienceImage(AppClipAdvancedExperienceImage)
        case appClipAdvancedExperienceLocalization(AppClipAdvancedExperienceLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClip.self) {
                self = .appClip(value)
            } else if let value = try? container.decode(AppClipAdvancedExperienceImage.self) {
                self = .appClipAdvancedExperienceImage(value)
            } else if let value = try? container.decode(AppClipAdvancedExperienceLocalization.self) {
                self = .appClipAdvancedExperienceLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClip(let value): try container.encode(value)
            case .appClipAdvancedExperienceImage(let value): try container.encode(value)
            case .appClipAdvancedExperienceLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(links: PagedDocumentLinks, data: [AppClipAdvancedExperience], meta: PagingInformation? = nil, included: [IncludedItem]? = nil) {
        self.links = links
        self.data = data
        self.meta = meta
        self.included = included
    }
}

public struct AppScreenshotSetAppScreenshotsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct EndUserLicenseAgreementUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var type: `Type`
        public var relationships: Relationships?
        public var id: String

        public struct Attributes: Codable {
            public var agreementText: String?

            public init(agreementText: String? = nil) {
                self.agreementText = agreementText
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case endUserLicenseAgreements
        }

        public struct Relationships: Codable {
            public var territories: Territories?

            public struct Territories: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case territories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(territories: Territories? = nil) {
                self.territories = territories
            }
        }

        public init(attributes: Attributes? = nil, type: `Type`, relationships: Relationships? = nil, id: String) {
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiAction: Codable {
    public var name: String?
    public var testConfiguration: TestConfiguration?
    public var buildDistributionAudience: BuildAudienceType?
    public var destination: Destination?
    public var isRequiredToPass: Bool?
    public var platform: Platform?
    public var actionType: CiActionType?
    public var scheme: String?

    public struct TestConfiguration: Codable {
        public var testDestinations: [CiTestDestination]?
        public var testPlanName: String?
        public var kind: Kind?

        public enum Kind: String, Codable, CaseIterable {
            case useSchemeSettings = "USE_SCHEME_SETTINGS"
            case specificTestPlans = "SPECIFIC_TEST_PLANS"
        }

        public init(testDestinations: [CiTestDestination]? = nil, testPlanName: String? = nil, kind: Kind? = nil) {
            self.testDestinations = testDestinations
            self.testPlanName = testPlanName
            self.kind = kind
        }
    }

    public enum Destination: String, Codable, CaseIterable {
        case anyIosDevice = "ANY_IOS_DEVICE"
        case anyIosSimulator = "ANY_IOS_SIMULATOR"
        case anyTvosDevice = "ANY_TVOS_DEVICE"
        case anyTvosSimulator = "ANY_TVOS_SIMULATOR"
        case anyWatchosDevice = "ANY_WATCHOS_DEVICE"
        case anyWatchosSimulator = "ANY_WATCHOS_SIMULATOR"
        case anyMac = "ANY_MAC"
        case anyMacCatalyst = "ANY_MAC_CATALYST"
    }

    public enum Platform: String, Codable, CaseIterable {
        case macos = "MACOS"
        case ios = "IOS"
        case tvos = "TVOS"
        case watchos = "WATCHOS"
    }

    public init(name: String? = nil, testConfiguration: TestConfiguration? = nil, buildDistributionAudience: BuildAudienceType? = nil, destination: Destination? = nil, isRequiredToPass: Bool? = nil, platform: Platform? = nil, actionType: CiActionType? = nil, scheme: String? = nil) {
        self.name = name
        self.testConfiguration = testConfiguration
        self.buildDistributionAudience = buildDistributionAudience
        self.destination = destination
        self.isRequiredToPass = isRequiredToPass
        self.platform = platform
        self.actionType = actionType
        self.scheme = scheme
    }
}

public struct AppStoreVersionAppClipDefaultExperienceLinkageResponse: Codable {
    public var data: Data
    public var links: DocumentLinks

    public struct Data: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appClipDefaultExperiences
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: Data, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public enum InternalBetaState: String, Codable, CaseIterable {
    case processing = "PROCESSING"
    case processingException = "PROCESSING_EXCEPTION"
    case missingExportCompliance = "MISSING_EXPORT_COMPLIANCE"
    case readyForBetaTesting = "READY_FOR_BETA_TESTING"
    case inBetaTesting = "IN_BETA_TESTING"
    case expired = "EXPIRED"
    case inExportComplianceReview = "IN_EXPORT_COMPLIANCE_REVIEW"
}

public struct AppCustomProductPageVersionResponse: Codable {
    public var included: [IncludedItem]?
    /// AppCustomProductPageVersion
    public var data: AppCustomProductPageVersion
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appCustomProductPage(AppCustomProductPage)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCustomProductPage.self) {
                self = .appCustomProductPage(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCustomProductPage(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, data: AppCustomProductPageVersion, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionExperimentsResponse: Codable {
    public var meta: PagingInformation?
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var data: [AppStoreVersionExperiment]

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appStoreVersionExperimentTreatment(AppStoreVersionExperimentTreatment)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppStoreVersionExperimentTreatment.self) {
                self = .appStoreVersionExperimentTreatment(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appStoreVersionExperimentTreatment(let value): try container.encode(value)
            }
        }
    }

    public init(meta: PagingInformation? = nil, included: [IncludedItem]? = nil, links: PagedDocumentLinks, data: [AppStoreVersionExperiment]) {
        self.meta = meta
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct AppEncryptionDeclarationResponse: Codable {
    public var included: [App]?
    /// AppEncryptionDeclaration
    public var data: AppEncryptionDeclaration
    public var links: DocumentLinks

    public init(included: [App]? = nil, data: AppEncryptionDeclaration, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct BetaBuildLocalization: Codable {
    public var relationships: Relationships?
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public struct Relationships: Codable {
        public var build: Build?

        public struct Build: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(build: Build? = nil) {
            self.build = build
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaBuildLocalizations
    }

    public struct Attributes: Codable {
        public var whatsNew: String?
        public var locale: String?

        public init(whatsNew: String? = nil, locale: String? = nil) {
            self.whatsNew = whatsNew
            self.locale = locale
        }
    }

    public init(relationships: Relationships? = nil, type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.relationships = relationships
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public enum CapabilityType: String, Codable, CaseIterable {
    case icloud = "ICLOUD"
    case inAppPurchase = "IN_APP_PURCHASE"
    case gameCenter = "GAME_CENTER"
    case pushNotifications = "PUSH_NOTIFICATIONS"
    case wallet = "WALLET"
    case interAppAudio = "INTER_APP_AUDIO"
    case maps = "MAPS"
    case associatedDomains = "ASSOCIATED_DOMAINS"
    case personalVpn = "PERSONAL_VPN"
    case appGroups = "APP_GROUPS"
    case healthkit = "HEALTHKIT"
    case homekit = "HOMEKIT"
    case wirelessAccessoryConfiguration = "WIRELESS_ACCESSORY_CONFIGURATION"
    case applePay = "APPLE_PAY"
    case dataProtection = "DATA_PROTECTION"
    case sirikit = "SIRIKIT"
    case networkExtensions = "NETWORK_EXTENSIONS"
    case multipath = "MULTIPATH"
    case hotSpot = "HOT_SPOT"
    case nfcTagReading = "NFC_TAG_READING"
    case classkit = "CLASSKIT"
    case autofillCredentialProvider = "AUTOFILL_CREDENTIAL_PROVIDER"
    case accessWifiInformation = "ACCESS_WIFI_INFORMATION"
    case networkCustomProtocol = "NETWORK_CUSTOM_PROTOCOL"
    case coremediaHlsLowLatency = "COREMEDIA_HLS_LOW_LATENCY"
    case systemExtensionInstall = "SYSTEM_EXTENSION_INSTALL"
    case userManagement = "USER_MANAGEMENT"
    case appleIDAuth = "APPLE_ID_AUTH"
}

public struct CiBuildAction: Codable {
    public var relationships: Relationships?
    public var type: `Type`
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks

    public struct Relationships: Codable {
        public var buildRun: BuildRun?

        public struct BuildRun: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case ciBuildRuns
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(buildRun: BuildRun? = nil) {
            self.buildRun = buildRun
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case ciBuildActions
    }

    public struct Attributes: Codable {
        public var finishedDate: Date?
        public var isRequiredToPass: Bool?
        public var name: String?
        public var issueCounts: CiIssueCounts?
        public var startedDate: Date?
        public var executionProgress: CiExecutionProgress?
        public var completionStatus: CiCompletionStatus?
        public var actionType: CiActionType?

        public init(finishedDate: Date? = nil, isRequiredToPass: Bool? = nil, name: String? = nil, issueCounts: CiIssueCounts? = nil, startedDate: Date? = nil, executionProgress: CiExecutionProgress? = nil, completionStatus: CiCompletionStatus? = nil, actionType: CiActionType? = nil) {
            self.finishedDate = finishedDate
            self.isRequiredToPass = isRequiredToPass
            self.name = name
            self.issueCounts = issueCounts
            self.startedDate = startedDate
            self.executionProgress = executionProgress
            self.completionStatus = completionStatus
            self.actionType = actionType
        }
    }

    public init(relationships: Relationships? = nil, type: `Type`, id: String, attributes: Attributes? = nil, links: ResourceLinks) {
        self.relationships = relationships
        self.type = type
        self.id = id
        self.attributes = attributes
        self.links = links
    }
}

public struct AppEventVideoClipUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var isUploaded: Bool?
            public var previewFrameTimeCode: String?

            public init(isUploaded: Bool? = nil, previewFrameTimeCode: String? = nil) {
                self.isUploaded = isUploaded
                self.previewFrameTimeCode = previewFrameTimeCode
            }

            private enum CodingKeys: String, CodingKey {
                case isUploaded = "uploaded"
                case previewFrameTimeCode
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appEventVideoClips
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppReviewSubmissionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var build: Build

            public struct Build: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(build: Build) {
                self.build = build
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppReviewSubmissions
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppInfosResponse: Codable {
    public var data: [AppInfo]
    public var included: [IncludedItem]?
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appInfoLocalization(AppInfoLocalization)
        case appCategory(AppCategory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AgeRatingDeclaration.self) {
                self = .ageRatingDeclaration(value)
            } else if let value = try? container.decode(AppInfoLocalization.self) {
                self = .appInfoLocalization(value)
            } else if let value = try? container.decode(AppCategory.self) {
                self = .appCategory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .ageRatingDeclaration(let value): try container.encode(value)
            case .appInfoLocalization(let value): try container.encode(value)
            case .appCategory(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppInfo], included: [IncludedItem]? = nil, meta: PagingInformation? = nil, links: PagedDocumentLinks) {
        self.data = data
        self.included = included
        self.meta = meta
        self.links = links
    }
}

public struct AppStoreVersionReleaseRequestResponse: Codable {
    /// AppStoreVersionReleaseRequest
    public var data: AppStoreVersionReleaseRequest
    public var links: DocumentLinks

    public init(data: AppStoreVersionReleaseRequest, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppCategoryResponse: Codable {
    public var included: [AppCategory]?
    public var links: DocumentLinks
    /// AppCategory
    public var data: AppCategory

    public init(included: [AppCategory]? = nil, links: DocumentLinks, data: AppCategory) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct ScmPullRequest: Codable {
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks
    public var type: `Type`
    public var relationships: Relationships?

    public struct Attributes: Codable {
        public var sourceRepositoryOwner: String?
        public var number: Int?
        public var webURL: URL?
        public var sourceBranchName: String?
        public var destinationRepositoryName: String?
        public var isCrossRepository: Bool?
        public var sourceRepositoryName: String?
        public var destinationBranchName: String?
        public var isClosed: Bool?
        public var title: String?
        public var destinationRepositoryOwner: String?

        public init(sourceRepositoryOwner: String? = nil, number: Int? = nil, webURL: URL? = nil, sourceBranchName: String? = nil, destinationRepositoryName: String? = nil, isCrossRepository: Bool? = nil, sourceRepositoryName: String? = nil, destinationBranchName: String? = nil, isClosed: Bool? = nil, title: String? = nil, destinationRepositoryOwner: String? = nil) {
            self.sourceRepositoryOwner = sourceRepositoryOwner
            self.number = number
            self.webURL = webURL
            self.sourceBranchName = sourceBranchName
            self.destinationRepositoryName = destinationRepositoryName
            self.isCrossRepository = isCrossRepository
            self.sourceRepositoryName = sourceRepositoryName
            self.destinationBranchName = destinationBranchName
            self.isClosed = isClosed
            self.title = title
            self.destinationRepositoryOwner = destinationRepositoryOwner
        }

        private enum CodingKeys: String, CodingKey {
            case sourceRepositoryOwner
            case number
            case webURL = "webUrl"
            case sourceBranchName
            case destinationRepositoryName
            case isCrossRepository
            case sourceRepositoryName
            case destinationBranchName
            case isClosed
            case title
            case destinationRepositoryOwner
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case scmPullRequests
    }

    public struct Relationships: Codable {
        public var repository: Repository?

        public struct Repository: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case scmRepositories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(repository: Repository? = nil) {
            self.repository = repository
        }
    }

    public init(id: String, attributes: Attributes? = nil, links: ResourceLinks, type: `Type`, relationships: Relationships? = nil) {
        self.id = id
        self.attributes = attributes
        self.links = links
        self.type = type
        self.relationships = relationships
    }
}

public struct AppStoreVersionExperimentUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var trafficProportion: Int?
            public var isStarted: Bool?
            public var name: String?

            public init(trafficProportion: Int? = nil, isStarted: Bool? = nil, name: String? = nil) {
                self.trafficProportion = trafficProportion
                self.isStarted = isStarted
                self.name = name
            }

            private enum CodingKeys: String, CodingKey {
                case trafficProportion
                case isStarted = "started"
                case name
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionExperiments
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreview: Codable {
    public var id: String
    public var attributes: Attributes?
    public var links: ResourceLinks
    public var type: `Type`
    public var relationships: Relationships?

    public struct Attributes: Codable {
        public var sourceFileChecksum: String?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?
        public var previewImage: ImageAsset?
        public var fileName: String?
        public var videoURL: String?
        public var mimeType: String?
        public var fileSize: Int?
        public var previewFrameTimeCode: String?

        public init(sourceFileChecksum: String? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil, previewImage: ImageAsset? = nil, fileName: String? = nil, videoURL: String? = nil, mimeType: String? = nil, fileSize: Int? = nil, previewFrameTimeCode: String? = nil) {
            self.sourceFileChecksum = sourceFileChecksum
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
            self.previewImage = previewImage
            self.fileName = fileName
            self.videoURL = videoURL
            self.mimeType = mimeType
            self.fileSize = fileSize
            self.previewFrameTimeCode = previewFrameTimeCode
        }

        private enum CodingKeys: String, CodingKey {
            case sourceFileChecksum
            case uploadOperations
            case assetDeliveryState
            case previewImage
            case fileName
            case videoURL = "videoUrl"
            case mimeType
            case fileSize
            case previewFrameTimeCode
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appPreviews
    }

    public struct Relationships: Codable {
        public var appPreviewSet: AppPreviewSet?

        public struct AppPreviewSet: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviewSets
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appPreviewSet: AppPreviewSet? = nil) {
            self.appPreviewSet = appPreviewSet
        }
    }

    public init(id: String, attributes: Attributes? = nil, links: ResourceLinks, type: `Type`, relationships: Relationships? = nil) {
        self.id = id
        self.attributes = attributes
        self.links = links
        self.type = type
        self.relationships = relationships
    }
}

public struct DiagnosticLogsResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [DiagnosticLog]
    public var meta: PagingInformation?

    public init(links: PagedDocumentLinks, data: [DiagnosticLog], meta: PagingInformation? = nil) {
        self.links = links
        self.data = data
        self.meta = meta
    }
}

public struct AppPreviewsResponse: Codable {
    public var meta: PagingInformation?
    public var data: [AppPreview]
    public var links: PagedDocumentLinks
    public var included: [AppPreviewSet]?

    public init(meta: PagingInformation? = nil, data: [AppPreview], links: PagedDocumentLinks, included: [AppPreviewSet]? = nil) {
        self.meta = meta
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct BetaGroupCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`
        public var attributes: Attributes

        public struct Relationships: Codable {
            public var app: App
            public var builds: Builds?
            public var betaTesters: BetaTesters?

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Builds: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct BetaTesters: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaTesters
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(app: App, builds: Builds? = nil, betaTesters: BetaTesters? = nil) {
                self.app = app
                self.builds = builds
                self.betaTesters = betaTesters
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public struct Attributes: Codable {
            public var isFeedbackEnabled: Bool?
            public var hasAccessToAllBuilds: Bool?
            public var isPublicLinkEnabled: Bool?
            public var isPublicLinkLimitEnabled: Bool?
            public var name: String
            public var publicLinkLimit: Int?
            public var isInternalGroup: Bool?

            public init(isFeedbackEnabled: Bool? = nil, hasAccessToAllBuilds: Bool? = nil, isPublicLinkEnabled: Bool? = nil, isPublicLinkLimitEnabled: Bool? = nil, name: String, publicLinkLimit: Int? = nil, isInternalGroup: Bool? = nil) {
                self.isFeedbackEnabled = isFeedbackEnabled
                self.hasAccessToAllBuilds = hasAccessToAllBuilds
                self.isPublicLinkEnabled = isPublicLinkEnabled
                self.isPublicLinkLimitEnabled = isPublicLinkLimitEnabled
                self.name = name
                self.publicLinkLimit = publicLinkLimit
                self.isInternalGroup = isInternalGroup
            }

            private enum CodingKeys: String, CodingKey {
                case isFeedbackEnabled = "feedbackEnabled"
                case hasAccessToAllBuilds
                case isPublicLinkEnabled = "publicLinkEnabled"
                case isPublicLinkLimitEnabled = "publicLinkLimitEnabled"
                case name
                case publicLinkLimit
                case isInternalGroup
            }
        }

        public init(relationships: Relationships, type: `Type`, attributes: Attributes) {
            self.relationships = relationships
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BundleIDCapabilityResponse: Codable {
    public var links: DocumentLinks
    /// BundleIdCapability
    public var data: BundleIDCapability

    public init(links: DocumentLinks, data: BundleIDCapability) {
        self.links = links
        self.data = data
    }
}

public struct EndUserLicenseAgreement: Codable {
    public var id: String
    public var type: `Type`
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case endUserLicenseAgreements
    }

    public struct Attributes: Codable {
        public var agreementText: String?

        public init(agreementText: String? = nil) {
            self.agreementText = agreementText
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var territories: Territories?

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct Territories: Codable {
            public var data: [Datum]?
            public var meta: PagingInformation?
            public var links: Links?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case territories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, meta: PagingInformation? = nil, links: Links? = nil) {
                self.data = data
                self.meta = meta
                self.links = links
            }
        }

        public init(app: App? = nil, territories: Territories? = nil) {
            self.app = app
            self.territories = territories
        }
    }

    public init(id: String, type: `Type`, attributes: Attributes? = nil, relationships: Relationships? = nil, links: ResourceLinks) {
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.links = links
    }
}

public struct CiTagStartCondition: Codable {
    public var isAutoCancel: Bool?
    public var source: CiTagPatterns?
    public var filesAndFoldersRule: CiFilesAndFoldersRule?

    public init(isAutoCancel: Bool? = nil, source: CiTagPatterns? = nil, filesAndFoldersRule: CiFilesAndFoldersRule? = nil) {
        self.isAutoCancel = isAutoCancel
        self.source = source
        self.filesAndFoldersRule = filesAndFoldersRule
    }

    private enum CodingKeys: String, CodingKey {
        case isAutoCancel = "autoCancel"
        case source
        case filesAndFoldersRule
    }
}

public struct BuildIndividualTestersLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var type: `Type`
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(type: `Type`, id: String) {
            self.type = type
            self.id = id
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppInfoLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var relationships: Relationships
        public var attributes: Attributes

        public enum `Type`: String, Codable, CaseIterable {
            case appInfoLocalizations
        }

        public struct Relationships: Codable {
            public var appInfo: AppInfo

            public struct AppInfo: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appInfos
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appInfo: AppInfo) {
                self.appInfo = appInfo
            }
        }

        public struct Attributes: Codable {
            public var privacyChoicesURL: String?
            public var privacyPolicyURL: String?
            public var locale: String
            public var name: String?
            public var subtitle: String?
            public var privacyPolicyText: String?

            public init(privacyChoicesURL: String? = nil, privacyPolicyURL: String? = nil, locale: String, name: String? = nil, subtitle: String? = nil, privacyPolicyText: String? = nil) {
                self.privacyChoicesURL = privacyChoicesURL
                self.privacyPolicyURL = privacyPolicyURL
                self.locale = locale
                self.name = name
                self.subtitle = subtitle
                self.privacyPolicyText = privacyPolicyText
            }

            private enum CodingKeys: String, CodingKey {
                case privacyChoicesURL = "privacyChoicesUrl"
                case privacyPolicyURL = "privacyPolicyUrl"
                case locale
                case name
                case subtitle
                case privacyPolicyText
            }
        }

        public init(type: `Type`, relationships: Relationships, attributes: Attributes) {
            self.type = type
            self.relationships = relationships
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppClipAppStoreReviewDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var attributes: Attributes?
        public var type: `Type`

        public struct Attributes: Codable {
            public var invocationURLs: [URL]?

            public init(invocationURLs: [URL]? = nil) {
                self.invocationURLs = invocationURLs
            }

            private enum CodingKeys: String, CodingKey {
                case invocationURLs = "invocationUrls"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAppStoreReviewDetails
        }

        public init(id: String, attributes: Attributes? = nil, type: `Type`) {
            self.id = id
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiWorkflowsResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [CiWorkflow]
    public var meta: PagingInformation?
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case ciProduct(CiProduct)
        case scmRepository(ScmRepository)
        case ciXcodeVersion(CiXcodeVersion)
        case ciMacOsVersion(CiMacOsVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(ScmRepository.self) {
                self = .scmRepository(value)
            } else if let value = try? container.decode(CiXcodeVersion.self) {
                self = .ciXcodeVersion(value)
            } else if let value = try? container.decode(CiMacOsVersion.self) {
                self = .ciMacOsVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .ciProduct(let value): try container.encode(value)
            case .scmRepository(let value): try container.encode(value)
            case .ciXcodeVersion(let value): try container.encode(value)
            case .ciMacOsVersion(let value): try container.encode(value)
            }
        }
    }

    public init(links: PagedDocumentLinks, data: [CiWorkflow], meta: PagingInformation? = nil, included: [IncludedItem]? = nil) {
        self.links = links
        self.data = data
        self.meta = meta
        self.included = included
    }
}

@available(*, deprecated, message: "Deprecated")
public struct IdfaDeclarationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var isServesAds: Bool
            public var isAttributesActionWithPreviousAd: Bool
            public var isHonorsLimitedAdTracking: Bool
            public var isAttributesAppInstallationToPreviousAd: Bool

            public init(isServesAds: Bool, isAttributesActionWithPreviousAd: Bool, isHonorsLimitedAdTracking: Bool, isAttributesAppInstallationToPreviousAd: Bool) {
                self.isServesAds = isServesAds
                self.isAttributesActionWithPreviousAd = isAttributesActionWithPreviousAd
                self.isHonorsLimitedAdTracking = isHonorsLimitedAdTracking
                self.isAttributesAppInstallationToPreviousAd = isAttributesAppInstallationToPreviousAd
            }

            private enum CodingKeys: String, CodingKey {
                case isServesAds = "servesAds"
                case isAttributesActionWithPreviousAd = "attributesActionWithPreviousAd"
                case isHonorsLimitedAdTracking = "honorsLimitedAdTracking"
                case isAttributesAppInstallationToPreviousAd = "attributesAppInstallationToPreviousAd"
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case idfaDeclarations
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppEventLocalizationResponse: Codable {
    /// AppEventLocalization
    public var data: AppEventLocalization
    public var links: DocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case appEvent(AppEvent)
        case appEventScreenshot(AppEventScreenshot)
        case appEventVideoClip(AppEventVideoClip)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppEvent.self) {
                self = .appEvent(value)
            } else if let value = try? container.decode(AppEventScreenshot.self) {
                self = .appEventScreenshot(value)
            } else if let value = try? container.decode(AppEventVideoClip.self) {
                self = .appEventVideoClip(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appEvent(let value): try container.encode(value)
            case .appEventScreenshot(let value): try container.encode(value)
            case .appEventVideoClip(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppEventLocalization, links: DocumentLinks, included: [IncludedItem]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct CiXcodeVersion: Codable {
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`
    public var links: ResourceLinks
    public var relationships: Relationships?

    public struct Attributes: Codable {
        public var version: String?
        public var testDestinations: [TestDestination]?
        public var name: String?

        public struct TestDestination: Codable {
            public var deviceTypeIdentifier: String?
            public var kind: CiTestDestinationKind?
            public var availableRuntimes: [AvailableRuntime]?
            public var deviceTypeName: String?

            public struct AvailableRuntime: Codable {
                public var runtimeName: String?
                public var runtimeIdentifier: String?

                public init(runtimeName: String? = nil, runtimeIdentifier: String? = nil) {
                    self.runtimeName = runtimeName
                    self.runtimeIdentifier = runtimeIdentifier
                }
            }

            public init(deviceTypeIdentifier: String? = nil, kind: CiTestDestinationKind? = nil, availableRuntimes: [AvailableRuntime]? = nil, deviceTypeName: String? = nil) {
                self.deviceTypeIdentifier = deviceTypeIdentifier
                self.kind = kind
                self.availableRuntimes = availableRuntimes
                self.deviceTypeName = deviceTypeName
            }
        }

        public init(version: String? = nil, testDestinations: [TestDestination]? = nil, name: String? = nil) {
            self.version = version
            self.testDestinations = testDestinations
            self.name = name
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case ciXcodeVersions
    }

    public struct Relationships: Codable {
        public var macOsVersions: MacOsVersions?

        public struct MacOsVersions: Codable {
            public var meta: PagingInformation?
            public var data: [Datum]?
            public var links: Links?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case ciMacOsVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil, links: Links? = nil) {
                self.meta = meta
                self.data = data
                self.links = links
            }
        }

        public init(macOsVersions: MacOsVersions? = nil) {
            self.macOsVersions = macOsVersions
        }
    }

    public init(attributes: Attributes? = nil, id: String, type: `Type`, links: ResourceLinks, relationships: Relationships? = nil) {
        self.attributes = attributes
        self.id = id
        self.type = type
        self.links = links
        self.relationships = relationships
    }
}

public struct AppMediaAssetState: Codable {
    public var state: State?
    public var warnings: [AppMediaStateError]?
    public var errors: [AppMediaStateError]?

    public enum State: String, Codable, CaseIterable {
        case awaitingUpload = "AWAITING_UPLOAD"
        case uploadComplete = "UPLOAD_COMPLETE"
        case complete = "COMPLETE"
        case failed = "FAILED"
    }

    public init(state: State? = nil, warnings: [AppMediaStateError]? = nil, errors: [AppMediaStateError]? = nil) {
        self.state = state
        self.warnings = warnings
        self.errors = errors
    }
}

public enum BetaInviteType: String, Codable, CaseIterable {
    case email = "EMAIL"
    case publicLink = "PUBLIC_LINK"
}

public struct AppCustomProductPageLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`
        public var attributes: Attributes?

        public enum `Type`: String, Codable, CaseIterable {
            case appCustomProductPageLocalizations
        }

        public struct Attributes: Codable {
            public var promotionalText: String?

            public init(promotionalText: String? = nil) {
                self.promotionalText = promotionalText
            }
        }

        public init(id: String, type: `Type`, attributes: Attributes? = nil) {
            self.id = id
            self.type = type
            self.attributes = attributes
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CiWorkflowResponse: Codable {
    public var included: [IncludedItem]?
    /// CiWorkflow
    public var data: CiWorkflow
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case ciProduct(CiProduct)
        case scmRepository(ScmRepository)
        case ciXcodeVersion(CiXcodeVersion)
        case ciMacOsVersion(CiMacOsVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(CiProduct.self) {
                self = .ciProduct(value)
            } else if let value = try? container.decode(ScmRepository.self) {
                self = .scmRepository(value)
            } else if let value = try? container.decode(CiXcodeVersion.self) {
                self = .ciXcodeVersion(value)
            } else if let value = try? container.decode(CiMacOsVersion.self) {
                self = .ciMacOsVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .ciProduct(let value): try container.encode(value)
            case .scmRepository(let value): try container.encode(value)
            case .ciXcodeVersion(let value): try container.encode(value)
            case .ciMacOsVersion(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, data: CiWorkflow, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct AppPriceResponse: Codable {
    public var links: DocumentLinks
    public var included: [IncludedItem]?
    /// AppPrice
    public var data: AppPrice

    public enum IncludedItem: Codable {
        case app(App)
        case appPriceTier(AppPriceTier)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppPriceTier.self) {
                self = .appPriceTier(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appPriceTier(let value): try container.encode(value)
            }
        }
    }

    public init(links: DocumentLinks, included: [IncludedItem]? = nil, data: AppPrice) {
        self.links = links
        self.included = included
        self.data = data
    }
}

public struct AppInfoLocalization: Codable {
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var type: `Type`
    public var id: String
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var locale: String?
        public var privacyPolicyURL: String?
        public var name: String?
        public var privacyPolicyText: String?
        public var privacyChoicesURL: String?
        public var subtitle: String?

        public init(locale: String? = nil, privacyPolicyURL: String? = nil, name: String? = nil, privacyPolicyText: String? = nil, privacyChoicesURL: String? = nil, subtitle: String? = nil) {
            self.locale = locale
            self.privacyPolicyURL = privacyPolicyURL
            self.name = name
            self.privacyPolicyText = privacyPolicyText
            self.privacyChoicesURL = privacyChoicesURL
            self.subtitle = subtitle
        }

        private enum CodingKeys: String, CodingKey {
            case locale
            case privacyPolicyURL = "privacyPolicyUrl"
            case name
            case privacyPolicyText
            case privacyChoicesURL = "privacyChoicesUrl"
            case subtitle
        }
    }

    public struct Relationships: Codable {
        public var appInfo: AppInfo?

        public struct AppInfo: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appInfos
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appInfo: AppInfo? = nil) {
            self.appInfo = appInfo
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appInfoLocalizations
    }

    public init(attributes: Attributes? = nil, relationships: Relationships? = nil, type: `Type`, id: String, links: ResourceLinks) {
        self.attributes = attributes
        self.relationships = relationships
        self.type = type
        self.id = id
        self.links = links
    }
}

public struct DeviceCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`

        public struct Attributes: Codable {
            public var platform: BundleIDPlatform
            public var name: String
            public var udid: String

            public init(platform: BundleIDPlatform, name: String, udid: String) {
                self.platform = platform
                self.name = name
                self.udid = udid
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case devices
        }

        public init(attributes: Attributes, type: `Type`) {
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppClipInvocationsResponse: Codable {
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var included: [BetaAppClipInvocationLocalization]?
    public var data: [BetaAppClipInvocation]

    public init(meta: PagingInformation? = nil, links: PagedDocumentLinks, included: [BetaAppClipInvocationLocalization]? = nil, data: [BetaAppClipInvocation]) {
        self.meta = meta
        self.links = links
        self.included = included
        self.data = data
    }
}

public struct UserUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var id: String
        public var attributes: Attributes?
        public var relationships: Relationships?

        public enum `Type`: String, Codable, CaseIterable {
            case users
        }

        public struct Attributes: Codable {
            public var isAllAppsVisible: Bool?
            public var roles: [UserRole]?
            public var isProvisioningAllowed: Bool?

            public init(isAllAppsVisible: Bool? = nil, roles: [UserRole]? = nil, isProvisioningAllowed: Bool? = nil) {
                self.isAllAppsVisible = isAllAppsVisible
                self.roles = roles
                self.isProvisioningAllowed = isProvisioningAllowed
            }

            private enum CodingKeys: String, CodingKey {
                case isAllAppsVisible = "allAppsVisible"
                case roles
                case isProvisioningAllowed = "provisioningAllowed"
            }
        }

        public struct Relationships: Codable {
            public var visibleApps: VisibleApps?

            public struct VisibleApps: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(visibleApps: VisibleApps? = nil) {
                self.visibleApps = visibleApps
            }
        }

        public init(type: `Type`, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
            self.type = type
            self.id = id
            self.attributes = attributes
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public enum BuildAudienceType: String, Codable, CaseIterable {
    case internalOnly = "INTERNAL_ONLY"
    case appStoreEligible = "APP_STORE_ELIGIBLE"
}

public struct AppStoreVersionExperimentTreatment: Codable {
    public var type: `Type`
    public var links: ResourceLinks
    public var id: String
    public var attributes: Attributes?
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionExperimentTreatments
    }

    public struct Attributes: Codable {
        public var name: String?
        public var appIcon: ImageAsset?
        public var appIconName: String?
        public var promotedDate: Date?

        public init(name: String? = nil, appIcon: ImageAsset? = nil, appIconName: String? = nil, promotedDate: Date? = nil) {
            self.name = name
            self.appIcon = appIcon
            self.appIconName = appIconName
            self.promotedDate = promotedDate
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersionExperiment: AppStoreVersionExperiment?
        public var appStoreVersionExperimentTreatmentLocalizations: AppStoreVersionExperimentTreatmentLocalizations?

        public struct AppStoreVersionExperiment: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperiments
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersionExperimentTreatmentLocalizations: Codable {
            public var meta: PagingInformation?
            public var data: [Datum]?
            public var links: Links?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionExperimentTreatmentLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil, links: Links? = nil) {
                self.meta = meta
                self.data = data
                self.links = links
            }
        }

        public init(appStoreVersionExperiment: AppStoreVersionExperiment? = nil, appStoreVersionExperimentTreatmentLocalizations: AppStoreVersionExperimentTreatmentLocalizations? = nil) {
            self.appStoreVersionExperiment = appStoreVersionExperiment
            self.appStoreVersionExperimentTreatmentLocalizations = appStoreVersionExperimentTreatmentLocalizations
        }
    }

    public init(type: `Type`, links: ResourceLinks, id: String, attributes: Attributes? = nil, relationships: Relationships? = nil) {
        self.type = type
        self.links = links
        self.id = id
        self.attributes = attributes
        self.relationships = relationships
    }
}

public struct CiWorkflowCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`
        public var relationships: Relationships

        public struct Attributes: Codable {
            public var scheduledStartCondition: CiScheduledStartCondition?
            public var isClean: Bool
            public var tagStartCondition: CiTagStartCondition?
            public var branchStartCondition: CiBranchStartCondition?
            public var actions: [CiAction]
            public var containerFilePath: String
            public var name: String
            public var description: String
            public var isLockedForEditing: Bool?
            public var pullRequestStartCondition: CiPullRequestStartCondition?
            public var isEnabled: Bool

            public init(scheduledStartCondition: CiScheduledStartCondition? = nil, isClean: Bool, tagStartCondition: CiTagStartCondition? = nil, branchStartCondition: CiBranchStartCondition? = nil, actions: [CiAction], containerFilePath: String, name: String, description: String, isLockedForEditing: Bool? = nil, pullRequestStartCondition: CiPullRequestStartCondition? = nil, isEnabled: Bool) {
                self.scheduledStartCondition = scheduledStartCondition
                self.isClean = isClean
                self.tagStartCondition = tagStartCondition
                self.branchStartCondition = branchStartCondition
                self.actions = actions
                self.containerFilePath = containerFilePath
                self.name = name
                self.description = description
                self.isLockedForEditing = isLockedForEditing
                self.pullRequestStartCondition = pullRequestStartCondition
                self.isEnabled = isEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case scheduledStartCondition
                case isClean = "clean"
                case tagStartCondition
                case branchStartCondition
                case actions
                case containerFilePath
                case name
                case description
                case isLockedForEditing
                case pullRequestStartCondition
                case isEnabled
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case ciWorkflows
        }

        public struct Relationships: Codable {
            public var macOsVersion: MacOsVersion
            public var xcodeVersion: XcodeVersion
            public var repository: Repository
            public var product: Product

            public struct MacOsVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciMacOsVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct XcodeVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciXcodeVersions
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Repository: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case scmRepositories
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Product: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var type: `Type`
                    public var id: String

                    public enum `Type`: String, Codable, CaseIterable {
                        case ciProducts
                    }

                    public init(type: `Type`, id: String) {
                        self.type = type
                        self.id = id
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(macOsVersion: MacOsVersion, xcodeVersion: XcodeVersion, repository: Repository, product: Product) {
                self.macOsVersion = macOsVersion
                self.xcodeVersion = xcodeVersion
                self.repository = repository
                self.product = product
            }
        }

        public init(attributes: Attributes, type: `Type`, relationships: Relationships) {
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppScreenshotUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var attributes: Attributes?
        public var type: `Type`

        public struct Attributes: Codable {
            public var isUploaded: Bool?
            public var sourceFileChecksum: String?

            public init(isUploaded: Bool? = nil, sourceFileChecksum: String? = nil) {
                self.isUploaded = isUploaded
                self.sourceFileChecksum = sourceFileChecksum
            }

            private enum CodingKeys: String, CodingKey {
                case isUploaded = "uploaded"
                case sourceFileChecksum
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public init(id: String, attributes: Attributes? = nil, type: `Type`) {
            self.id = id
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionLocalization: Codable {
    public var type: `Type`
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var id: String
    public var links: ResourceLinks

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionLocalizations
    }

    public struct Attributes: Codable {
        public var promotionalText: String?
        public var marketingURL: URL?
        public var keywords: String?
        public var supportURL: URL?
        public var locale: String?
        public var whatsNew: String?
        public var description: String?

        public init(promotionalText: String? = nil, marketingURL: URL? = nil, keywords: String? = nil, supportURL: URL? = nil, locale: String? = nil, whatsNew: String? = nil, description: String? = nil) {
            self.promotionalText = promotionalText
            self.marketingURL = marketingURL
            self.keywords = keywords
            self.supportURL = supportURL
            self.locale = locale
            self.whatsNew = whatsNew
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case promotionalText
            case marketingURL = "marketingUrl"
            case keywords
            case supportURL = "supportUrl"
            case locale
            case whatsNew
            case description
        }
    }

    public struct Relationships: Codable {
        public var appPreviewSets: AppPreviewSets?
        public var appStoreVersion: AppStoreVersion?
        public var appScreenshotSets: AppScreenshotSets?

        public struct AppPreviewSets: Codable {
            public var data: [Datum]?
            public var meta: PagingInformation?
            public var links: Links?

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviewSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, meta: PagingInformation? = nil, links: Links? = nil) {
                self.data = data
                self.meta = meta
                self.links = links
            }
        }

        public struct AppStoreVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppScreenshotSets: Codable {
            public var meta: PagingInformation?
            public var links: Links?
            public var data: [Datum]?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshotSets
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(meta: PagingInformation? = nil, links: Links? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.links = links
                self.data = data
            }
        }

        public init(appPreviewSets: AppPreviewSets? = nil, appStoreVersion: AppStoreVersion? = nil, appScreenshotSets: AppScreenshotSets? = nil) {
            self.appPreviewSets = appPreviewSets
            self.appStoreVersion = appStoreVersion
            self.appScreenshotSets = appScreenshotSets
        }
    }

    public init(type: `Type`, attributes: Attributes? = nil, relationships: Relationships? = nil, id: String, links: ResourceLinks) {
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.id = id
        self.links = links
    }
}

public struct AppCustomProductPageLocalization: Codable {
    public var links: ResourceLinks
    public var id: String
    public var relationships: Relationships?
    public var type: `Type`
    public var attributes: Attributes?

    public struct Relationships: Codable {
        public var appCustomProductPageVersion: AppCustomProductPageVersion?
        public var appPreviewSets: AppPreviewSets?
        public var appScreenshotSets: AppScreenshotSets?

        public struct AppCustomProductPageVersion: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCustomProductPageVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct AppPreviewSets: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviewSets
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public struct AppScreenshotSets: Codable {
            public var links: Links?
            public var meta: PagingInformation?
            public var data: [Datum]?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshotSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(links: Links? = nil, meta: PagingInformation? = nil, data: [Datum]? = nil) {
                self.links = links
                self.meta = meta
                self.data = data
            }
        }

        public init(appCustomProductPageVersion: AppCustomProductPageVersion? = nil, appPreviewSets: AppPreviewSets? = nil, appScreenshotSets: AppScreenshotSets? = nil) {
            self.appCustomProductPageVersion = appCustomProductPageVersion
            self.appPreviewSets = appPreviewSets
            self.appScreenshotSets = appScreenshotSets
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appCustomProductPageLocalizations
    }

    public struct Attributes: Codable {
        public var promotionalText: String?
        public var locale: String?

        public init(promotionalText: String? = nil, locale: String? = nil) {
            self.promotionalText = promotionalText
            self.locale = locale
        }
    }

    public init(links: ResourceLinks, id: String, relationships: Relationships? = nil, type: `Type`, attributes: Attributes? = nil) {
        self.links = links
        self.id = id
        self.relationships = relationships
        self.type = type
        self.attributes = attributes
    }
}

public enum SubscriptionStatusURLVersion: String, Codable, CaseIterable {
    case v1 = "V1"
    case v2 = "V2"
    case v12 = "v1"
    case v22 = "v2"
}

public struct AppPrice: Codable {
    public var id: String
    public var type: `Type`
    public var links: ResourceLinks
    public var relationships: Relationships?

    public enum `Type`: String, Codable, CaseIterable {
        case appPrices
    }

    public struct Relationships: Codable {
        public var priceTier: PriceTier?
        public var app: App?

        public struct PriceTier: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPriceTiers
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public struct App: Codable {
            public var links: Links?
            public var data: Data?

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public init(links: Links? = nil, data: Data? = nil) {
                self.links = links
                self.data = data
            }
        }

        public init(priceTier: PriceTier? = nil, app: App? = nil) {
            self.priceTier = priceTier
            self.app = app
        }
    }

    public init(id: String, type: `Type`, links: ResourceLinks, relationships: Relationships? = nil) {
        self.id = id
        self.type = type
        self.links = links
        self.relationships = relationships
    }
}

public struct AppPreOrderUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var type: `Type`
        public var attributes: Attributes?
        public var id: String

        public enum `Type`: String, Codable, CaseIterable {
            case appPreOrders
        }

        public struct Attributes: Codable {
            public var appReleaseDate: NaiveDate?

            public init(appReleaseDate: NaiveDate? = nil) {
                self.appReleaseDate = appReleaseDate
            }
        }

        public init(type: `Type`, attributes: Attributes? = nil, id: String) {
            self.type = type
            self.attributes = attributes
            self.id = id
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct PerfPowerMetricsResponse: Codable {
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?
    public var data: [PerfPowerMetric]

    public init(links: PagedDocumentLinks, meta: PagingInformation? = nil, data: [PerfPowerMetric]) {
        self.links = links
        self.meta = meta
        self.data = data
    }
}

public struct AppCustomProductPageVersionsResponse: Codable {
    public var meta: PagingInformation?
    public var data: [AppCustomProductPageVersion]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks

    public enum IncludedItem: Codable {
        case appCustomProductPage(AppCustomProductPage)
        case appCustomProductPageLocalization(AppCustomProductPageLocalization)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCustomProductPage.self) {
                self = .appCustomProductPage(value)
            } else if let value = try? container.decode(AppCustomProductPageLocalization.self) {
                self = .appCustomProductPageLocalization(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCustomProductPage(let value): try container.encode(value)
            case .appCustomProductPageLocalization(let value): try container.encode(value)
            }
        }
    }

    public init(meta: PagingInformation? = nil, data: [AppCustomProductPageVersion], included: [IncludedItem]? = nil, links: PagedDocumentLinks) {
        self.meta = meta
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppPreviewSetCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships?
        public var type: `Type`

        public struct Attributes: Codable {
            public var previewType: PreviewType

            public init(previewType: PreviewType) {
                self.previewType = previewType
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersionLocalization: AppStoreVersionLocalization?
            public var appCustomProductPageLocalization: AppCustomProductPageLocalization?
            public var appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization?

            public struct AppStoreVersionLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionLocalizations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppCustomProductPageLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCustomProductPageLocalizations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppStoreVersionExperimentTreatmentLocalization: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionExperimentTreatmentLocalizations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appStoreVersionLocalization: AppStoreVersionLocalization? = nil, appCustomProductPageLocalization: AppCustomProductPageLocalization? = nil, appStoreVersionExperimentTreatmentLocalization: AppStoreVersionExperimentTreatmentLocalization? = nil) {
                self.appStoreVersionLocalization = appStoreVersionLocalization
                self.appCustomProductPageLocalization = appCustomProductPageLocalization
                self.appStoreVersionExperimentTreatmentLocalization = appStoreVersionExperimentTreatmentLocalization
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviewSets
        }

        public init(attributes: Attributes, relationships: Relationships? = nil, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ScmProvider: Codable {
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var url: URL?
        public var scmProviderType: ScmProviderType?

        public init(url: URL? = nil, scmProviderType: ScmProviderType? = nil) {
            self.url = url
            self.scmProviderType = scmProviderType
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case scmProviders
    }

    public init(attributes: Attributes? = nil, id: String, type: `Type`, links: ResourceLinks) {
        self.attributes = attributes
        self.id = id
        self.type = type
        self.links = links
    }
}

public struct CiXcodeVersionResponse: Codable {
    public var included: [CiMacOsVersion]?
    public var links: DocumentLinks
    /// CiXcodeVersion
    public var data: CiXcodeVersion

    public init(included: [CiMacOsVersion]? = nil, links: DocumentLinks, data: CiXcodeVersion) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct BuildIconsResponse: Codable {
    public var links: PagedDocumentLinks
    public var data: [BuildIcon]
    public var meta: PagingInformation?

    public init(links: PagedDocumentLinks, data: [BuildIcon], meta: PagingInformation? = nil) {
        self.links = links
        self.data = data
        self.meta = meta
    }
}

public struct CiFilesAndFoldersRule: Codable {
    public var mode: Mode?
    public var matchers: [CiStartConditionFileMatcher]?

    public enum Mode: String, Codable, CaseIterable {
        case startIfAnyFileMatches = "START_IF_ANY_FILE_MATCHES"
        case doNotStartIfAllFilesMatch = "DO_NOT_START_IF_ALL_FILES_MATCH"
    }

    public init(mode: Mode? = nil, matchers: [CiStartConditionFileMatcher]? = nil) {
        self.mode = mode
        self.matchers = matchers
    }
}

public struct GameCenterEnabledVersion: Codable {
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`
    public var links: ResourceLinks
    public var relationships: Relationships?

    public struct Attributes: Codable {
        public var platform: Platform?
        public var versionString: String?
        public var iconAsset: ImageAsset?

        public init(platform: Platform? = nil, versionString: String? = nil, iconAsset: ImageAsset? = nil) {
            self.platform = platform
            self.versionString = versionString
            self.iconAsset = iconAsset
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case gameCenterEnabledVersions
    }

    public struct Relationships: Codable {
        public var app: App?
        public var compatibleVersions: CompatibleVersions?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct CompatibleVersions: Codable {
            public var meta: PagingInformation?
            public var links: Links?
            public var data: [Datum]?

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public struct Datum: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case gameCenterEnabledVersions
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public init(meta: PagingInformation? = nil, links: Links? = nil, data: [Datum]? = nil) {
                self.meta = meta
                self.links = links
                self.data = data
            }
        }

        public init(app: App? = nil, compatibleVersions: CompatibleVersions? = nil) {
            self.app = app
            self.compatibleVersions = compatibleVersions
        }
    }

    public init(attributes: Attributes? = nil, id: String, type: `Type`, links: ResourceLinks, relationships: Relationships? = nil) {
        self.attributes = attributes
        self.id = id
        self.type = type
        self.links = links
        self.relationships = relationships
    }
}

public struct BetaGroupBuildsLinkagesResponse: Codable {
    public var meta: PagingInformation?
    public var links: PagedDocumentLinks
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(meta: PagingInformation? = nil, links: PagedDocumentLinks, data: [Datum]) {
        self.meta = meta
        self.links = links
        self.data = data
    }
}

public struct CiProduct: Codable {
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`
    public var links: ResourceLinks
    public var relationships: Relationships?

    public struct Attributes: Codable {
        public var name: String?
        public var createdDate: Date?
        public var productType: ProductType?

        public enum ProductType: String, Codable, CaseIterable {
            case app = "APP"
            case framework = "FRAMEWORK"
        }

        public init(name: String? = nil, createdDate: Date? = nil, productType: ProductType? = nil) {
            self.name = name
            self.createdDate = createdDate
            self.productType = productType
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case ciProducts
    }

    public struct Relationships: Codable {
        public var primaryRepositories: PrimaryRepositories?
        public var app: App?
        public var bundleID: BundleID?

        public struct PrimaryRepositories: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case scmRepositories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct BundleID: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case bundleIDs = "bundleIds"
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(primaryRepositories: PrimaryRepositories? = nil, app: App? = nil, bundleID: BundleID? = nil) {
            self.primaryRepositories = primaryRepositories
            self.app = app
            self.bundleID = bundleID
        }

        private enum CodingKeys: String, CodingKey {
            case primaryRepositories
            case app
            case bundleID = "bundleId"
        }
    }

    public init(attributes: Attributes? = nil, id: String, type: `Type`, links: ResourceLinks, relationships: Relationships? = nil) {
        self.attributes = attributes
        self.id = id
        self.type = type
        self.links = links
        self.relationships = relationships
    }
}

public struct TerritoryResponse: Codable {
    public var links: DocumentLinks
    /// Territory
    public var data: Territory

    public init(links: DocumentLinks, data: Territory) {
        self.links = links
        self.data = data
    }
}

public struct Device: Codable {
    public var attributes: Attributes?
    public var id: String
    public var type: `Type`
    public var links: ResourceLinks

    public struct Attributes: Codable {
        public var udid: String?
        public var model: String?
        public var name: String?
        public var platform: BundleIDPlatform?
        public var deviceClass: DeviceClass?
        public var addedDate: Date?
        public var status: Status?

        public enum DeviceClass: String, Codable, CaseIterable {
            case appleWatch = "APPLE_WATCH"
            case ipad = "IPAD"
            case iphone = "IPHONE"
            case ipod = "IPOD"
            case appleTv = "APPLE_TV"
            case mac = "MAC"
        }

        public enum Status: String, Codable, CaseIterable {
            case enabled = "ENABLED"
            case disabled = "DISABLED"
        }

        public init(udid: String? = nil, model: String? = nil, name: String? = nil, platform: BundleIDPlatform? = nil, deviceClass: DeviceClass? = nil, addedDate: Date? = nil, status: Status? = nil) {
            self.udid = udid
            self.model = model
            self.name = name
            self.platform = platform
            self.deviceClass = deviceClass
            self.addedDate = addedDate
            self.status = status
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case devices
    }

    public init(attributes: Attributes? = nil, id: String, type: `Type`, links: ResourceLinks) {
        self.attributes = attributes
        self.id = id
        self.type = type
        self.links = links
    }
}

public struct AppStoreReviewAttachmentResponse: Codable {
    public var included: [AppStoreReviewDetail]?
    public var links: DocumentLinks
    /// AppStoreReviewAttachment
    public var data: AppStoreReviewAttachment

    public init(included: [AppStoreReviewDetail]? = nil, links: DocumentLinks, data: AppStoreReviewAttachment) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct AppCustomProductPageResponse: Codable {
    public var included: [IncludedItem]?
    /// AppCustomProductPage
    public var data: AppCustomProductPage
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case appCustomProductPageVersion(AppCustomProductPageVersion)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(AppCustomProductPageVersion.self) {
                self = .appCustomProductPageVersion(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .appCustomProductPageVersion(let value): try container.encode(value)
            }
        }
    }

    public init(included: [IncludedItem]? = nil, data: AppCustomProductPage, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

public struct AppClipAdvancedExperienceUpdateRequest: Codable {
    public var included: [AppClipAdvancedExperienceLocalizationInlineCreate]?
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var type: `Type`
        public var relationships: Relationships?
        public var id: String

        public struct Attributes: Codable {
            public var defaultLanguage: AppClipAdvancedExperienceLanguage?
            public var isPoweredBy: Bool?
            public var action: AppClipAction?
            public var isRemoved: Bool?
            public var place: Place?
            public var businessCategory: BusinessCategory?

            public struct Place: Codable {
                public var names: [String]?
                public var mapAction: MapAction?
                public var displayPoint: DisplayPoint?
                public var relationship: Relationship?
                public var mainAddress: MainAddress?
                public var placeID: String?
                public var homePage: String?
                public var phoneNumber: PhoneNumber?
                public var categories: [String]?

                public enum MapAction: String, Codable, CaseIterable {
                    case buyTickets = "BUY_TICKETS"
                    case viewAvailability = "VIEW_AVAILABILITY"
                    case viewPricing = "VIEW_PRICING"
                    case hotelBookRoom = "HOTEL_BOOK_ROOM"
                    case parkingReserveParking = "PARKING_RESERVE_PARKING"
                    case restaurantJoinWaitlist = "RESTAURANT_JOIN_WAITLIST"
                    case restaurantOrderDelivery = "RESTAURANT_ORDER_DELIVERY"
                    case restaurantOrderFood = "RESTAURANT_ORDER_FOOD"
                    case restaurantOrderTakeout = "RESTAURANT_ORDER_TAKEOUT"
                    case restaurantReservation = "RESTAURANT_RESERVATION"
                    case scheduleAppointment = "SCHEDULE_APPOINTMENT"
                    case restaurantViewMenu = "RESTAURANT_VIEW_MENU"
                    case theaterNowPlaying = "THEATER_NOW_PLAYING"
                }

                public struct DisplayPoint: Codable {
                    public var coordinates: Coordinates?
                    public var source: Source?

                    public struct Coordinates: Codable {
                        public var latitude: Double?
                        public var longitude: Double?

                        public init(latitude: Double? = nil, longitude: Double? = nil) {
                            self.latitude = latitude
                            self.longitude = longitude
                        }
                    }

                    public enum Source: String, Codable, CaseIterable {
                        case calculated = "CALCULATED"
                        case manuallyPlaced = "MANUALLY_PLACED"
                    }

                    public init(coordinates: Coordinates? = nil, source: Source? = nil) {
                        self.coordinates = coordinates
                        self.source = source
                    }
                }

                public enum Relationship: String, Codable, CaseIterable {
                    case owner = "OWNER"
                    case authorized = "AUTHORIZED"
                    case other = "OTHER"
                }

                public struct MainAddress: Codable {
                    public var structuredAddress: StructuredAddress?
                    public var fullAddress: String?

                    public struct StructuredAddress: Codable {
                        public var postalCode: String?
                        public var floor: String?
                        public var countryCode: String?
                        public var locality: String?
                        public var neighborhood: String?
                        public var stateProvince: String?
                        public var streetAddress: [String]?

                        public init(postalCode: String? = nil, floor: String? = nil, countryCode: String? = nil, locality: String? = nil, neighborhood: String? = nil, stateProvince: String? = nil, streetAddress: [String]? = nil) {
                            self.postalCode = postalCode
                            self.floor = floor
                            self.countryCode = countryCode
                            self.locality = locality
                            self.neighborhood = neighborhood
                            self.stateProvince = stateProvince
                            self.streetAddress = streetAddress
                        }
                    }

                    public init(structuredAddress: StructuredAddress? = nil, fullAddress: String? = nil) {
                        self.structuredAddress = structuredAddress
                        self.fullAddress = fullAddress
                    }
                }

                public struct PhoneNumber: Codable {
                    public var intent: String?
                    public var type: `Type`?
                    public var number: String?

                    public enum `Type`: String, Codable, CaseIterable {
                        case fax = "FAX"
                        case landline = "LANDLINE"
                        case mobile = "MOBILE"
                        case tollfree = "TOLLFREE"
                    }

                    public init(intent: String? = nil, type: `Type`? = nil, number: String? = nil) {
                        self.intent = intent
                        self.type = type
                        self.number = number
                    }
                }

                public init(names: [String]? = nil, mapAction: MapAction? = nil, displayPoint: DisplayPoint? = nil, relationship: Relationship? = nil, mainAddress: MainAddress? = nil, placeID: String? = nil, homePage: String? = nil, phoneNumber: PhoneNumber? = nil, categories: [String]? = nil) {
                    self.names = names
                    self.mapAction = mapAction
                    self.displayPoint = displayPoint
                    self.relationship = relationship
                    self.mainAddress = mainAddress
                    self.placeID = placeID
                    self.homePage = homePage
                    self.phoneNumber = phoneNumber
                    self.categories = categories
                }

                private enum CodingKeys: String, CodingKey {
                    case names
                    case mapAction
                    case displayPoint
                    case relationship
                    case mainAddress
                    case placeID = "placeId"
                    case homePage
                    case phoneNumber
                    case categories
                }
            }

            public enum BusinessCategory: String, Codable, CaseIterable {
                case automotive = "AUTOMOTIVE"
                case beauty = "BEAUTY"
                case bikes = "BIKES"
                case books = "BOOKS"
                case casino = "CASINO"
                case education = "EDUCATION"
                case educationJapan = "EDUCATION_JAPAN"
                case entertainment = "ENTERTAINMENT"
                case evCharger = "EV_CHARGER"
                case financialUsd = "FINANCIAL_USD"
                case financialCny = "FINANCIAL_CNY"
                case financialGbp = "FINANCIAL_GBP"
                case financialJpy = "FINANCIAL_JPY"
                case financialEur = "FINANCIAL_EUR"
                case fitness = "FITNESS"
                case foodAndDrink = "FOOD_AND_DRINK"
                case gas = "GAS"
                case grocery = "GROCERY"
                case healthAndMedical = "HEALTH_AND_MEDICAL"
                case hotelAndTravel = "HOTEL_AND_TRAVEL"
                case music = "MUSIC"
                case parking = "PARKING"
                case petServices = "PET_SERVICES"
                case professionalServices = "PROFESSIONAL_SERVICES"
                case shopping = "SHOPPING"
                case ticketing = "TICKETING"
                case transit = "TRANSIT"
            }

            public init(defaultLanguage: AppClipAdvancedExperienceLanguage? = nil, isPoweredBy: Bool? = nil, action: AppClipAction? = nil, isRemoved: Bool? = nil, place: Place? = nil, businessCategory: BusinessCategory? = nil) {
                self.defaultLanguage = defaultLanguage
                self.isPoweredBy = isPoweredBy
                self.action = action
                self.isRemoved = isRemoved
                self.place = place
                self.businessCategory = businessCategory
            }

            private enum CodingKeys: String, CodingKey {
                case defaultLanguage
                case isPoweredBy
                case action
                case isRemoved = "removed"
                case place
                case businessCategory
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appClipAdvancedExperiences
        }

        public struct Relationships: Codable {
            public var headerImage: HeaderImage?
            public var appClip: AppClip?
            public var localizations: Localizations?

            public struct HeaderImage: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipAdvancedExperienceImages
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct AppClip: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClips
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct Localizations: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appClipAdvancedExperienceLocalizations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(headerImage: HeaderImage? = nil, appClip: AppClip? = nil, localizations: Localizations? = nil) {
                self.headerImage = headerImage
                self.appClip = appClip
                self.localizations = localizations
            }
        }

        public init(attributes: Attributes? = nil, type: `Type`, relationships: Relationships? = nil, id: String) {
            self.attributes = attributes
            self.type = type
            self.relationships = relationships
            self.id = id
        }
    }

    public init(included: [AppClipAdvancedExperienceLocalizationInlineCreate]? = nil, data: Data) {
        self.included = included
        self.data = data
    }
}

public enum KidsAgeBand: String, Codable, CaseIterable {
    case fiveAndUnder = "FIVE_AND_UNDER"
    case sixToEight = "SIX_TO_EIGHT"
    case nineToEleven = "NINE_TO_ELEVEN"
}

public struct UserInvitationResponse: Codable {
    public var included: [App]?
    public var links: DocumentLinks
    /// UserInvitation
    public var data: UserInvitation

    public init(included: [App]? = nil, links: DocumentLinks, data: UserInvitation) {
        self.included = included
        self.links = links
        self.data = data
    }
}

public struct AppScreenshot: Codable {
    public var attributes: Attributes?
    public var type: `Type`
    public var relationships: Relationships?
    public var links: ResourceLinks
    public var id: String

    public struct Attributes: Codable {
        public var fileName: String?
        public var assetDeliveryState: AppMediaAssetState?
        public var uploadOperations: [UploadOperation]?
        public var sourceFileChecksum: String?
        public var fileSize: Int?
        public var assetToken: String?
        public var assetType: String?
        public var imageAsset: ImageAsset?

        public init(fileName: String? = nil, assetDeliveryState: AppMediaAssetState? = nil, uploadOperations: [UploadOperation]? = nil, sourceFileChecksum: String? = nil, fileSize: Int? = nil, assetToken: String? = nil, assetType: String? = nil, imageAsset: ImageAsset? = nil) {
            self.fileName = fileName
            self.assetDeliveryState = assetDeliveryState
            self.uploadOperations = uploadOperations
            self.sourceFileChecksum = sourceFileChecksum
            self.fileSize = fileSize
            self.assetToken = assetToken
            self.assetType = assetType
            self.imageAsset = imageAsset
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appScreenshots
    }

    public struct Relationships: Codable {
        public var appScreenshotSet: AppScreenshotSet?

        public struct AppScreenshotSet: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshotSets
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appScreenshotSet: AppScreenshotSet? = nil) {
            self.appScreenshotSet = appScreenshotSet
        }
    }

    public init(attributes: Attributes? = nil, type: `Type`, relationships: Relationships? = nil, links: ResourceLinks, id: String) {
        self.attributes = attributes
        self.type = type
        self.relationships = relationships
        self.links = links
        self.id = id
    }
}

public struct CiScheduledStartCondition: Codable {
    public var schedule: Schedule?
    public var source: CiBranchPatterns?

    public struct Schedule: Codable {
        public var hour: Int?
        public var timezone: String?
        public var frequency: Frequency?
        public var days: [Day]?
        public var minute: Int?

        public enum Frequency: String, Codable, CaseIterable {
            case weekly = "WEEKLY"
            case daily = "DAILY"
            case hourly = "HOURLY"
        }

        public enum Day: String, Codable, CaseIterable {
            case sunday = "SUNDAY"
            case monday = "MONDAY"
            case tuesday = "TUESDAY"
            case wednesday = "WEDNESDAY"
            case thursday = "THURSDAY"
            case friday = "FRIDAY"
            case saturday = "SATURDAY"
        }

        public init(hour: Int? = nil, timezone: String? = nil, frequency: Frequency? = nil, days: [Day]? = nil, minute: Int? = nil) {
            self.hour = hour
            self.timezone = timezone
            self.frequency = frequency
            self.days = days
            self.minute = minute
        }
    }

    public init(schedule: Schedule? = nil, source: CiBranchPatterns? = nil) {
        self.schedule = schedule
        self.source = source
    }
}

public struct AppClipAdvancedExperienceImageResponse: Codable {
    /// AppClipAdvancedExperienceImage
    public var data: AppClipAdvancedExperienceImage
    public var links: DocumentLinks

    public init(data: AppClipAdvancedExperienceImage, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreReviewAttachment: Codable {
    public var id: String
    public var relationships: Relationships?
    public var links: ResourceLinks
    public var attributes: Attributes?
    public var type: `Type`

    public struct Relationships: Codable {
        public var appStoreReviewDetail: AppStoreReviewDetail?

        public struct AppStoreReviewDetail: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var type: `Type`
                public var id: String

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreReviewDetails
                }

                public init(type: `Type`, id: String) {
                    self.type = type
                    self.id = id
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appStoreReviewDetail: AppStoreReviewDetail? = nil) {
            self.appStoreReviewDetail = appStoreReviewDetail
        }
    }

    public struct Attributes: Codable {
        public var sourceFileChecksum: String?
        public var uploadOperations: [UploadOperation]?
        public var assetDeliveryState: AppMediaAssetState?
        public var fileSize: Int?
        public var fileName: String?

        public init(sourceFileChecksum: String? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil, fileSize: Int? = nil, fileName: String? = nil) {
            self.sourceFileChecksum = sourceFileChecksum
            self.uploadOperations = uploadOperations
            self.assetDeliveryState = assetDeliveryState
            self.fileSize = fileSize
            self.fileName = fileName
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreReviewAttachments
    }

    public init(id: String, relationships: Relationships? = nil, links: ResourceLinks, attributes: Attributes? = nil, type: `Type`) {
        self.id = id
        self.relationships = relationships
        self.links = links
        self.attributes = attributes
        self.type = type
    }
}

public struct AppClipDefaultExperienceLocalizationResponse: Codable {
    /// AppClipDefaultExperienceLocalization
    public var data: AppClipDefaultExperienceLocalization
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appClipDefaultExperience(AppClipDefaultExperience)
        case appClipHeaderImage(AppClipHeaderImage)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppClipDefaultExperience.self) {
                self = .appClipDefaultExperience(value)
            } else if let value = try? container.decode(AppClipHeaderImage.self) {
                self = .appClipHeaderImage(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appClipDefaultExperience(let value): try container.encode(value)
            case .appClipHeaderImage(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppClipDefaultExperienceLocalization, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct Territory: Codable {
    public var id: String
    public var links: ResourceLinks
    public var attributes: Attributes?
    public var type: `Type`

    public struct Attributes: Codable {
        public var currency: String?

        public init(currency: String? = nil) {
            self.currency = currency
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case territories
    }

    public init(id: String, links: ResourceLinks, attributes: Attributes? = nil, type: `Type`) {
        self.id = id
        self.links = links
        self.attributes = attributes
        self.type = type
    }
}

public struct CiIssueResponse: Codable {
    /// CiIssue
    public var data: CiIssue
    public var links: DocumentLinks

    public init(data: CiIssue, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionLocalizationResponse: Codable {
    /// AppStoreVersionLocalization
    public var data: AppStoreVersionLocalization
    public var links: DocumentLinks
    public var included: [IncludedItem]?

    public enum IncludedItem: Codable {
        case appStoreVersion(AppStoreVersion)
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appStoreVersion(let value): try container.encode(value)
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppStoreVersionLocalization, links: DocumentLinks, included: [IncludedItem]? = nil) {
        self.data = data
        self.links = links
        self.included = included
    }
}

public struct AppCategory: Codable {
    public var links: ResourceLinks
    public var type: `Type`
    public var attributes: Attributes?
    public var relationships: Relationships?
    public var id: String

    public enum `Type`: String, Codable, CaseIterable {
        case appCategories
    }

    public struct Attributes: Codable {
        public var platforms: [Platform]?

        public init(platforms: [Platform]? = nil) {
            self.platforms = platforms
        }
    }

    public struct Relationships: Codable {
        public var subcategories: Subcategories?
        public var parent: Parent?

        public struct Subcategories: Codable {
            public var meta: PagingInformation?
            public var data: [Datum]?
            public var links: Links?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(meta: PagingInformation? = nil, data: [Datum]? = nil, links: Links? = nil) {
                self.meta = meta
                self.data = data
                self.links = links
            }
        }

        public struct Parent: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var related: String?

                public init(this: String? = nil, related: String? = nil) {
                    self.this = this
                    self.related = related
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case related
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(subcategories: Subcategories? = nil, parent: Parent? = nil) {
            self.subcategories = subcategories
            self.parent = parent
        }
    }

    public init(links: ResourceLinks, type: `Type`, attributes: Attributes? = nil, relationships: Relationships? = nil, id: String) {
        self.links = links
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
        self.id = id
    }
}

public struct HTTPHeader: Codable {
    public var value: String?
    public var name: String?

    public init(value: String? = nil, name: String? = nil) {
        self.value = value
        self.name = name
    }
}

public struct AppClipHeaderImageResponse: Codable {
    public var included: [AppClipDefaultExperienceLocalization]?
    /// AppClipHeaderImage
    public var data: AppClipHeaderImage
    public var links: DocumentLinks

    public init(included: [AppClipDefaultExperienceLocalization]? = nil, data: AppClipHeaderImage, links: DocumentLinks) {
        self.included = included
        self.data = data
        self.links = links
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
